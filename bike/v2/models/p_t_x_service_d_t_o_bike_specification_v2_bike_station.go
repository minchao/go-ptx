// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PTXServiceDTOBikeSpecificationV2BikeStation BikeStation
//
// 自行車站點資訊
//
// swagger:model PTX.Service.DTO.Bike.Specification.V2.BikeStation
type PTXServiceDTOBikeSpecificationV2BikeStation struct {

	// String
	//
	// 業管單位代碼
	AuthorityID string `json:"AuthorityID,omitempty"`

	// Int32
	//
	// 可容納之自行車總數
	BikesCapacity int32 `json:"BikesCapacity,omitempty"`

	// DateTime
	//
	// 來源端平台資料更新時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)
	SrcUpdateTime string `json:"SrcUpdateTime,omitempty"`

	// NameType
	//
	// 站點地址
	StationAddress struct {
		PTXServiceDTOSharedSpecificationV2BaseNameType
	} `json:"StationAddress,omitempty"`

	// String
	//
	// 站點代碼
	StationID string `json:"StationID,omitempty"`

	// NameType
	//
	// 站點名稱
	StationName struct {
		PTXServiceDTOSharedSpecificationV2BaseNameType
	} `json:"StationName,omitempty"`

	// PointType
	//
	// 站點位置
	StationPosition struct {
		PTXServiceDTOSharedSpecificationV2BasePointType
	} `json:"StationPosition,omitempty"`

	// String
	//
	// 站點唯一識別代碼，規則為 {業管機關代碼} + {StationID}，其中 {業管機關代碼} 可於Authority API中的AuthorityCode欄位查詢
	StationUID string `json:"StationUID,omitempty"`

	// String
	//
	// 站點描述
	StopDescription string `json:"StopDescription,omitempty"`

	// DateTime
	//
	// 資料更新日期時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)
	// Required: true
	UpdateTime *string `json:"UpdateTime"`
}

// Validate validates this p t x service d t o bike specification v2 bike station
func (m *PTXServiceDTOBikeSpecificationV2BikeStation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStationAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStationName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStationPosition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTOBikeSpecificationV2BikeStation) validateStationAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.StationAddress) { // not required
		return nil
	}

	return nil
}

func (m *PTXServiceDTOBikeSpecificationV2BikeStation) validateStationName(formats strfmt.Registry) error {

	if swag.IsZero(m.StationName) { // not required
		return nil
	}

	return nil
}

func (m *PTXServiceDTOBikeSpecificationV2BikeStation) validateStationPosition(formats strfmt.Registry) error {

	if swag.IsZero(m.StationPosition) { // not required
		return nil
	}

	return nil
}

func (m *PTXServiceDTOBikeSpecificationV2BikeStation) validateUpdateTime(formats strfmt.Registry) error {

	if err := validate.Required("UpdateTime", "body", m.UpdateTime); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PTXServiceDTOBikeSpecificationV2BikeStation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PTXServiceDTOBikeSpecificationV2BikeStation) UnmarshalBinary(b []byte) error {
	var res PTXServiceDTOBikeSpecificationV2BikeStation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
