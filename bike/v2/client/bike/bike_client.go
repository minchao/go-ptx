// Code generated by go-swagger; DO NOT EDIT.

package bike

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new bike API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for bike API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	BikeAPIAvailability(params *BikeAPIAvailabilityParams, opts ...ClientOption) (*BikeAPIAvailabilityOK, *BikeAPIAvailabilityStatus299, error)

	BikeAPIStation(params *BikeAPIStationParams, opts ...ClientOption) (*BikeAPIStationOK, *BikeAPIStationStatus299, error)

	CyclingAPIShape(params *CyclingAPIShapeParams, opts ...ClientOption) (*CyclingAPIShapeOK, *CyclingAPIShapeStatus299, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  BikeAPIAvailability 取得動態指定s 縣市 的公共自行車即時車位資料

  取得動態指定[縣市]的公共自行車即時車位資料
*/
func (a *Client) BikeAPIAvailability(params *BikeAPIAvailabilityParams, opts ...ClientOption) (*BikeAPIAvailabilityOK, *BikeAPIAvailabilityStatus299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBikeAPIAvailabilityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BikeApi_Availability",
		Method:             "GET",
		PathPattern:        "/v2/Bike/Availability/{City}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BikeAPIAvailabilityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *BikeAPIAvailabilityOK:
		return value, nil, nil
	case *BikeAPIAvailabilityStatus299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for bike: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  BikeAPIStation 取得指定s 縣市 的公共自行車租借站位資料

  取得指定[縣市]的公共自行車租借站位資料
*/
func (a *Client) BikeAPIStation(params *BikeAPIStationParams, opts ...ClientOption) (*BikeAPIStationOK, *BikeAPIStationStatus299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBikeAPIStationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BikeApi_Station",
		Method:             "GET",
		PathPattern:        "/v2/Bike/Station/{City}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BikeAPIStationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *BikeAPIStationOK:
		return value, nil, nil
	case *BikeAPIStationStatus299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for bike: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CyclingAPIShape 取得指定縣市之自行車道路網圖資s

  取得指定縣市之自行車道路網圖資
*/
func (a *Client) CyclingAPIShape(params *CyclingAPIShapeParams, opts ...ClientOption) (*CyclingAPIShapeOK, *CyclingAPIShapeStatus299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCyclingAPIShapeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CyclingApi_Shape",
		Method:             "GET",
		PathPattern:        "/v2/Cycling/Shape/{City}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CyclingAPIShapeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CyclingAPIShapeOK:
		return value, nil, nil
	case *CyclingAPIShapeStatus299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for bike: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
