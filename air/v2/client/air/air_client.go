// Code generated by go-swagger; DO NOT EDIT.

package air

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new air API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for air API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AirAPIAirline2011(params *AirAPIAirline2011Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AirAPIAirline2011OK, *AirAPIAirline2011Status299, error)

	AirAPIAirline20111(params *AirAPIAirline20111Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AirAPIAirline20111OK, *AirAPIAirline20111Status299, error)

	AirAPIAirport2010(params *AirAPIAirport2010Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AirAPIAirport2010OK, *AirAPIAirport2010Status299, error)

	AirAPIAirport20101(params *AirAPIAirport20101Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AirAPIAirport20101OK, *AirAPIAirport20101Status299, error)

	AirAPIArrival2013(params *AirAPIArrival2013Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AirAPIArrival2013OK, *AirAPIArrival2013Status299, error)

	AirAPIArrival20131(params *AirAPIArrival20131Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AirAPIArrival20131OK, *AirAPIArrival20131Status299, error)

	AirAPIDeparture2012(params *AirAPIDeparture2012Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AirAPIDeparture2012OK, *AirAPIDeparture2012Status299, error)

	AirAPIDeparture20121(params *AirAPIDeparture20121Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AirAPIDeparture20121OK, *AirAPIDeparture20121Status299, error)

	AirAPIDomestic2017(params *AirAPIDomestic2017Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AirAPIDomestic2017OK, *AirAPIDomestic2017Status299, error)

	AirAPIFIDS2015(params *AirAPIFIDS2015Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AirAPIFIDS2015OK, *AirAPIFIDS2015Status299, error)

	AirAPIFIDS20151(params *AirAPIFIDS20151Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AirAPIFIDS20151OK, *AirAPIFIDS20151Status299, error)

	AirAPIFlight2014(params *AirAPIFlight2014Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AirAPIFlight2014OK, *AirAPIFlight2014Status299, error)

	AirAPIFlight20141(params *AirAPIFlight20141Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AirAPIFlight20141OK, *AirAPIFlight20141Status299, error)

	AirAPIInternational2018(params *AirAPIInternational2018Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AirAPIInternational2018OK, *AirAPIInternational2018Status299, error)

	AirAPIMETAR2016(params *AirAPIMETAR2016Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AirAPIMETAR2016OK, *AirAPIMETAR2016Status299, error)

	AirAPIMETAR20161(params *AirAPIMETAR20161Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AirAPIMETAR20161OK, *AirAPIMETAR20161Status299, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AirAPIAirline2011 取得指定s 航空公司 資料

  取得指定[航空公司]資料
*/
func (a *Client) AirAPIAirline2011(params *AirAPIAirline2011Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AirAPIAirline2011OK, *AirAPIAirline2011Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAirAPIAirline2011Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "AirApi_Airline_2011",
		Method:             "GET",
		PathPattern:        "/v2/Air/Airline/{IATA}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AirAPIAirline2011Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AirAPIAirline2011OK:
		return value, nil, nil
	case *AirAPIAirline2011Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for air: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AirAPIAirline20111 取得航空公司資料s

  取得所有航空公司資料
*/
func (a *Client) AirAPIAirline20111(params *AirAPIAirline20111Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AirAPIAirline20111OK, *AirAPIAirline20111Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAirAPIAirline20111Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "AirApi_Airline_2011_1",
		Method:             "GET",
		PathPattern:        "/v2/Air/Airline",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AirAPIAirline20111Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AirAPIAirline20111OK:
		return value, nil, nil
	case *AirAPIAirline20111Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for air: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AirAPIAirport2010 取得機場資料s

  取得所有機場資料
*/
func (a *Client) AirAPIAirport2010(params *AirAPIAirport2010Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AirAPIAirport2010OK, *AirAPIAirport2010Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAirAPIAirport2010Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "AirApi_Airport_2010",
		Method:             "GET",
		PathPattern:        "/v2/Air/Airport",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AirAPIAirport2010Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AirAPIAirport2010OK:
		return value, nil, nil
	case *AirAPIAirport2010Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for air: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AirAPIAirport20101 取得指定s 機場 資料

  取得指定[機場]資料
*/
func (a *Client) AirAPIAirport20101(params *AirAPIAirport20101Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AirAPIAirport20101OK, *AirAPIAirport20101Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAirAPIAirport20101Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "AirApi_Airport_2010_1",
		Method:             "GET",
		PathPattern:        "/v2/Air/Airport/{IATA}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AirAPIAirport20101Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AirAPIAirport20101OK:
		return value, nil, nil
	case *AirAPIAirport20101Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for air: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AirAPIArrival2013 取得機場的即時入境航班s

  取得機場的即時入境航班
*/
func (a *Client) AirAPIArrival2013(params *AirAPIArrival2013Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AirAPIArrival2013OK, *AirAPIArrival2013Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAirAPIArrival2013Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "AirApi_Arrival_2013",
		Method:             "GET",
		PathPattern:        "/v2/Air/FIDS/Airport/Arrival",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AirAPIArrival2013Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AirAPIArrival2013OK:
		return value, nil, nil
	case *AirAPIArrival2013Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for air: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AirAPIArrival20131 取得指定s 機場的即時入境航班

  取得[指定機場]的即時入境航班
*/
func (a *Client) AirAPIArrival20131(params *AirAPIArrival20131Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AirAPIArrival20131OK, *AirAPIArrival20131Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAirAPIArrival20131Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "AirApi_Arrival_2013_1",
		Method:             "GET",
		PathPattern:        "/v2/Air/FIDS/Airport/Arrival/{IATA}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AirAPIArrival20131Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AirAPIArrival20131OK:
		return value, nil, nil
	case *AirAPIArrival20131Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for air: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AirAPIDeparture2012 取得機場的即時出境航班s

  取得機場的即時出境航班
*/
func (a *Client) AirAPIDeparture2012(params *AirAPIDeparture2012Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AirAPIDeparture2012OK, *AirAPIDeparture2012Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAirAPIDeparture2012Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "AirApi_Departure_2012",
		Method:             "GET",
		PathPattern:        "/v2/Air/FIDS/Airport/Departure",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AirAPIDeparture2012Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AirAPIDeparture2012OK:
		return value, nil, nil
	case *AirAPIDeparture2012Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for air: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AirAPIDeparture20121 取得指定s 機場的即時出境航班

  取得指定的[機場即時出境航班]
*/
func (a *Client) AirAPIDeparture20121(params *AirAPIDeparture20121Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AirAPIDeparture20121OK, *AirAPIDeparture20121Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAirAPIDeparture20121Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "AirApi_Departure_2012_1",
		Method:             "GET",
		PathPattern:        "/v2/Air/FIDS/Airport/Departure/{IATA}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AirAPIDeparture20121Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AirAPIDeparture20121OK:
		return value, nil, nil
	case *AirAPIDeparture20121Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for air: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AirAPIDomestic2017 取得國內航空定期時刻表s
*/
func (a *Client) AirAPIDomestic2017(params *AirAPIDomestic2017Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AirAPIDomestic2017OK, *AirAPIDomestic2017Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAirAPIDomestic2017Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "AirApi_Domestic_2017",
		Method:             "GET",
		PathPattern:        "/v2/Air/GeneralSchedule/Domestic",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AirAPIDomestic2017Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AirAPIDomestic2017OK:
		return value, nil, nil
	case *AirAPIDomestic2017Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for air: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AirAPIFIDS2015 取得機場的即時航班資料s

  取得即時航班資料
*/
func (a *Client) AirAPIFIDS2015(params *AirAPIFIDS2015Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AirAPIFIDS2015OK, *AirAPIFIDS2015Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAirAPIFIDS2015Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "AirApi_FIDS_2015",
		Method:             "GET",
		PathPattern:        "/v2/Air/FIDS/Airport",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AirAPIFIDS2015Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AirAPIFIDS2015OK:
		return value, nil, nil
	case *AirAPIFIDS2015Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for air: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AirAPIFIDS20151 取得指定s 機場的即時航班 資料

  取得指定[機場的即時航班]資料
*/
func (a *Client) AirAPIFIDS20151(params *AirAPIFIDS20151Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AirAPIFIDS20151OK, *AirAPIFIDS20151Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAirAPIFIDS20151Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "AirApi_FIDS_2015_1",
		Method:             "GET",
		PathPattern:        "/v2/Air/FIDS/Airport/{IATA}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AirAPIFIDS20151Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AirAPIFIDS20151OK:
		return value, nil, nil
	case *AirAPIFIDS20151Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for air: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AirAPIFlight2014 取得即時航班資料s

  取得即時航班資料
*/
func (a *Client) AirAPIFlight2014(params *AirAPIFlight2014Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AirAPIFlight2014OK, *AirAPIFlight2014Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAirAPIFlight2014Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "AirApi_Flight_2014",
		Method:             "GET",
		PathPattern:        "/v2/Air/FIDS/Flight",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AirAPIFlight2014Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AirAPIFlight2014OK:
		return value, nil, nil
	case *AirAPIFlight2014Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for air: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AirAPIFlight20141 取得指定s 即時航班 資料
*/
func (a *Client) AirAPIFlight20141(params *AirAPIFlight20141Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AirAPIFlight20141OK, *AirAPIFlight20141Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAirAPIFlight20141Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "AirApi_Flight_2014_1",
		Method:             "GET",
		PathPattern:        "/v2/Air/FIDS/Flight/{FlightNo}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AirAPIFlight20141Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AirAPIFlight20141OK:
		return value, nil, nil
	case *AirAPIFlight20141Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for air: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AirAPIInternational2018 取得國際航空定期時刻表s
*/
func (a *Client) AirAPIInternational2018(params *AirAPIInternational2018Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AirAPIInternational2018OK, *AirAPIInternational2018Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAirAPIInternational2018Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "AirApi_International_2018",
		Method:             "GET",
		PathPattern:        "/v2/Air/GeneralSchedule/International",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AirAPIInternational2018Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AirAPIInternational2018OK:
		return value, nil, nil
	case *AirAPIInternational2018Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for air: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AirAPIMETAR2016 取得s 國內機場 氣象資訊觀測資料

  取得[國內機場]氣象資訊觀測資料
<br />目前提供之機場氣象觀測站代碼清單
<br />RCSS:松山機場    RCKH:高雄機場
<br />RCTP:桃園機場    RCMT:北竿機場
<br />RCFG:南竿機場    RCBS:金門機場
<br />RCQC:馬公機場    RCMQ:臺中機場
<br />RCKU:嘉義機場    RCNN:臺南機場
<br />RCYU:花蓮機場    RCFN:臺東機場
<br />RCLY:蘭嶼機場    RCGI:綠島機場
*/
func (a *Client) AirAPIMETAR2016(params *AirAPIMETAR2016Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AirAPIMETAR2016OK, *AirAPIMETAR2016Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAirAPIMETAR2016Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "AirApi_METAR_2016",
		Method:             "GET",
		PathPattern:        "/v2/Air/METAR/Airport",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AirAPIMETAR2016Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AirAPIMETAR2016OK:
		return value, nil, nil
	case *AirAPIMETAR2016Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for air: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AirAPIMETAR20161 取得指定s 國內機場 氣象資訊觀測資料

  取得指定[國內機場]氣象資訊觀測資料
*/
func (a *Client) AirAPIMETAR20161(params *AirAPIMETAR20161Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AirAPIMETAR20161OK, *AirAPIMETAR20161Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAirAPIMETAR20161Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "AirApi_METAR_2016_1",
		Method:             "GET",
		PathPattern:        "/v2/Air/METAR/Airport/{IATA}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AirAPIMETAR20161Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AirAPIMETAR20161OK:
		return value, nil, nil
	case *AirAPIMETAR20161Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for air: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
