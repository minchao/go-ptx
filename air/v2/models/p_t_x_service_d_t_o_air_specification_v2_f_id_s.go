// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PTXServiceDTOAirSpecificationV2FIDS FIDS
//
// 航班顯示資料
//
// swagger:model PTX.Service.DTO.Air.Specification.V2.FIDS
type PTXServiceDTOAirSpecificationV2FIDS struct {

	// String
	//
	// 航空器型號
	AcType string `json:"AcType,omitempty"`

	// DateTime
	//
	// 實際抵達時間(ISO8601格式:yyyy-MM-ddTHH:mm)
	ActualArrivalTime string `json:"ActualArrivalTime,omitempty"`

	// DateTime
	//
	// 實際出發時間(ISO8601格式:yyyy-MM-ddTHH:mm)
	ActualDepartureTime string `json:"ActualDepartureTime,omitempty"`

	// integer
	//
	// 航線種類 : [-2:'特殊',1:'國際',2:'國內',3:'兩岸',4:'國際包機',5:'國內包機',6:'兩岸包機']
	AirRouteType int32 `json:"AirRouteType,omitempty"`

	// String
	//
	// 航空公司IATA國際代碼
	// Required: true
	AirlineID *string `json:"AirlineID"`

	// String
	//
	// 目的地機場IATA國際代碼
	// Required: true
	ArrivalAirportID *string `json:"ArrivalAirportID"`

	// String
	//
	// 抵達停機坪(僅貨機提供)
	ArrivalApron string `json:"ArrivalApron,omitempty"`

	// String
	//
	// 抵達登機門(僅客機提供)
	ArrivalGate string `json:"ArrivalGate,omitempty"`

	// String
	//
	// 航班屬性狀態,為該機場觀點的狀態
	ArrivalRemark string `json:"ArrivalRemark,omitempty"`

	// String
	//
	// 航班屬性狀態(英文)
	ArrivalRemarkEn string `json:"ArrivalRemarkEn,omitempty"`

	// String
	//
	// 抵達航廈
	ArrivalTerminal string `json:"ArrivalTerminal,omitempty"`

	// String
	//
	// 行李轉盤
	BaggageClaim string `json:"BaggageClaim,omitempty"`

	// String
	//
	// 報到櫃檯
	CheckCounter string `json:"CheckCounter,omitempty"`

	// String
	//
	// 航班共用班號
	CodeShare string `json:"CodeShare,omitempty"`

	// String
	//
	// 起點機場IATA國際代碼
	// Required: true
	DepartureAirportID *string `json:"DepartureAirportID"`

	// String
	//
	// 出發停機坪(僅貨機提供)
	DepartureApron string `json:"DepartureApron,omitempty"`

	// String
	//
	// 出發登機門(僅客機提供)
	DepartureGate string `json:"DepartureGate,omitempty"`

	// String
	//
	// 航班屬性狀態,為第三方觀點的狀態(資料來源:民航局)
	DepartureRemark string `json:"DepartureRemark,omitempty"`

	// String
	//
	// 航班屬性狀態(英文)
	DepartureRemarkEn string `json:"DepartureRemarkEn,omitempty"`

	// String
	//
	// 出發航廈
	DepartureTerminal string `json:"DepartureTerminal,omitempty"`

	// DateTime
	//
	// 預估抵達時間(ISO8601格式:yyyy-MM-ddTHH:mm)
	EstimatedArrivalTime string `json:"EstimatedArrivalTime,omitempty"`

	// DateTime
	//
	// 預估出發時間(ISO8601格式:yyyy-MM-ddTHH:mm)
	EstimatedDepartureTime string `json:"EstimatedDepartureTime,omitempty"`

	// DateTime
	//
	// 航班日期(ISO8601格式:yyyy-MM-dd)
	// Required: true
	FlightDate *string `json:"FlightDate"`

	// String
	//
	// 航機班號(不包含航空公司的AirlineID，僅有班號數字)
	// Required: true
	FlightNumber *string `json:"FlightNumber"`

	// String
	//
	// 航班屬性
	FlightRemark string `json:"FlightRemark,omitempty"`

	// String
	//
	// 航班運行狀態,以航班的角度的狀態
	FlightStatus string `json:"FlightStatus,omitempty"`

	// String
	//
	// 航班運行狀態(英文)
	FlightStatusEn string `json:"FlightStatusEn,omitempty"`

	// String
	//
	// 航班運行狀態百分比(國內線)
	FlightStatusPC string `json:"FlightStatusPC,omitempty"`

	// Boolean
	//
	// 是否為貨機
	IsCargo bool `json:"IsCargo,omitempty"`

	// DateTime
	//
	// 表訂抵達時間(ISO8601格式:yyyy-MM-ddTHH:mm)
	ScheduleArrivalTime string `json:"ScheduleArrivalTime,omitempty"`

	// DateTime
	//
	// 表訂出發時間(ISO8601格式:yyyy-MM-ddTHH:mm)
	ScheduleDepartureTime string `json:"ScheduleDepartureTime,omitempty"`

	// DateTime
	//
	// 資料更新日期時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)
	// Required: true
	UpdateTime *string `json:"UpdateTime"`
}

// Validate validates this p t x service d t o air specification v2 f ID s
func (m *PTXServiceDTOAirSpecificationV2FIDS) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAirlineID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArrivalAirportID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDepartureAirportID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlightDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlightNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTOAirSpecificationV2FIDS) validateAirlineID(formats strfmt.Registry) error {

	if err := validate.Required("AirlineID", "body", m.AirlineID); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTOAirSpecificationV2FIDS) validateArrivalAirportID(formats strfmt.Registry) error {

	if err := validate.Required("ArrivalAirportID", "body", m.ArrivalAirportID); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTOAirSpecificationV2FIDS) validateDepartureAirportID(formats strfmt.Registry) error {

	if err := validate.Required("DepartureAirportID", "body", m.DepartureAirportID); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTOAirSpecificationV2FIDS) validateFlightDate(formats strfmt.Registry) error {

	if err := validate.Required("FlightDate", "body", m.FlightDate); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTOAirSpecificationV2FIDS) validateFlightNumber(formats strfmt.Registry) error {

	if err := validate.Required("FlightNumber", "body", m.FlightNumber); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTOAirSpecificationV2FIDS) validateUpdateTime(formats strfmt.Registry) error {

	if err := validate.Required("UpdateTime", "body", m.UpdateTime); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PTXServiceDTOAirSpecificationV2FIDS) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PTXServiceDTOAirSpecificationV2FIDS) UnmarshalBinary(b []byte) error {
	var res PTXServiceDTOAirSpecificationV2FIDS
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
