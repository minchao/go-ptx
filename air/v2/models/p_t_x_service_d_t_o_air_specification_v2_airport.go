// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PTXServiceDTOAirSpecificationV2Airport Airport
//
// 機場資料
//
// swagger:model PTX.Service.DTO.Air.Specification.V2.Airport
type PTXServiceDTOAirSpecificationV2Airport struct {

	// String
	//
	// 機場地址
	AirportAddress string `json:"AirportAddress,omitempty" xml:"AirportAddress,omitempty"`

	// NameType
	//
	// 機場所屬城市
	AirportCityName struct {
		PTXServiceDTOSharedSpecificationV2BaseNameType
	} `json:"AirportCityName,omitempty" xml:"NameType,omitempty"`

	// String
	//
	// 機場IATA國際代碼
	AirportIATA string `json:"AirportIATA,omitempty" xml:"AirportIATA,omitempty"`

	// String
	//
	// 機場ICAO國際代碼
	AirportICAO string `json:"AirportICAO,omitempty" xml:"AirportICAO,omitempty"`

	// String
	//
	// 機場IATA國際代碼
	// Required: true
	AirportID *string `json:"AirportID" xml:"AirportID"`

	// NameType
	//
	// 機場中文名稱
	AirportName struct {
		PTXServiceDTOSharedSpecificationV2BaseNameType
	} `json:"AirportName,omitempty" xml:"NameType,omitempty"`

	// String
	//
	// 機場國籍
	AirportNationality string `json:"AirportNationality,omitempty" xml:"AirportNationality,omitempty"`

	// String
	//
	// 機場聯繫電話
	AirportPhone string `json:"AirportPhone,omitempty" xml:"AirportPhone,omitempty"`

	// PointType
	//
	// 機場位置
	AirportPosition struct {
		PTXServiceDTOSharedSpecificationV2BasePointType
	} `json:"AirportPosition,omitempty" xml:"PointType,omitempty"`

	// String
	//
	// 業管機關代碼(流水號)
	AuthorityID string `json:"AuthorityID,omitempty" xml:"AuthorityID,omitempty"`

	// DateTime
	//
	// 資料更新日期時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)
	// Required: true
	// Format: date-time
	UpdateTime *strfmt.DateTime `json:"UpdateTime"`

	// Int32
	//
	// 資料版本編號
	// Required: true
	VersionID *int32 `json:"VersionID"`
}

// Validate validates this p t x service d t o air specification v2 airport
func (m *PTXServiceDTOAirSpecificationV2Airport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAirportCityName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAirportID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAirportName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAirportPosition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTOAirSpecificationV2Airport) validateAirportCityName(formats strfmt.Registry) error {
	if swag.IsZero(m.AirportCityName) { // not required
		return nil
	}

	return nil
}

func (m *PTXServiceDTOAirSpecificationV2Airport) validateAirportID(formats strfmt.Registry) error {

	if err := validate.Required("AirportID", "body", m.AirportID); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTOAirSpecificationV2Airport) validateAirportName(formats strfmt.Registry) error {
	if swag.IsZero(m.AirportName) { // not required
		return nil
	}

	return nil
}

func (m *PTXServiceDTOAirSpecificationV2Airport) validateAirportPosition(formats strfmt.Registry) error {
	if swag.IsZero(m.AirportPosition) { // not required
		return nil
	}

	return nil
}

func (m *PTXServiceDTOAirSpecificationV2Airport) validateUpdateTime(formats strfmt.Registry) error {

	if err := validate.Required("UpdateTime", "body", m.UpdateTime); err != nil {
		return err
	}

	if err := validate.FormatOf("UpdateTime", "body", "date-time", m.UpdateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTOAirSpecificationV2Airport) validateVersionID(formats strfmt.Registry) error {

	if err := validate.Required("VersionID", "body", m.VersionID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this p t x service d t o air specification v2 airport based on the context it is used
func (m *PTXServiceDTOAirSpecificationV2Airport) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAirportCityName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAirportName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAirportPosition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTOAirSpecificationV2Airport) contextValidateAirportCityName(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *PTXServiceDTOAirSpecificationV2Airport) contextValidateAirportName(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *PTXServiceDTOAirSpecificationV2Airport) contextValidateAirportPosition(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *PTXServiceDTOAirSpecificationV2Airport) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PTXServiceDTOAirSpecificationV2Airport) UnmarshalBinary(b []byte) error {
	var res PTXServiceDTOAirSpecificationV2Airport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
