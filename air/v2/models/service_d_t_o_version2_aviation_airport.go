// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceDTOVersion2AviationAirport Airport
//
// 機場資料
// swagger:model Service.DTO.Version2.Aviation.Airport
type ServiceDTOVersion2AviationAirport struct {

	// 機場地址
	AirportAdrress string `json:"AirportAdrress,omitempty"`

	// NameType
	//
	// 機場所屬城市
	AirportCityName *ServiceDTOVersion2BaseNameType `json:"AirportCityName,omitempty"`

	// 機場IATA國際代碼
	AirportIATA string `json:"AirportIATA,omitempty"`

	// 機場ICAO國際代碼
	AirportICAO string `json:"AirportICAO,omitempty"`

	// 機場IATA國際代碼
	// Required: true
	AirportID *string `json:"AirportID"`

	// NameType
	//
	// 機場中文名稱
	AirportName *ServiceDTOVersion2BaseNameType `json:"AirportName,omitempty"`

	// 機場國籍
	AirportNationality string `json:"AirportNationality,omitempty"`

	// 機場聯繫電話
	AirportPhone string `json:"AirportPhone,omitempty"`

	// PointType
	//
	// 機場位置
	AirportPosition *ServiceDTOVersion2BasePointType `json:"AirportPosition,omitempty"`

	// 業管機關代碼(流水號)
	// Max Length: 2
	// Min Length: 0
	AuthorityID *string `json:"AuthorityID,omitempty"`

	// DateTime
	//
	// 資料更新日期時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)
	// Required: true
	UpdateTime *string `json:"UpdateTime"`

	// 資料版本編號
	// Required: true
	VersionID *int32 `json:"VersionID"`
}

// Validate validates this service d t o version2 aviation airport
func (m *ServiceDTOVersion2AviationAirport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAirportCityName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAirportID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAirportName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAirportPosition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthorityID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceDTOVersion2AviationAirport) validateAirportCityName(formats strfmt.Registry) error {

	if swag.IsZero(m.AirportCityName) { // not required
		return nil
	}

	if m.AirportCityName != nil {
		if err := m.AirportCityName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AirportCityName")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion2AviationAirport) validateAirportID(formats strfmt.Registry) error {

	if err := validate.Required("AirportID", "body", m.AirportID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2AviationAirport) validateAirportName(formats strfmt.Registry) error {

	if swag.IsZero(m.AirportName) { // not required
		return nil
	}

	if m.AirportName != nil {
		if err := m.AirportName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AirportName")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion2AviationAirport) validateAirportPosition(formats strfmt.Registry) error {

	if swag.IsZero(m.AirportPosition) { // not required
		return nil
	}

	if m.AirportPosition != nil {
		if err := m.AirportPosition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AirportPosition")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion2AviationAirport) validateAuthorityID(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthorityID) { // not required
		return nil
	}

	if err := validate.MinLength("AuthorityID", "body", string(*m.AuthorityID), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("AuthorityID", "body", string(*m.AuthorityID), 2); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2AviationAirport) validateUpdateTime(formats strfmt.Registry) error {

	if err := validate.Required("UpdateTime", "body", m.UpdateTime); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2AviationAirport) validateVersionID(formats strfmt.Registry) error {

	if err := validate.Required("VersionID", "body", m.VersionID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceDTOVersion2AviationAirport) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceDTOVersion2AviationAirport) UnmarshalBinary(b []byte) error {
	var res ServiceDTOVersion2AviationAirport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
