// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PTXServiceDTOSharedSpecificationV3BaseDisplayHealth DisplayHealth
//
// API服務健康狀態
//
// swagger:model PTX.Service.DTO.Shared.Specification.V3.Base.DisplayHealth
type PTXServiceDTOSharedSpecificationV3BaseDisplayHealth struct {

	// Inbound
	//
	// 本平台資料來源轉入狀態
	Inbound struct {
		PTXServiceDTOSharedSpecificationV3BaseInbound
	} `json:"Inbound,omitempty" xml:"Inbound,omitempty"`

	// Outbound
	//
	// 本平台API狀態
	Outbound struct {
		PTXServiceDTOSharedSpecificationV3BaseOutbound
	} `json:"Outbound,omitempty" xml:"Outbound,omitempty"`

	// String
	//
	// API服務代碼
	// Required: true
	ServiceID *string `json:"ServiceID" xml:"String"`

	// String
	//
	// API服務中文名稱
	// Required: true
	ServiceName *string `json:"ServiceName" xml:"String"`
}

// Validate validates this p t x service d t o shared specification v3 base display health
func (m *PTXServiceDTOSharedSpecificationV3BaseDisplayHealth) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInbound(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutbound(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTOSharedSpecificationV3BaseDisplayHealth) validateInbound(formats strfmt.Registry) error {
	if swag.IsZero(m.Inbound) { // not required
		return nil
	}

	return nil
}

func (m *PTXServiceDTOSharedSpecificationV3BaseDisplayHealth) validateOutbound(formats strfmt.Registry) error {
	if swag.IsZero(m.Outbound) { // not required
		return nil
	}

	return nil
}

func (m *PTXServiceDTOSharedSpecificationV3BaseDisplayHealth) validateServiceID(formats strfmt.Registry) error {

	if err := validate.Required("ServiceID", "body", m.ServiceID); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTOSharedSpecificationV3BaseDisplayHealth) validateServiceName(formats strfmt.Registry) error {

	if err := validate.Required("ServiceName", "body", m.ServiceName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this p t x service d t o shared specification v3 base display health based on the context it is used
func (m *PTXServiceDTOSharedSpecificationV3BaseDisplayHealth) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInbound(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOutbound(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTOSharedSpecificationV3BaseDisplayHealth) contextValidateInbound(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *PTXServiceDTOSharedSpecificationV3BaseDisplayHealth) contextValidateOutbound(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *PTXServiceDTOSharedSpecificationV3BaseDisplayHealth) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PTXServiceDTOSharedSpecificationV3BaseDisplayHealth) UnmarshalBinary(b []byte) error {
	var res PTXServiceDTOSharedSpecificationV3BaseDisplayHealth
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
