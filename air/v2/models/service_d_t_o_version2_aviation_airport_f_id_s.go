// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceDTOVersion2AviationAirportFIDS Airport_FIDS
//
// 航班顯示資料(以機場角度)
//
// swagger:model Service.DTO.Version2.Aviation.Airport_FIDS
type ServiceDTOVersion2AviationAirportFIDS struct {

	// 機場IATA國際代碼
	// Required: true
	AirportID *string `json:"AirportID"`

	// 抵達航班顯示資料
	FIDSArrival []*ServiceDTOVersion2AviationFIDSArrival `json:"FIDSArrival"`

	// 出發航班顯示資料
	FIDSDeparture []*ServiceDTOVersion2AviationFIDSDeparture `json:"FIDSDeparture"`

	// DateTime
	//
	// 資料更新日期時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)
	// Required: true
	UpdateTime *string `json:"UpdateTime"`
}

// Validate validates this service d t o version2 aviation airport f ID s
func (m *ServiceDTOVersion2AviationAirportFIDS) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAirportID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFIDSArrival(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFIDSDeparture(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceDTOVersion2AviationAirportFIDS) validateAirportID(formats strfmt.Registry) error {

	if err := validate.Required("AirportID", "body", m.AirportID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2AviationAirportFIDS) validateFIDSArrival(formats strfmt.Registry) error {

	if swag.IsZero(m.FIDSArrival) { // not required
		return nil
	}

	for i := 0; i < len(m.FIDSArrival); i++ {
		if swag.IsZero(m.FIDSArrival[i]) { // not required
			continue
		}

		if m.FIDSArrival[i] != nil {
			if err := m.FIDSArrival[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("FIDSArrival" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceDTOVersion2AviationAirportFIDS) validateFIDSDeparture(formats strfmt.Registry) error {

	if swag.IsZero(m.FIDSDeparture) { // not required
		return nil
	}

	for i := 0; i < len(m.FIDSDeparture); i++ {
		if swag.IsZero(m.FIDSDeparture[i]) { // not required
			continue
		}

		if m.FIDSDeparture[i] != nil {
			if err := m.FIDSDeparture[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("FIDSDeparture" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceDTOVersion2AviationAirportFIDS) validateUpdateTime(formats strfmt.Registry) error {

	if err := validate.Required("UpdateTime", "body", m.UpdateTime); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceDTOVersion2AviationAirportFIDS) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceDTOVersion2AviationAirportFIDS) UnmarshalBinary(b []byte) error {
	var res ServiceDTOVersion2AviationAirportFIDS
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
