// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceDTOVersion2AviationGeneralFlightSchedule GeneralFlightSchedule
//
// 航空定期時刻表資料
// swagger:model Service.DTO.Version2.Aviation.GeneralFlightSchedule
type ServiceDTOVersion2AviationGeneralFlightSchedule struct {

	// 航空公司IATA國際代碼
	// Required: true
	AirlineID *string `json:"AirlineID"`

	// 目的地機場IATA國際代碼
	// Required: true
	ArrivalAirportID *string `json:"ArrivalAirportID"`

	// 終點機場抵達時間 (格式: HH:mm 當地時間，跨日以+1 表示)
	// Required: true
	ArrivalTime *string `json:"ArrivalTime"`

	// 共用班號
	CodeShare []*ServiceDTOVersion2AviationCodeShare `json:"CodeShare"`

	// 起點機場IATA國際代碼
	// Required: true
	DepartureAirportID *string `json:"DepartureAirportID"`

	// 起點機場出發時間 (格式: HH:mm 當地時間，跨日以+1 表示)
	// Required: true
	DepartureTime *string `json:"DepartureTime"`

	// 班機號碼
	// Required: true
	FlightNumber *string `json:"FlightNumber"`

	// 週五飛行與否
	// Required: true
	Friday *bool `json:"Friday"`

	// 週一飛行與否
	// Required: true
	Monday *bool `json:"Monday"`

	// 週六飛行與否
	// Required: true
	Saturday *bool `json:"Saturday"`

	// DateTime
	//
	// 班表結束日期(ISO8601格式:yyyy-MM-dd)
	// Required: true
	ScheduleEndDate *string `json:"ScheduleEndDate"`

	// DateTime
	//
	// 班表開始日期(ISO8601格式:yyyy-MM-dd)
	// Required: true
	ScheduleStartDate *string `json:"ScheduleStartDate"`

	// 週日飛行與否
	// Required: true
	Sunday *bool `json:"Sunday"`

	// 航廈
	Terminal string `json:"Terminal,omitempty"`

	// 週四飛行與否
	// Required: true
	Thursday *bool `json:"Thursday"`

	// 週二飛行與否
	// Required: true
	Tuesday *bool `json:"Tuesday"`

	// DateTime
	//
	// 資料更新日期時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)
	// Required: true
	UpdateTime *string `json:"UpdateTime"`

	// 資料版本編號
	// Required: true
	VersionID *int32 `json:"VersionID"`

	// 週三飛行與否
	// Required: true
	Wednesday *bool `json:"Wednesday"`
}

// Validate validates this service d t o version2 aviation general flight schedule
func (m *ServiceDTOVersion2AviationGeneralFlightSchedule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAirlineID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArrivalAirportID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArrivalTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCodeShare(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDepartureAirportID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDepartureTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlightNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFriday(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMonday(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSaturday(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScheduleEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScheduleStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSunday(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThursday(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTuesday(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWednesday(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceDTOVersion2AviationGeneralFlightSchedule) validateAirlineID(formats strfmt.Registry) error {

	if err := validate.Required("AirlineID", "body", m.AirlineID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2AviationGeneralFlightSchedule) validateArrivalAirportID(formats strfmt.Registry) error {

	if err := validate.Required("ArrivalAirportID", "body", m.ArrivalAirportID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2AviationGeneralFlightSchedule) validateArrivalTime(formats strfmt.Registry) error {

	if err := validate.Required("ArrivalTime", "body", m.ArrivalTime); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2AviationGeneralFlightSchedule) validateCodeShare(formats strfmt.Registry) error {

	if swag.IsZero(m.CodeShare) { // not required
		return nil
	}

	for i := 0; i < len(m.CodeShare); i++ {
		if swag.IsZero(m.CodeShare[i]) { // not required
			continue
		}

		if m.CodeShare[i] != nil {
			if err := m.CodeShare[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("CodeShare" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceDTOVersion2AviationGeneralFlightSchedule) validateDepartureAirportID(formats strfmt.Registry) error {

	if err := validate.Required("DepartureAirportID", "body", m.DepartureAirportID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2AviationGeneralFlightSchedule) validateDepartureTime(formats strfmt.Registry) error {

	if err := validate.Required("DepartureTime", "body", m.DepartureTime); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2AviationGeneralFlightSchedule) validateFlightNumber(formats strfmt.Registry) error {

	if err := validate.Required("FlightNumber", "body", m.FlightNumber); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2AviationGeneralFlightSchedule) validateFriday(formats strfmt.Registry) error {

	if err := validate.Required("Friday", "body", m.Friday); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2AviationGeneralFlightSchedule) validateMonday(formats strfmt.Registry) error {

	if err := validate.Required("Monday", "body", m.Monday); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2AviationGeneralFlightSchedule) validateSaturday(formats strfmt.Registry) error {

	if err := validate.Required("Saturday", "body", m.Saturday); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2AviationGeneralFlightSchedule) validateScheduleEndDate(formats strfmt.Registry) error {

	if err := validate.Required("ScheduleEndDate", "body", m.ScheduleEndDate); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2AviationGeneralFlightSchedule) validateScheduleStartDate(formats strfmt.Registry) error {

	if err := validate.Required("ScheduleStartDate", "body", m.ScheduleStartDate); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2AviationGeneralFlightSchedule) validateSunday(formats strfmt.Registry) error {

	if err := validate.Required("Sunday", "body", m.Sunday); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2AviationGeneralFlightSchedule) validateThursday(formats strfmt.Registry) error {

	if err := validate.Required("Thursday", "body", m.Thursday); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2AviationGeneralFlightSchedule) validateTuesday(formats strfmt.Registry) error {

	if err := validate.Required("Tuesday", "body", m.Tuesday); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2AviationGeneralFlightSchedule) validateUpdateTime(formats strfmt.Registry) error {

	if err := validate.Required("UpdateTime", "body", m.UpdateTime); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2AviationGeneralFlightSchedule) validateVersionID(formats strfmt.Registry) error {

	if err := validate.Required("VersionID", "body", m.VersionID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2AviationGeneralFlightSchedule) validateWednesday(formats strfmt.Registry) error {

	if err := validate.Required("Wednesday", "body", m.Wednesday); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceDTOVersion2AviationGeneralFlightSchedule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceDTOVersion2AviationGeneralFlightSchedule) UnmarshalBinary(b []byte) error {
	var res ServiceDTOVersion2AviationGeneralFlightSchedule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
