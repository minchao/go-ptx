// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PTXServiceDTOBusSpecificationV3SubRoute SubRoute
//
// swagger:model PTX.Service.DTO.Bus.Specification.V3.SubRoute
type PTXServiceDTOBusSpecificationV3SubRoute struct {

	// NameType
	//
	// 路線起站名稱
	DepartureStopName struct {
		PTXServiceDTOSharedSpecificationV3BaseNameType
	} `json:"DepartureStopName,omitempty" xml:"NameType,omitempty"`

	// NameType
	//
	// 路線迄站名稱
	DestinationStopName struct {
		PTXServiceDTOSharedSpecificationV3BaseNameType
	} `json:"DestinationStopName,omitempty" xml:"NameType,omitempty"`

	// integer
	//
	// 車輛去返程 : [0:'去程',1:'返程',2:'迴圈',255:'未知']
	// Required: true
	Direction *string `json:"Direction"`

	// Stop
	//
	// 終點站牌
	EndStop struct {
		PTXServiceDTOBusSpecificationV3SubRouteStop
	} `json:"EndStop,omitempty" xml:"Stop,omitempty"`

	// String
	//
	// 車頭描述
	HeadSign string `json:"HeadSign,omitempty" xml:"String,omitempty"`

	// Array
	//
	// 營運業者
	// Required: true
	Operators []*PTXServiceDTOBusSpecificationV3SubRouteOperator "json:\"Operators\" xml:\"List`1\""

	// String
	//
	// 機關定義路線代碼
	// Required: true
	RouteID *string `json:"RouteID" xml:"String"`

	// NameType
	//
	// 路線名稱
	// Required: true
	RouteName struct {
		PTXServiceDTOSharedSpecificationV3BaseNameType
	} `json:"RouteName" xml:"NameType"`

	// String
	//
	// 路線唯一識別代碼，規則為 {業管機關簡碼} + {RouteID}，其中 {業管機關簡碼} 可於Authority API中的AuthorityCode欄位查詢
	// Required: true
	RouteUID *string `json:"RouteUID" xml:"String"`

	// Stop
	//
	// 起始站牌
	StartStop struct {
		PTXServiceDTOBusSpecificationV3SubRouteStop
	} `json:"StartStop,omitempty" xml:"Stop,omitempty"`

	// String
	//
	// 地區既用中之附屬路線代碼(為原資料內碼)
	// Required: true
	SubRouteID *string `json:"SubRouteID" xml:"String"`

	// NameType
	//
	// 附屬路線長名稱
	SubRouteLongName struct {
		PTXServiceDTOSharedSpecificationV3BaseNameType
	} `json:"SubRouteLongName,omitempty" xml:"NameType,omitempty"`

	// NameType
	//
	// 附屬路線名稱
	// Required: true
	SubRouteName struct {
		PTXServiceDTOSharedSpecificationV3BaseNameType
	} `json:"SubRouteName" xml:"NameType"`

	// String
	//
	// 附屬路線唯一識別代碼，規則為 {業管機關簡碼} + {SubRouteID}，其中 {業管機關簡碼} 可於Authority API中的AuthorityCode欄位查詢
	// Required: true
	SubRouteUID *string `json:"SubRouteUID" xml:"String"`
}

// Validate validates this p t x service d t o bus specification v3 sub route
func (m *PTXServiceDTOBusSpecificationV3SubRoute) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDepartureStopName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestinationStopName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndStop(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperators(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouteID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouteName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouteUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartStop(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubRouteID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubRouteLongName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubRouteName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubRouteUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTOBusSpecificationV3SubRoute) validateDepartureStopName(formats strfmt.Registry) error {
	if swag.IsZero(m.DepartureStopName) { // not required
		return nil
	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV3SubRoute) validateDestinationStopName(formats strfmt.Registry) error {
	if swag.IsZero(m.DestinationStopName) { // not required
		return nil
	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV3SubRoute) validateDirection(formats strfmt.Registry) error {

	if err := validate.Required("Direction", "body", m.Direction); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV3SubRoute) validateEndStop(formats strfmt.Registry) error {
	if swag.IsZero(m.EndStop) { // not required
		return nil
	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV3SubRoute) validateOperators(formats strfmt.Registry) error {

	if err := validate.Required("Operators", "body", m.Operators); err != nil {
		return err
	}

	for i := 0; i < len(m.Operators); i++ {
		if swag.IsZero(m.Operators[i]) { // not required
			continue
		}

		if m.Operators[i] != nil {
			if err := m.Operators[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Operators" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV3SubRoute) validateRouteID(formats strfmt.Registry) error {

	if err := validate.Required("RouteID", "body", m.RouteID); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV3SubRoute) validateRouteName(formats strfmt.Registry) error {

	return nil
}

func (m *PTXServiceDTOBusSpecificationV3SubRoute) validateRouteUID(formats strfmt.Registry) error {

	if err := validate.Required("RouteUID", "body", m.RouteUID); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV3SubRoute) validateStartStop(formats strfmt.Registry) error {
	if swag.IsZero(m.StartStop) { // not required
		return nil
	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV3SubRoute) validateSubRouteID(formats strfmt.Registry) error {

	if err := validate.Required("SubRouteID", "body", m.SubRouteID); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV3SubRoute) validateSubRouteLongName(formats strfmt.Registry) error {
	if swag.IsZero(m.SubRouteLongName) { // not required
		return nil
	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV3SubRoute) validateSubRouteName(formats strfmt.Registry) error {

	return nil
}

func (m *PTXServiceDTOBusSpecificationV3SubRoute) validateSubRouteUID(formats strfmt.Registry) error {

	if err := validate.Required("SubRouteUID", "body", m.SubRouteUID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this p t x service d t o bus specification v3 sub route based on the context it is used
func (m *PTXServiceDTOBusSpecificationV3SubRoute) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDepartureStopName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDestinationStopName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEndStop(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOperators(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRouteName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStartStop(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubRouteLongName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubRouteName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTOBusSpecificationV3SubRoute) contextValidateDepartureStopName(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *PTXServiceDTOBusSpecificationV3SubRoute) contextValidateDestinationStopName(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *PTXServiceDTOBusSpecificationV3SubRoute) contextValidateEndStop(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *PTXServiceDTOBusSpecificationV3SubRoute) contextValidateOperators(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Operators); i++ {

		if m.Operators[i] != nil {
			if err := m.Operators[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Operators" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV3SubRoute) contextValidateRouteName(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *PTXServiceDTOBusSpecificationV3SubRoute) contextValidateStartStop(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *PTXServiceDTOBusSpecificationV3SubRoute) contextValidateSubRouteLongName(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *PTXServiceDTOBusSpecificationV3SubRoute) contextValidateSubRouteName(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *PTXServiceDTOBusSpecificationV3SubRoute) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PTXServiceDTOBusSpecificationV3SubRoute) UnmarshalBinary(b []byte) error {
	var res PTXServiceDTOBusSpecificationV3SubRoute
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
