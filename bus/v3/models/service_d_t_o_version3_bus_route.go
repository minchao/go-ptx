// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceDTOVersion3BusRoute Route
//
// 路線資料型別
//
// swagger:model Service.DTO.Version3.Bus.Route
type ServiceDTOVersion3BusRoute struct {

	// NameType
	//
	// 路線起站名稱
	// Required: true
	DepartureStopName *ServiceDTOVersion3BaseNameType `json:"DepartureStopName"`

	// NameType
	//
	// 路線迄站名稱
	// Required: true
	DestinationStopName *ServiceDTOVersion3BaseNameType `json:"DestinationStopName"`

	// Stop
	//
	// 終點站牌
	// Required: true
	EndStop *ServiceDTOVersion3BusRouteStop `json:"EndStop"`

	// NameType
	//
	// 計費緩衝區敘述
	FareBufferZoneDescription *ServiceDTOVersion3BaseNameType `json:"FareBufferZoneDescription,omitempty"`

	// 收費資訊說明網址
	FareURL string `json:"FareURL,omitempty"`

	// 實際上是否有多條附屬路線。(此欄位值與SubRoutes結構並無強烈的絕對關聯。詳細說明請參閱swagger上方的【資料服務使用注意事項】)
	// Required: true
	HasSubRoutes *bool `json:"HasSubRoutes"`

	// 是否為環狀線
	// Required: true
	IsCircular *bool `json:"IsCircular"`

	// 路線公車動態資訊網址
	LiveBusURL string `json:"LiveBusURL,omitempty"`

	// 營運業者
	// Required: true
	Operators []*ServiceDTOVersion3BusRouteOperator `json:"Operators"`

	// 路線描述
	RouteDescription string `json:"RouteDescription,omitempty"`

	// 路線旅行長度
	RouteDistance float32 `json:"RouteDistance,omitempty"`

	// 地區既用中之路線代碼(為原資料內碼)
	// Required: true
	RouteID *string `json:"RouteID"`

	// NameType
	//
	// 路線長名稱
	RouteLongName *ServiceDTOVersion3BaseNameType `json:"RouteLongName,omitempty"`

	// 路線簡圖網址
	RouteMapImageURL string `json:"RouteMapImageURL,omitempty"`

	// NameType
	//
	// 路線名稱
	// Required: true
	RouteName *ServiceDTOVersion3BaseNameType `json:"RouteName"`

	// integer
	//
	// 公車路線類別 : [11:'市區公車',12:'公路客運',13:'國道客運']
	// Required: true
	RouteType *int32 `json:"RouteType"`

	// 路線唯一識別代碼，規則為 {業管機關簡碼} + {RouteID}，其中 {業管機關簡碼} 可於Authority API中的AuthorityCode欄位查詢
	// Required: true
	RouteUID *string `json:"RouteUID"`

	// 路線資訊說明網址
	RouteURL string `json:"RouteURL,omitempty"`

	// ServiceType
	//
	// 公車路線服務類型
	// Required: true
	ServiceType *ServiceDTOVersion3BusServiceType `json:"ServiceType"`

	// Stop
	//
	// 起始站牌
	// Required: true
	StartStop *ServiceDTOVersion3BusRouteStop `json:"StartStop"`

	// NameType
	//
	// 票價描述
	// Required: true
	TicketPriceDescription *ServiceDTOVersion3BaseNameType `json:"TicketPriceDescription"`
}

// Validate validates this service d t o version3 bus route
func (m *ServiceDTOVersion3BusRoute) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDepartureStopName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestinationStopName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndStop(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFareBufferZoneDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHasSubRoutes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsCircular(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperators(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouteID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouteLongName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouteName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouteType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouteUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartStop(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTicketPriceDescription(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceDTOVersion3BusRoute) validateDepartureStopName(formats strfmt.Registry) error {

	if err := validate.Required("DepartureStopName", "body", m.DepartureStopName); err != nil {
		return err
	}

	if m.DepartureStopName != nil {
		if err := m.DepartureStopName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DepartureStopName")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion3BusRoute) validateDestinationStopName(formats strfmt.Registry) error {

	if err := validate.Required("DestinationStopName", "body", m.DestinationStopName); err != nil {
		return err
	}

	if m.DestinationStopName != nil {
		if err := m.DestinationStopName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DestinationStopName")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion3BusRoute) validateEndStop(formats strfmt.Registry) error {

	if err := validate.Required("EndStop", "body", m.EndStop); err != nil {
		return err
	}

	if m.EndStop != nil {
		if err := m.EndStop.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EndStop")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion3BusRoute) validateFareBufferZoneDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.FareBufferZoneDescription) { // not required
		return nil
	}

	if m.FareBufferZoneDescription != nil {
		if err := m.FareBufferZoneDescription.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FareBufferZoneDescription")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion3BusRoute) validateHasSubRoutes(formats strfmt.Registry) error {

	if err := validate.Required("HasSubRoutes", "body", m.HasSubRoutes); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3BusRoute) validateIsCircular(formats strfmt.Registry) error {

	if err := validate.Required("IsCircular", "body", m.IsCircular); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3BusRoute) validateOperators(formats strfmt.Registry) error {

	if err := validate.Required("Operators", "body", m.Operators); err != nil {
		return err
	}

	for i := 0; i < len(m.Operators); i++ {
		if swag.IsZero(m.Operators[i]) { // not required
			continue
		}

		if m.Operators[i] != nil {
			if err := m.Operators[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Operators" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceDTOVersion3BusRoute) validateRouteID(formats strfmt.Registry) error {

	if err := validate.Required("RouteID", "body", m.RouteID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3BusRoute) validateRouteLongName(formats strfmt.Registry) error {

	if swag.IsZero(m.RouteLongName) { // not required
		return nil
	}

	if m.RouteLongName != nil {
		if err := m.RouteLongName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RouteLongName")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion3BusRoute) validateRouteName(formats strfmt.Registry) error {

	if err := validate.Required("RouteName", "body", m.RouteName); err != nil {
		return err
	}

	if m.RouteName != nil {
		if err := m.RouteName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RouteName")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion3BusRoute) validateRouteType(formats strfmt.Registry) error {

	if err := validate.Required("RouteType", "body", m.RouteType); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3BusRoute) validateRouteUID(formats strfmt.Registry) error {

	if err := validate.Required("RouteUID", "body", m.RouteUID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3BusRoute) validateServiceType(formats strfmt.Registry) error {

	if err := validate.Required("ServiceType", "body", m.ServiceType); err != nil {
		return err
	}

	if m.ServiceType != nil {
		if err := m.ServiceType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ServiceType")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion3BusRoute) validateStartStop(formats strfmt.Registry) error {

	if err := validate.Required("StartStop", "body", m.StartStop); err != nil {
		return err
	}

	if m.StartStop != nil {
		if err := m.StartStop.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("StartStop")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion3BusRoute) validateTicketPriceDescription(formats strfmt.Registry) error {

	if err := validate.Required("TicketPriceDescription", "body", m.TicketPriceDescription); err != nil {
		return err
	}

	if m.TicketPriceDescription != nil {
		if err := m.TicketPriceDescription.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TicketPriceDescription")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceDTOVersion3BusRoute) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceDTOVersion3BusRoute) UnmarshalBinary(b []byte) error {
	var res ServiceDTOVersion3BusRoute
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
