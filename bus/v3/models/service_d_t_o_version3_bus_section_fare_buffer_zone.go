// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceDTOVersion3BusSectionFareBufferZone BufferZone
// swagger:model Service.DTO.Version3.Bus.SectionFare.BufferZone
type ServiceDTOVersion3BusSectionFareBufferZone struct {

	// 收費緩衝區描述
	BufferZoneDescription string `json:"BufferZoneDescription,omitempty"`

	// integer
	//
	// 方向性描述 : [0:'去程',1:'返程',2:'迴圈',255:'未知']
	// Required: true
	Direction *int32 `json:"Direction"`

	// FareBufferZone
	//
	// 緩衝區訖點
	// Required: true
	FareBufferZoneDestinations *ServiceDTOVersion3BusSectionFareFareBufferZone `json:"FareBufferZoneDestinations"`

	// FareBufferZone
	//
	// 緩衝區起點
	// Required: true
	FareBufferZoneOrigins *ServiceDTOVersion3BusSectionFareFareBufferZone `json:"FareBufferZoneOrigins"`

	// 每段收費資訊
	// Required: true
	Fares []*ServiceDTOVersion3BusSectionFareFare `json:"Fares"`

	// 緩衝區順序
	// Required: true
	SectionSequence *string `json:"SectionSequence"`

	// 緩衝區代號
	ZoneID string `json:"ZoneID,omitempty"`
}

// Validate validates this service d t o version3 bus section fare buffer zone
func (m *ServiceDTOVersion3BusSectionFareBufferZone) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFareBufferZoneDestinations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFareBufferZoneOrigins(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFares(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSectionSequence(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceDTOVersion3BusSectionFareBufferZone) validateDirection(formats strfmt.Registry) error {

	if err := validate.Required("Direction", "body", m.Direction); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3BusSectionFareBufferZone) validateFareBufferZoneDestinations(formats strfmt.Registry) error {

	if err := validate.Required("FareBufferZoneDestinations", "body", m.FareBufferZoneDestinations); err != nil {
		return err
	}

	if m.FareBufferZoneDestinations != nil {
		if err := m.FareBufferZoneDestinations.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FareBufferZoneDestinations")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion3BusSectionFareBufferZone) validateFareBufferZoneOrigins(formats strfmt.Registry) error {

	if err := validate.Required("FareBufferZoneOrigins", "body", m.FareBufferZoneOrigins); err != nil {
		return err
	}

	if m.FareBufferZoneOrigins != nil {
		if err := m.FareBufferZoneOrigins.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FareBufferZoneOrigins")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion3BusSectionFareBufferZone) validateFares(formats strfmt.Registry) error {

	if err := validate.Required("Fares", "body", m.Fares); err != nil {
		return err
	}

	for i := 0; i < len(m.Fares); i++ {
		if swag.IsZero(m.Fares[i]) { // not required
			continue
		}

		if m.Fares[i] != nil {
			if err := m.Fares[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Fares" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceDTOVersion3BusSectionFareBufferZone) validateSectionSequence(formats strfmt.Registry) error {

	if err := validate.Required("SectionSequence", "body", m.SectionSequence); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceDTOVersion3BusSectionFareBufferZone) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceDTOVersion3BusSectionFareBufferZone) UnmarshalBinary(b []byte) error {
	var res ServiceDTOVersion3BusSectionFareBufferZone
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
