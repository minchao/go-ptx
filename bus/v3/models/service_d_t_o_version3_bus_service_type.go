// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceDTOVersion3BusServiceType ServiceType
// swagger:model Service.DTO.Version3.Bus.ServiceType
type ServiceDTOVersion3BusServiceType struct {

	// 是否為活動接駁車
	// Required: true
	IsActivityShuttleBus *bool `json:"IsActivityShuttleBus"`

	// 是否為機場接駁車
	// Required: true
	IsAirportShuttleBus *bool `json:"IsAirportShuttleBus"`

	// 是否為BRT公車
	// Required: true
	IsBRTBus *bool `json:"IsBRTBus"`

	// 是否為免費公車
	// Required: true
	IsFreeBus *bool `json:"IsFreeBus"`

	// 是否為醫療公車
	// Required: true
	IsMedicalBus *bool `json:"IsMedicalBus"`

	// 是否為捷運接駁車
	// Required: true
	IsMetroShuttleBus *bool `json:"IsMetroShuttleBus"`

	// 是否為夜間公車
	// Required: true
	IsNightBus *bool `json:"IsNightBus"`

	// 是否為高鐵接駁車
	// Required: true
	IsTHSRShuttleBus *bool `json:"IsTHSRShuttleBus"`

	// 是否為台鐵接駁車
	// Required: true
	IsTRAShuttleBus *bool `json:"IsTRAShuttleBus"`

	// 是否為台灣好行公車
	// Required: true
	IsTaiwanTripBus *bool `json:"IsTaiwanTripBus"`

	// 是否為觀光巴士
	// Required: true
	IsTourBus *bool `json:"IsTourBus"`

	// 是否為遊覽車
	// Required: true
	IsTouristBus *bool `json:"IsTouristBus"`

	// 是否為幹線公車
	// Required: true
	IsTrunkBus *bool `json:"IsTrunkBus"`
}

// Validate validates this service d t o version3 bus service type
func (m *ServiceDTOVersion3BusServiceType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIsActivityShuttleBus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsAirportShuttleBus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsBRTBus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsFreeBus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsMedicalBus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsMetroShuttleBus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsNightBus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsTHSRShuttleBus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsTRAShuttleBus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsTaiwanTripBus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsTourBus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsTouristBus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsTrunkBus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceDTOVersion3BusServiceType) validateIsActivityShuttleBus(formats strfmt.Registry) error {

	if err := validate.Required("IsActivityShuttleBus", "body", m.IsActivityShuttleBus); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3BusServiceType) validateIsAirportShuttleBus(formats strfmt.Registry) error {

	if err := validate.Required("IsAirportShuttleBus", "body", m.IsAirportShuttleBus); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3BusServiceType) validateIsBRTBus(formats strfmt.Registry) error {

	if err := validate.Required("IsBRTBus", "body", m.IsBRTBus); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3BusServiceType) validateIsFreeBus(formats strfmt.Registry) error {

	if err := validate.Required("IsFreeBus", "body", m.IsFreeBus); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3BusServiceType) validateIsMedicalBus(formats strfmt.Registry) error {

	if err := validate.Required("IsMedicalBus", "body", m.IsMedicalBus); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3BusServiceType) validateIsMetroShuttleBus(formats strfmt.Registry) error {

	if err := validate.Required("IsMetroShuttleBus", "body", m.IsMetroShuttleBus); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3BusServiceType) validateIsNightBus(formats strfmt.Registry) error {

	if err := validate.Required("IsNightBus", "body", m.IsNightBus); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3BusServiceType) validateIsTHSRShuttleBus(formats strfmt.Registry) error {

	if err := validate.Required("IsTHSRShuttleBus", "body", m.IsTHSRShuttleBus); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3BusServiceType) validateIsTRAShuttleBus(formats strfmt.Registry) error {

	if err := validate.Required("IsTRAShuttleBus", "body", m.IsTRAShuttleBus); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3BusServiceType) validateIsTaiwanTripBus(formats strfmt.Registry) error {

	if err := validate.Required("IsTaiwanTripBus", "body", m.IsTaiwanTripBus); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3BusServiceType) validateIsTourBus(formats strfmt.Registry) error {

	if err := validate.Required("IsTourBus", "body", m.IsTourBus); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3BusServiceType) validateIsTouristBus(formats strfmt.Registry) error {

	if err := validate.Required("IsTouristBus", "body", m.IsTouristBus); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3BusServiceType) validateIsTrunkBus(formats strfmt.Registry) error {

	if err := validate.Required("IsTrunkBus", "body", m.IsTrunkBus); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceDTOVersion3BusServiceType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceDTOVersion3BusServiceType) UnmarshalBinary(b []byte) error {
	var res ServiceDTOVersion3BusServiceType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
