// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PTXServiceDTOBusSpecificationV3RouteFare RouteFare
//
// 每日時刻表資料
//
// swagger:model PTX.Service.DTO.Bus.Specification.V3.RouteFare
type PTXServiceDTOBusSpecificationV3RouteFare struct {

	// Int32
	//
	// 描述該路線計費方式 : [0:'段次計費',1:'起迄站間計費',2:'計費站區間計費']
	// Required: true
	FarePricingType *int64 `json:"FarePricingType"`

	// Int32
	//
	// 該收費方式是否應用到所有附屬路線 : [0:'否',1:'是']
	// Required: true
	IsForAllSubRoutes *int64 `json:"IsForAllSubRoutes"`

	// Int32
	//
	// 是否為免費公車 : [0:'否',1:'是']
	// Required: true
	IsFreeBus *int64 `json:"IsFreeBus"`

	// Array
	//
	// 起迄站間計費
	ODFares []*PTXServiceDTOBusSpecificationV3RouteFareODFare "json:\"ODFares\" xml:\"List`1\""

	// String
	//
	// 營運業者代碼
	OperatorID string `json:"OperatorID,omitempty" xml:"OperatorID,omitempty"`

	// String
	//
	// 地區既用中之路線代碼(為原資料內碼)
	// Required: true
	RouteID *string `json:"RouteID" xml:"RouteID"`

	// NameType
	//
	// 路線名稱
	RouteName struct {
		PTXServiceDTOSharedSpecificationV3BaseNameType
	} `json:"RouteName,omitempty" xml:"NameType,omitempty"`

	// String
	//
	// 路線唯一識別代碼，規則為 {業管機關簡碼} + {RouteID}，其中 {業管機關簡碼} 可於Authority API中的AuthorityCode欄位查詢
	// Required: true
	RouteUID *string `json:"RouteUID" xml:"RouteUID"`

	// Array
	//
	// 段次計費
	SectionFares []*PTXServiceDTOBusSpecificationV3RouteFareSectionFare "json:\"SectionFares\" xml:\"List`1\""

	// Array
	//
	// 計費站區間計費
	StageFares []*PTXServiceDTOBusSpecificationV3RouteFareStageFare "json:\"StageFares\" xml:\"List`1\""

	// String
	//
	// 地區既用中之附屬路線代碼(為原資料內碼)
	SubRouteID string `json:"SubRouteID,omitempty" xml:"SubRouteID,omitempty"`

	// NameType
	//
	// 附屬路線名稱
	SubRouteName struct {
		PTXServiceDTOSharedSpecificationV3BaseNameType
	} `json:"SubRouteName,omitempty" xml:"NameType,omitempty"`

	// String
	//
	// 附屬路線唯一識別代碼，規則為 {業管機關簡碼} + {SubRouteID}，其中 {業管機關簡碼} 可於Authority API中的AuthorityCode欄位查詢
	SubRouteUID string `json:"SubRouteUID,omitempty" xml:"SubRouteUID,omitempty"`
}

// Validate validates this p t x service d t o bus specification v3 route fare
func (m *PTXServiceDTOBusSpecificationV3RouteFare) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFarePricingType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsForAllSubRoutes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsFreeBus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateODFares(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouteID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouteName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouteUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSectionFares(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStageFares(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubRouteName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTOBusSpecificationV3RouteFare) validateFarePricingType(formats strfmt.Registry) error {

	if err := validate.Required("FarePricingType", "body", m.FarePricingType); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV3RouteFare) validateIsForAllSubRoutes(formats strfmt.Registry) error {

	if err := validate.Required("IsForAllSubRoutes", "body", m.IsForAllSubRoutes); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV3RouteFare) validateIsFreeBus(formats strfmt.Registry) error {

	if err := validate.Required("IsFreeBus", "body", m.IsFreeBus); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV3RouteFare) validateODFares(formats strfmt.Registry) error {
	if swag.IsZero(m.ODFares) { // not required
		return nil
	}

	for i := 0; i < len(m.ODFares); i++ {
		if swag.IsZero(m.ODFares[i]) { // not required
			continue
		}

		if m.ODFares[i] != nil {
			if err := m.ODFares[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ODFares" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ODFares" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV3RouteFare) validateRouteID(formats strfmt.Registry) error {

	if err := validate.Required("RouteID", "body", m.RouteID); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV3RouteFare) validateRouteName(formats strfmt.Registry) error {
	if swag.IsZero(m.RouteName) { // not required
		return nil
	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV3RouteFare) validateRouteUID(formats strfmt.Registry) error {

	if err := validate.Required("RouteUID", "body", m.RouteUID); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV3RouteFare) validateSectionFares(formats strfmt.Registry) error {
	if swag.IsZero(m.SectionFares) { // not required
		return nil
	}

	for i := 0; i < len(m.SectionFares); i++ {
		if swag.IsZero(m.SectionFares[i]) { // not required
			continue
		}

		if m.SectionFares[i] != nil {
			if err := m.SectionFares[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SectionFares" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("SectionFares" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV3RouteFare) validateStageFares(formats strfmt.Registry) error {
	if swag.IsZero(m.StageFares) { // not required
		return nil
	}

	for i := 0; i < len(m.StageFares); i++ {
		if swag.IsZero(m.StageFares[i]) { // not required
			continue
		}

		if m.StageFares[i] != nil {
			if err := m.StageFares[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("StageFares" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("StageFares" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV3RouteFare) validateSubRouteName(formats strfmt.Registry) error {
	if swag.IsZero(m.SubRouteName) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this p t x service d t o bus specification v3 route fare based on the context it is used
func (m *PTXServiceDTOBusSpecificationV3RouteFare) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateODFares(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRouteName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSectionFares(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStageFares(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubRouteName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTOBusSpecificationV3RouteFare) contextValidateODFares(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ODFares); i++ {

		if m.ODFares[i] != nil {
			if err := m.ODFares[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ODFares" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ODFares" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV3RouteFare) contextValidateRouteName(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *PTXServiceDTOBusSpecificationV3RouteFare) contextValidateSectionFares(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SectionFares); i++ {

		if m.SectionFares[i] != nil {
			if err := m.SectionFares[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SectionFares" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("SectionFares" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV3RouteFare) contextValidateStageFares(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StageFares); i++ {

		if m.StageFares[i] != nil {
			if err := m.StageFares[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("StageFares" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("StageFares" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV3RouteFare) contextValidateSubRouteName(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *PTXServiceDTOBusSpecificationV3RouteFare) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PTXServiceDTOBusSpecificationV3RouteFare) UnmarshalBinary(b []byte) error {
	var res PTXServiceDTOBusSpecificationV3RouteFare
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
