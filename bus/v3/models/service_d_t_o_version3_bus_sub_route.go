// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceDTOVersion3BusSubRoute SubRoute
//
// swagger:model Service.DTO.Version3.Bus.SubRoute
type ServiceDTOVersion3BusSubRoute struct {

	// NameType
	//
	// 路線起站名稱
	DepartureStopName *ServiceDTOVersion3BaseNameType `json:"DepartureStopName,omitempty"`

	// NameType
	//
	// 路線迄站名稱
	DestinationStopName *ServiceDTOVersion3BaseNameType `json:"DestinationStopName,omitempty"`

	// integer
	//
	// 車輛去返程 : [0:'去程',1:'返程',2:'迴圈',255:'未知']
	// Required: true
	Direction *int32 `json:"Direction"`

	// Stop
	//
	// 終點站牌
	EndStop *ServiceDTOVersion3BusSubRouteStop `json:"EndStop,omitempty"`

	// 車頭描述
	HeadSign string `json:"HeadSign,omitempty"`

	// 營運業者
	// Required: true
	Operators []*ServiceDTOVersion3BusSubRouteOperator `json:"Operators"`

	// 機關定義路線代碼
	// Required: true
	RouteID *string `json:"RouteID"`

	// NameType
	//
	// 路線名稱
	// Required: true
	RouteName *ServiceDTOVersion3BaseNameType `json:"RouteName"`

	// 路線唯一識別代碼，規則為 {業管機關簡碼} + {RouteID}，其中 {業管機關簡碼} 可於Authority API中的AuthorityCode欄位查詢
	// Required: true
	RouteUID *string `json:"RouteUID"`

	// Stop
	//
	// 起始站牌
	StartStop *ServiceDTOVersion3BusSubRouteStop `json:"StartStop,omitempty"`

	// 地區既用中之附屬路線代碼(為原資料內碼)
	// Required: true
	SubRouteID *string `json:"SubRouteID"`

	// NameType
	//
	// 附屬路線長名稱
	SubRouteLongName *ServiceDTOVersion3BaseNameType `json:"SubRouteLongName,omitempty"`

	// NameType
	//
	// 附屬路線名稱
	// Required: true
	SubRouteName *ServiceDTOVersion3BaseNameType `json:"SubRouteName"`

	// 附屬路線唯一識別代碼，規則為 {業管機關簡碼} + {SubRouteID}，其中 {業管機關簡碼} 可於Authority API中的AuthorityCode欄位查詢
	// Required: true
	SubRouteUID *string `json:"SubRouteUID"`
}

// Validate validates this service d t o version3 bus sub route
func (m *ServiceDTOVersion3BusSubRoute) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDepartureStopName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestinationStopName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndStop(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperators(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouteID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouteName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouteUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartStop(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubRouteID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubRouteLongName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubRouteName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubRouteUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceDTOVersion3BusSubRoute) validateDepartureStopName(formats strfmt.Registry) error {

	if swag.IsZero(m.DepartureStopName) { // not required
		return nil
	}

	if m.DepartureStopName != nil {
		if err := m.DepartureStopName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DepartureStopName")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion3BusSubRoute) validateDestinationStopName(formats strfmt.Registry) error {

	if swag.IsZero(m.DestinationStopName) { // not required
		return nil
	}

	if m.DestinationStopName != nil {
		if err := m.DestinationStopName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DestinationStopName")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion3BusSubRoute) validateDirection(formats strfmt.Registry) error {

	if err := validate.Required("Direction", "body", m.Direction); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3BusSubRoute) validateEndStop(formats strfmt.Registry) error {

	if swag.IsZero(m.EndStop) { // not required
		return nil
	}

	if m.EndStop != nil {
		if err := m.EndStop.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EndStop")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion3BusSubRoute) validateOperators(formats strfmt.Registry) error {

	if err := validate.Required("Operators", "body", m.Operators); err != nil {
		return err
	}

	for i := 0; i < len(m.Operators); i++ {
		if swag.IsZero(m.Operators[i]) { // not required
			continue
		}

		if m.Operators[i] != nil {
			if err := m.Operators[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Operators" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceDTOVersion3BusSubRoute) validateRouteID(formats strfmt.Registry) error {

	if err := validate.Required("RouteID", "body", m.RouteID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3BusSubRoute) validateRouteName(formats strfmt.Registry) error {

	if err := validate.Required("RouteName", "body", m.RouteName); err != nil {
		return err
	}

	if m.RouteName != nil {
		if err := m.RouteName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RouteName")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion3BusSubRoute) validateRouteUID(formats strfmt.Registry) error {

	if err := validate.Required("RouteUID", "body", m.RouteUID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3BusSubRoute) validateStartStop(formats strfmt.Registry) error {

	if swag.IsZero(m.StartStop) { // not required
		return nil
	}

	if m.StartStop != nil {
		if err := m.StartStop.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("StartStop")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion3BusSubRoute) validateSubRouteID(formats strfmt.Registry) error {

	if err := validate.Required("SubRouteID", "body", m.SubRouteID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3BusSubRoute) validateSubRouteLongName(formats strfmt.Registry) error {

	if swag.IsZero(m.SubRouteLongName) { // not required
		return nil
	}

	if m.SubRouteLongName != nil {
		if err := m.SubRouteLongName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SubRouteLongName")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion3BusSubRoute) validateSubRouteName(formats strfmt.Registry) error {

	if err := validate.Required("SubRouteName", "body", m.SubRouteName); err != nil {
		return err
	}

	if m.SubRouteName != nil {
		if err := m.SubRouteName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SubRouteName")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion3BusSubRoute) validateSubRouteUID(formats strfmt.Registry) error {

	if err := validate.Required("SubRouteUID", "body", m.SubRouteUID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceDTOVersion3BusSubRoute) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceDTOVersion3BusSubRoute) UnmarshalBinary(b []byte) error {
	var res ServiceDTOVersion3BusSubRoute
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
