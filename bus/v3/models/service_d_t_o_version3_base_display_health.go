// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceDTOVersion3BaseDisplayHealth DisplayHealth
//
// API服務健康狀態
//
// swagger:model Service.DTO.Version3.Base.DisplayHealth
type ServiceDTOVersion3BaseDisplayHealth struct {

	// Inbound
	//
	// 本平台資料來源轉入狀態
	Inbound *ServiceDTOVersion3BaseInbound `json:"Inbound,omitempty"`

	// Outbound
	//
	// 本平台API狀態
	Outbound *ServiceDTOVersion3BaseOutbound `json:"Outbound,omitempty"`

	// API服務代碼
	// Required: true
	ServiceID *string `json:"ServiceID"`

	// API服務中文名稱
	// Required: true
	ServiceName *string `json:"ServiceName"`
}

// Validate validates this service d t o version3 base display health
func (m *ServiceDTOVersion3BaseDisplayHealth) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInbound(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutbound(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceDTOVersion3BaseDisplayHealth) validateInbound(formats strfmt.Registry) error {

	if swag.IsZero(m.Inbound) { // not required
		return nil
	}

	if m.Inbound != nil {
		if err := m.Inbound.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Inbound")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion3BaseDisplayHealth) validateOutbound(formats strfmt.Registry) error {

	if swag.IsZero(m.Outbound) { // not required
		return nil
	}

	if m.Outbound != nil {
		if err := m.Outbound.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Outbound")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion3BaseDisplayHealth) validateServiceID(formats strfmt.Registry) error {

	if err := validate.Required("ServiceID", "body", m.ServiceID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3BaseDisplayHealth) validateServiceName(formats strfmt.Registry) error {

	if err := validate.Required("ServiceName", "body", m.ServiceName); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceDTOVersion3BaseDisplayHealth) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceDTOVersion3BaseDisplayHealth) UnmarshalBinary(b []byte) error {
	var res ServiceDTOVersion3BaseDisplayHealth
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
