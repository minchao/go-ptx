// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceDTOVersion3BusScheduleSpecialDay SpecialDay
//
// swagger:model Service.DTO.Version3.Bus.Schedule.SpecialDay
type ServiceDTOVersion3BusScheduleSpecialDay struct {

	// DatePeriod
	//
	// 連續特殊日期
	// Required: true
	DatePeriod *ServiceDTOVersion3BusScheduleDatePeriod `json:"DatePeriod"`

	// Dates
	//
	// 不連續特殊日期
	// Required: true
	Dates *ServiceDTOVersion3BusScheduleDates `json:"Dates"`

	// 特殊營運描述
	// Required: true
	Description *string `json:"Description"`

	// 營運服務狀態代碼0=停止營運, 1=正常營運 , 2=加班營運
	// Required: true
	ServiceStatus *int32 `json:"ServiceStatus"`
}

// Validate validates this service d t o version3 bus schedule special day
func (m *ServiceDTOVersion3BusScheduleSpecialDay) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDatePeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceDTOVersion3BusScheduleSpecialDay) validateDatePeriod(formats strfmt.Registry) error {

	if err := validate.Required("DatePeriod", "body", m.DatePeriod); err != nil {
		return err
	}

	if m.DatePeriod != nil {
		if err := m.DatePeriod.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DatePeriod")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion3BusScheduleSpecialDay) validateDates(formats strfmt.Registry) error {

	if err := validate.Required("Dates", "body", m.Dates); err != nil {
		return err
	}

	if m.Dates != nil {
		if err := m.Dates.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Dates")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion3BusScheduleSpecialDay) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("Description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3BusScheduleSpecialDay) validateServiceStatus(formats strfmt.Registry) error {

	if err := validate.Required("ServiceStatus", "body", m.ServiceStatus); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceDTOVersion3BusScheduleSpecialDay) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceDTOVersion3BusScheduleSpecialDay) UnmarshalBinary(b []byte) error {
	var res ServiceDTOVersion3BusScheduleSpecialDay
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
