// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PTXServiceDTOBusSpecificationV3Scope Scope
//
// 通阻影響範圍
//
// swagger:model PTX.Service.DTO.Bus.Specification.V3.Scope
type PTXServiceDTOBusSpecificationV3Scope struct {

	// Array
	//
	// 路線資料
	Routes []*PTXServiceDTOBusSpecificationV3ScopeRoute `json:"Routes"`

	// Array
	//
	// 站牌資料
	Stops []*PTXServiceDTOBusSpecificationV3ScopeStop `json:"Stops"`

	// Array
	//
	// 附屬路線資料
	SubRoutes []*PTXServiceDTOBusSpecificationV3ScopeSubRoute `json:"SubRoutes"`

	// Array
	//
	// 班次代碼資料
	TripIDs []*PTXServiceDTOBusSpecificationV3ScopeTrip `json:"TripIDs"`
}

// Validate validates this p t x service d t o bus specification v3 scope
func (m *PTXServiceDTOBusSpecificationV3Scope) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRoutes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStops(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubRoutes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTripIDs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTOBusSpecificationV3Scope) validateRoutes(formats strfmt.Registry) error {
	if swag.IsZero(m.Routes) { // not required
		return nil
	}

	for i := 0; i < len(m.Routes); i++ {
		if swag.IsZero(m.Routes[i]) { // not required
			continue
		}

		if m.Routes[i] != nil {
			if err := m.Routes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Routes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV3Scope) validateStops(formats strfmt.Registry) error {
	if swag.IsZero(m.Stops) { // not required
		return nil
	}

	for i := 0; i < len(m.Stops); i++ {
		if swag.IsZero(m.Stops[i]) { // not required
			continue
		}

		if m.Stops[i] != nil {
			if err := m.Stops[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Stops" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV3Scope) validateSubRoutes(formats strfmt.Registry) error {
	if swag.IsZero(m.SubRoutes) { // not required
		return nil
	}

	for i := 0; i < len(m.SubRoutes); i++ {
		if swag.IsZero(m.SubRoutes[i]) { // not required
			continue
		}

		if m.SubRoutes[i] != nil {
			if err := m.SubRoutes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SubRoutes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV3Scope) validateTripIDs(formats strfmt.Registry) error {
	if swag.IsZero(m.TripIDs) { // not required
		return nil
	}

	for i := 0; i < len(m.TripIDs); i++ {
		if swag.IsZero(m.TripIDs[i]) { // not required
			continue
		}

		if m.TripIDs[i] != nil {
			if err := m.TripIDs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("TripIDs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this p t x service d t o bus specification v3 scope based on the context it is used
func (m *PTXServiceDTOBusSpecificationV3Scope) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRoutes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStops(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubRoutes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTripIDs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTOBusSpecificationV3Scope) contextValidateRoutes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Routes); i++ {

		if m.Routes[i] != nil {
			if err := m.Routes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Routes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV3Scope) contextValidateStops(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Stops); i++ {

		if m.Stops[i] != nil {
			if err := m.Stops[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Stops" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV3Scope) contextValidateSubRoutes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SubRoutes); i++ {

		if m.SubRoutes[i] != nil {
			if err := m.SubRoutes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SubRoutes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV3Scope) contextValidateTripIDs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TripIDs); i++ {

		if m.TripIDs[i] != nil {
			if err := m.TripIDs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("TripIDs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PTXServiceDTOBusSpecificationV3Scope) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PTXServiceDTOBusSpecificationV3Scope) UnmarshalBinary(b []byte) error {
	var res PTXServiceDTOBusSpecificationV3Scope
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
