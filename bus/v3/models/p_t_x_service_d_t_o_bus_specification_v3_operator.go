// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PTXServiceDTOBusSpecificationV3Operator Operator
//
// swagger:model PTX.Service.DTO.Bus.Specification.V3.Operator
type PTXServiceDTOBusSpecificationV3Operator struct {

	// String
	//
	// 營運業者票價查詢網站連結
	FareURL string `json:"FareURL,omitempty" xml:"FareURL,omitempty"`

	// String
	//
	// 營運業者簡碼
	// Required: true
	OperatorCode *string `json:"OperatorCode" xml:"OperatorCode"`

	// String
	//
	// 營運業者電子信箱
	// Required: true
	OperatorEmail *string `json:"OperatorEmail" xml:"OperatorEmail"`

	// String
	//
	// 營運業者代碼
	// Required: true
	OperatorID *string `json:"OperatorID" xml:"OperatorID"`

	// String
	//
	// 營運業者Logo網址
	OperatorLogoURL string `json:"OperatorLogoURL,omitempty" xml:"OperatorLogoURL,omitempty"`

	// NameType
	//
	// 營運業者名稱
	// Required: true
	OperatorName struct {
		PTXServiceDTOSharedSpecificationV3BaseNameType
	} `json:"OperatorName" xml:"NameType"`

	// String
	//
	// 營運業者編號[交通部票證資料系統定義]
	OperatorNo string `json:"OperatorNo,omitempty" xml:"OperatorNo,omitempty"`

	// String
	//
	// 營運業者連絡電話
	// Required: true
	OperatorPhone *string `json:"OperatorPhone" xml:"OperatorPhone"`

	// String
	//
	// 營運業者網址鏈結
	// Required: true
	OperatorURL *string `json:"OperatorUrl" xml:"OperatorUrl"`

	// String
	//
	// 訂票連絡電話
	ReservationPhone string `json:"ReservationPhone,omitempty" xml:"ReservationPhone,omitempty"`

	// String
	//
	// 訂票網址鏈結
	ReservationURL string `json:"ReservationUrl,omitempty" xml:"ReservationUrl,omitempty"`

	// String
	//
	// 營運業者所屬業管子機關簡碼
	SubAuthorityCode string `json:"SubAuthorityCode,omitempty" xml:"SubAuthorityCode,omitempty"`
}

// Validate validates this p t x service d t o bus specification v3 operator
func (m *PTXServiceDTOBusSpecificationV3Operator) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOperatorCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperatorEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperatorID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperatorName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperatorPhone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperatorURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTOBusSpecificationV3Operator) validateOperatorCode(formats strfmt.Registry) error {

	if err := validate.Required("OperatorCode", "body", m.OperatorCode); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV3Operator) validateOperatorEmail(formats strfmt.Registry) error {

	if err := validate.Required("OperatorEmail", "body", m.OperatorEmail); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV3Operator) validateOperatorID(formats strfmt.Registry) error {

	if err := validate.Required("OperatorID", "body", m.OperatorID); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV3Operator) validateOperatorName(formats strfmt.Registry) error {

	return nil
}

func (m *PTXServiceDTOBusSpecificationV3Operator) validateOperatorPhone(formats strfmt.Registry) error {

	if err := validate.Required("OperatorPhone", "body", m.OperatorPhone); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV3Operator) validateOperatorURL(formats strfmt.Registry) error {

	if err := validate.Required("OperatorUrl", "body", m.OperatorURL); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this p t x service d t o bus specification v3 operator based on the context it is used
func (m *PTXServiceDTOBusSpecificationV3Operator) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOperatorName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTOBusSpecificationV3Operator) contextValidateOperatorName(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *PTXServiceDTOBusSpecificationV3Operator) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PTXServiceDTOBusSpecificationV3Operator) UnmarshalBinary(b []byte) error {
	var res PTXServiceDTOBusSpecificationV3Operator
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
