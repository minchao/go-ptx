// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PTXServiceDTOBusSpecificationV3Network Network
//
// swagger:model PTX.Service.DTO.Bus.Specification.V3.Network
type PTXServiceDTOBusSpecificationV3Network struct {

	// Array
	//
	// 適地性路網圖資網址URL
	LBSMapURLs []*PTXServiceDTOBusSpecificationV3NetworkLBSMapURL `json:"LBSMapURLs"`

	// String
	//
	// 公車路網代碼
	// Required: true
	NetworkID *string `json:"NetworkID"`

	// NetworkMapURL
	//
	// 路網圖網址URL
	// Required: true
	NetworkMapURL struct {
		PTXServiceDTOBusSpecificationV3NetworkMapURL
	} `json:"NetworkMapURL"`

	// NameType
	//
	// 路網名稱
	// Required: true
	NetworkName struct {
		PTXServiceDTOSharedSpecificationV3BaseNameType
	} `json:"NetworkName"`
}

// Validate validates this p t x service d t o bus specification v3 network
func (m *PTXServiceDTOBusSpecificationV3Network) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLBSMapURLs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkMapURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTOBusSpecificationV3Network) validateLBSMapURLs(formats strfmt.Registry) error {

	if swag.IsZero(m.LBSMapURLs) { // not required
		return nil
	}

	for i := 0; i < len(m.LBSMapURLs); i++ {
		if swag.IsZero(m.LBSMapURLs[i]) { // not required
			continue
		}

		if m.LBSMapURLs[i] != nil {
			if err := m.LBSMapURLs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("LBSMapURLs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV3Network) validateNetworkID(formats strfmt.Registry) error {

	if err := validate.Required("NetworkID", "body", m.NetworkID); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV3Network) validateNetworkMapURL(formats strfmt.Registry) error {

	return nil
}

func (m *PTXServiceDTOBusSpecificationV3Network) validateNetworkName(formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *PTXServiceDTOBusSpecificationV3Network) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PTXServiceDTOBusSpecificationV3Network) UnmarshalBinary(b []byte) error {
	var res PTXServiceDTOBusSpecificationV3Network
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
