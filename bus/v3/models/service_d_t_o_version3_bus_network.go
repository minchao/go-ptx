// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceDTOVersion3BusNetwork Network
//
// swagger:model Service.DTO.Version3.Bus.Network
type ServiceDTOVersion3BusNetwork struct {

	// 適地性路網圖資網址URL
	LBSMapURLs []*ServiceDTOVersion3BusNetworkLBSMapURL `json:"LBSMapURLs"`

	// 公車路網代碼
	// Required: true
	NetworkID *string `json:"NetworkID"`

	// NetworkMapURL
	//
	// 路網圖網址URL
	// Required: true
	NetworkMapURL *ServiceDTOVersion3BusNetworkMapURL `json:"NetworkMapURL"`

	// NameType
	//
	// 路網名稱
	// Required: true
	NetworkName *ServiceDTOVersion3BaseNameType `json:"NetworkName"`
}

// Validate validates this service d t o version3 bus network
func (m *ServiceDTOVersion3BusNetwork) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLBSMapURLs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkMapURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceDTOVersion3BusNetwork) validateLBSMapURLs(formats strfmt.Registry) error {

	if swag.IsZero(m.LBSMapURLs) { // not required
		return nil
	}

	for i := 0; i < len(m.LBSMapURLs); i++ {
		if swag.IsZero(m.LBSMapURLs[i]) { // not required
			continue
		}

		if m.LBSMapURLs[i] != nil {
			if err := m.LBSMapURLs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("LBSMapURLs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceDTOVersion3BusNetwork) validateNetworkID(formats strfmt.Registry) error {

	if err := validate.Required("NetworkID", "body", m.NetworkID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3BusNetwork) validateNetworkMapURL(formats strfmt.Registry) error {

	if err := validate.Required("NetworkMapURL", "body", m.NetworkMapURL); err != nil {
		return err
	}

	if m.NetworkMapURL != nil {
		if err := m.NetworkMapURL.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("NetworkMapURL")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion3BusNetwork) validateNetworkName(formats strfmt.Registry) error {

	if err := validate.Required("NetworkName", "body", m.NetworkName); err != nil {
		return err
	}

	if m.NetworkName != nil {
		if err := m.NetworkName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("NetworkName")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceDTOVersion3BusNetwork) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceDTOVersion3BusNetwork) UnmarshalBinary(b []byte) error {
	var res ServiceDTOVersion3BusNetwork
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
