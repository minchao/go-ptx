// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PTXServiceDTOBusSpecificationV3Alert Alert
//
// swagger:model PTX.Service.DTO.Bus.Specification.V3.Alert
type PTXServiceDTOBusSpecificationV3Alert struct {

	// String
	//
	// 通阻事件原單位發布代碼
	// Required: true
	AlertID *string `json:"AlertID" xml:"AlertID"`

	// String
	//
	// 詳細描述網站連結
	AlertURL string `json:"AlertURL,omitempty" xml:"AlertURL,omitempty"`

	// String
	//
	// 事件描述
	Description string `json:"Description,omitempty" xml:"Description,omitempty"`

	// String
	//
	// 影響方向
	Direction string `json:"Direction,omitempty" xml:"Direction,omitempty"`

	// 結束日期時間
	// Format: date-time
	EndTime strfmt.DateTime `json:"EndTime,omitempty"`

	// DateTime
	//
	// 消息公告日期時間
	// Format: date-time
	PublishTime strfmt.DateTime `json:"PublishTime,omitempty"`

	// Scope
	//
	// 通阻影響範圍
	// Required: true
	Scope struct {
		PTXServiceDTOBusSpecificationV3Scope
	} `json:"Scope" xml:"Scope"`

	// DateTime
	//
	// [來源端平臺]此筆資料最後更新時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)
	// Format: date-time
	SrcUpdateTime strfmt.DateTime `json:"SrcUpdateTime,omitempty"`

	// 開始日期時間
	// Format: date-time
	StartTime strfmt.DateTime `json:"StartTime,omitempty"`

	// String
	//
	// 通阻標題
	Title string `json:"Title,omitempty" xml:"Title,omitempty"`
}

// Validate validates this p t x service d t o bus specification v3 alert
func (m *PTXServiceDTOBusSpecificationV3Alert) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlertID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublishTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSrcUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTOBusSpecificationV3Alert) validateAlertID(formats strfmt.Registry) error {

	if err := validate.Required("AlertID", "body", m.AlertID); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV3Alert) validateEndTime(formats strfmt.Registry) error {
	if swag.IsZero(m.EndTime) { // not required
		return nil
	}

	if err := validate.FormatOf("EndTime", "body", "date-time", m.EndTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV3Alert) validatePublishTime(formats strfmt.Registry) error {
	if swag.IsZero(m.PublishTime) { // not required
		return nil
	}

	if err := validate.FormatOf("PublishTime", "body", "date-time", m.PublishTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV3Alert) validateScope(formats strfmt.Registry) error {

	return nil
}

func (m *PTXServiceDTOBusSpecificationV3Alert) validateSrcUpdateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.SrcUpdateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("SrcUpdateTime", "body", "date-time", m.SrcUpdateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV3Alert) validateStartTime(formats strfmt.Registry) error {
	if swag.IsZero(m.StartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("StartTime", "body", "date-time", m.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this p t x service d t o bus specification v3 alert based on the context it is used
func (m *PTXServiceDTOBusSpecificationV3Alert) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateScope(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTOBusSpecificationV3Alert) contextValidateScope(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *PTXServiceDTOBusSpecificationV3Alert) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PTXServiceDTOBusSpecificationV3Alert) UnmarshalBinary(b []byte) error {
	var res PTXServiceDTOBusSpecificationV3Alert
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
