// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceDTOVersion2BusBusN1EstimateTime BusN1EstimateTime
// swagger:model Service.DTO.Version2.Bus.BusN1EstimateTime
type ServiceDTOVersion2BusBusN1EstimateTime struct {

	// 車輛目前所在站牌代碼
	CurrentStop string `json:"CurrentStop,omitempty"`

	// DateTime
	//
	// 系統演算該筆預估到站資料的時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)[目前僅公總提供此欄位資訊]
	DataTime string `json:"DataTime,omitempty"`

	// 車輛目的站牌代碼
	DestinationStop string `json:"DestinationStop,omitempty"`

	// 去返程(該方向指的是此車牌車輛目前所在路線的去返程方向，非指站站牌所在路線的去返程方向，使用時請加值業者多加注意)
	// Required: true
	// Enum: [0 1 2 255]
	Direction *int64 `json:"Direction"`

	// 到站時間預估(秒) [當StopStatus値為1~4或PlateNumb値為-1時，EstimateTime値為空値; 反之，EstimateTime有値]
	EstimateTime int32 `json:"EstimateTime,omitempty"`

	// 是否為末班車
	IsLastBus bool `json:"IsLastBus,omitempty"`

	// 資料型態種類
	// Enum: [0 1 2]
	MessageType int64 `json:"MessageType,omitempty"`

	// DateTime
	//
	// 下一班公車到達時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)
	NextBusTime string `json:"NextBusTime,omitempty"`

	// 車牌號碼 [値為値為-1時，表示目前該站位無車輛行駛]
	PlateNumb string `json:"PlateNumb,omitempty"`

	// 地區既用中之路線代碼(為原資料內碼)
	RouteID string `json:"RouteID,omitempty"`

	// NameType
	//
	// 路線名稱
	RouteName *ServiceDTOVersion2BaseNameType `json:"RouteName,omitempty"`

	// 路線唯一識別代碼，規則為 {業管機關代碼} + {RouteID}，其中 {業管機關代碼} 可於Authority API中的AuthorityCode欄位查詢
	RouteUID string `json:"RouteUID,omitempty"`

	// DateTime
	//
	// 來源端平台接收時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz))[該欄位在N1資料中無意義]
	SrcRecTime string `json:"SrcRecTime,omitempty"`

	// DateTime
	//
	// 來源端平台資料傳出時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)[公總使用TCP動態即時推播故有提供此欄位, 而非公總系統因使用整包資料更新, 故沒有提供此欄位]
	SrcTransTime string `json:"SrcTransTime,omitempty"`

	// DateTime
	//
	// 來源端平台資料更新時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)[公總使用TCP動態即時推播故沒有提供此欄位, 而非公總系統因提供整包資料更新, 故有提供此欄]
	SrcUpdateTime string `json:"SrcUpdateTime,omitempty"`

	// 車輛距離本站站數
	StopCountDown int32 `json:"StopCountDown,omitempty"`

	// 地區既用中之站牌代碼(為原資料內碼)
	StopID string `json:"StopID,omitempty"`

	// NameType
	//
	// 站牌名
	StopName *ServiceDTOVersion2BaseNameType `json:"StopName,omitempty"`

	// 路線經過站牌之順序
	StopSequence int32 `json:"StopSequence,omitempty"`

	// 車輛狀態備註
	// Enum: [0 1 2 3 4]
	StopStatus int64 `json:"StopStatus,omitempty"`

	// 站牌唯一識別代碼，規則為 {業管機關簡碼} + {StopID}，其中 {業管機關簡碼} 可於Authority API中的AuthorityCode欄位查詢
	StopUID string `json:"StopUID,omitempty"`

	// 地區既用中之子路線代碼(為原資料內碼)
	SubRouteID string `json:"SubRouteID,omitempty"`

	// NameType
	//
	// 子路線名稱
	SubRouteName *ServiceDTOVersion2BaseNameType `json:"SubRouteName,omitempty"`

	// 子路線唯一識別代碼，規則為 {業管機關簡碼} + {SubRouteID}，其中 {業管機關簡碼} 可於Authority API中的AuthorityCode欄位查詢
	SubRouteUID string `json:"SubRouteUID,omitempty"`

	// DateTime
	//
	// 車機資料傳輸時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz))[該欄位在N1資料中無意義]
	TransTime string `json:"TransTime,omitempty"`

	// DateTime
	//
	// 本平台資料更新時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)
	// Required: true
	UpdateTime *string `json:"UpdateTime"`
}

// Validate validates this service d t o version2 bus bus n1 estimate time
func (m *ServiceDTOVersion2BusBusN1EstimateTime) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessageType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouteName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStopName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStopStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubRouteName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var serviceDTOVersion2BusBusN1EstimateTimeTypeDirectionPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[0,1,2,255]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceDTOVersion2BusBusN1EstimateTimeTypeDirectionPropEnum = append(serviceDTOVersion2BusBusN1EstimateTimeTypeDirectionPropEnum, v)
	}
}

// prop value enum
func (m *ServiceDTOVersion2BusBusN1EstimateTime) validateDirectionEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, serviceDTOVersion2BusBusN1EstimateTimeTypeDirectionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceDTOVersion2BusBusN1EstimateTime) validateDirection(formats strfmt.Registry) error {

	if err := validate.Required("Direction", "body", m.Direction); err != nil {
		return err
	}

	// value enum
	if err := m.validateDirectionEnum("Direction", "body", *m.Direction); err != nil {
		return err
	}

	return nil
}

var serviceDTOVersion2BusBusN1EstimateTimeTypeMessageTypePropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[0,1,2]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceDTOVersion2BusBusN1EstimateTimeTypeMessageTypePropEnum = append(serviceDTOVersion2BusBusN1EstimateTimeTypeMessageTypePropEnum, v)
	}
}

// prop value enum
func (m *ServiceDTOVersion2BusBusN1EstimateTime) validateMessageTypeEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, serviceDTOVersion2BusBusN1EstimateTimeTypeMessageTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceDTOVersion2BusBusN1EstimateTime) validateMessageType(formats strfmt.Registry) error {

	if swag.IsZero(m.MessageType) { // not required
		return nil
	}

	// value enum
	if err := m.validateMessageTypeEnum("MessageType", "body", m.MessageType); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2BusBusN1EstimateTime) validateRouteName(formats strfmt.Registry) error {

	if swag.IsZero(m.RouteName) { // not required
		return nil
	}

	if m.RouteName != nil {
		if err := m.RouteName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RouteName")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion2BusBusN1EstimateTime) validateStopName(formats strfmt.Registry) error {

	if swag.IsZero(m.StopName) { // not required
		return nil
	}

	if m.StopName != nil {
		if err := m.StopName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("StopName")
			}
			return err
		}
	}

	return nil
}

var serviceDTOVersion2BusBusN1EstimateTimeTypeStopStatusPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[0,1,2,3,4]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceDTOVersion2BusBusN1EstimateTimeTypeStopStatusPropEnum = append(serviceDTOVersion2BusBusN1EstimateTimeTypeStopStatusPropEnum, v)
	}
}

// prop value enum
func (m *ServiceDTOVersion2BusBusN1EstimateTime) validateStopStatusEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, serviceDTOVersion2BusBusN1EstimateTimeTypeStopStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceDTOVersion2BusBusN1EstimateTime) validateStopStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.StopStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateStopStatusEnum("StopStatus", "body", m.StopStatus); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2BusBusN1EstimateTime) validateSubRouteName(formats strfmt.Registry) error {

	if swag.IsZero(m.SubRouteName) { // not required
		return nil
	}

	if m.SubRouteName != nil {
		if err := m.SubRouteName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SubRouteName")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion2BusBusN1EstimateTime) validateUpdateTime(formats strfmt.Registry) error {

	if err := validate.Required("UpdateTime", "body", m.UpdateTime); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceDTOVersion2BusBusN1EstimateTime) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceDTOVersion2BusBusN1EstimateTime) UnmarshalBinary(b []byte) error {
	var res ServiceDTOVersion2BusBusN1EstimateTime
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
