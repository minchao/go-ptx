// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PTXServiceDTOBusSpecificationV2BusN1EstimateTime BusN1EstimateTime
//
// swagger:model PTX.Service.DTO.Bus.Specification.V2.BusN1EstimateTime
type PTXServiceDTOBusSpecificationV2BusN1EstimateTime struct {

	// String
	//
	// 車輛目前所在站牌代碼
	CurrentStop string `json:"CurrentStop,omitempty" xml:"String,omitempty"`

	// 系統演算該筆預估到站資料的時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)[目前僅公總提供此欄位資訊]
	// Format: date-time
	DataTime strfmt.DateTime `json:"DataTime,omitempty"`

	// String
	//
	// 車輛目的站牌代碼
	DestinationStop string `json:"DestinationStop,omitempty" xml:"String,omitempty"`

	// Int32
	//
	// 去返程(該方向指的是此車牌車輛目前所在路線的去返程方向，非指站站牌所在路線的去返程方向，使用時請加值業者多加注意) : [0:'去程',1:'返程',2:'迴圈',255:'未知']
	// Required: true
	Direction *int64 `json:"Direction"`

	// 到站時間預估(秒) [當StopStatus値為2~4或PlateNumb値為-1時，EstimateTime値為null; 當StopStatus値為1時， EstimateTime値多數為null，僅部分路線因有固定發車時間，故EstimateTime有値; 當StopStatus値為0時，EstimateTime有値。]
	EstimateTime int32 `json:"EstimateTime,omitempty"`

	// Array
	//
	// 到站時間預估
	// <span class="emphasis fas fa-pen" rel="目前僅桃園市、臺中市、高雄市提供"></span>
	Estimates []*PTXServiceDTOBusSpecificationV2N1Estimate "json:\"Estimates\" xml:\"List`1\""

	// 是否為末班車
	IsLastBus bool `json:"IsLastBus,omitempty"`

	// Int32
	//
	// 資料型態種類 : [0:'未知',1:'定期',2:'非定期']
	MessageType int64 `json:"MessageType,omitempty"`

	// 下一班公車到達時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)
	// Format: date-time
	NextBusTime strfmt.DateTime `json:"NextBusTime,omitempty"`

	// String
	//
	// 車牌號碼 [値為値為-1時，表示目前該站位無車輛行駛]
	PlateNumb string `json:"PlateNumb,omitempty" xml:"String,omitempty"`

	// String
	//
	// 地區既用中之路線代碼(為原資料內碼)
	RouteID string `json:"RouteID,omitempty" xml:"String,omitempty"`

	// NameType
	//
	// 路線名稱
	RouteName struct {
		PTXServiceDTOSharedSpecificationV2BaseNameType
	} `json:"RouteName,omitempty" xml:"NameType,omitempty"`

	// String
	//
	// 路線唯一識別代碼，規則為 {業管機關代碼} + {RouteID}，其中 {業管機關代碼} 可於Authority API中的AuthorityCode欄位查詢
	RouteUID string `json:"RouteUID,omitempty" xml:"String,omitempty"`

	// 來源端平台接收時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz))[該欄位在N1資料中無意義]
	// Format: date-time
	SrcRecTime strfmt.DateTime `json:"SrcRecTime,omitempty"`

	// 來源端平台資料傳出時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)[公總使用動態即時推播故有提供此欄位, 而非公總系統因使用整包資料更新, 故沒有提供此欄位]
	// Format: date-time
	SrcTransTime strfmt.DateTime `json:"SrcTransTime,omitempty"`

	// 來源端平台資料更新時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)[公總使用動態即時推播故沒有提供此欄位, 而非公總系統因提供整包資料更新, 故有提供此欄]
	// Format: date-time
	SrcUpdateTime strfmt.DateTime `json:"SrcUpdateTime,omitempty"`

	// 車輛距離本站站數
	StopCountDown int32 `json:"StopCountDown,omitempty"`

	// String
	//
	// 地區既用中之站牌代碼(為原資料內碼)
	StopID string `json:"StopID,omitempty" xml:"String,omitempty"`

	// NameType
	//
	// 站牌名
	StopName struct {
		PTXServiceDTOSharedSpecificationV2BaseNameType
	} `json:"StopName,omitempty" xml:"NameType,omitempty"`

	// 路線經過站牌之順序
	StopSequence int32 `json:"StopSequence,omitempty"`

	// Int32
	//
	// 車輛狀態備註 : [0:'正常',1:'尚未發車',2:'交管不停靠',3:'末班車已過',4:'今日未營運']
	StopStatus int64 `json:"StopStatus,omitempty"`

	// String
	//
	// 站牌唯一識別代碼，規則為 {業管機關簡碼} + {StopID}，其中 {業管機關簡碼} 可於Authority API中的AuthorityCode欄位查詢
	StopUID string `json:"StopUID,omitempty" xml:"String,omitempty"`

	// String
	//
	// 地區既用中之子路線代碼(為原資料內碼)
	SubRouteID string `json:"SubRouteID,omitempty" xml:"String,omitempty"`

	// NameType
	//
	// 子路線名稱
	SubRouteName struct {
		PTXServiceDTOSharedSpecificationV2BaseNameType
	} `json:"SubRouteName,omitempty" xml:"NameType,omitempty"`

	// String
	//
	// 子路線唯一識別代碼，規則為 {業管機關簡碼} + {SubRouteID}，其中 {業管機關簡碼} 可於Authority API中的AuthorityCode欄位查詢
	SubRouteUID string `json:"SubRouteUID,omitempty" xml:"String,omitempty"`

	// 車機資料傳輸時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz))[該欄位在N1資料中無意義]
	// Format: date-time
	TransTime strfmt.DateTime `json:"TransTime,omitempty"`

	// DateTime
	//
	// 本平台資料更新時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)
	// Required: true
	// Format: date-time
	UpdateTime *strfmt.DateTime `json:"UpdateTime"`
}

// Validate validates this p t x service d t o bus specification v2 bus n1 estimate time
func (m *PTXServiceDTOBusSpecificationV2BusN1EstimateTime) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDataTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEstimates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNextBusTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouteName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSrcRecTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSrcTransTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSrcUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStopName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubRouteName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTOBusSpecificationV2BusN1EstimateTime) validateDataTime(formats strfmt.Registry) error {
	if swag.IsZero(m.DataTime) { // not required
		return nil
	}

	if err := validate.FormatOf("DataTime", "body", "date-time", m.DataTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV2BusN1EstimateTime) validateDirection(formats strfmt.Registry) error {

	if err := validate.Required("Direction", "body", m.Direction); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV2BusN1EstimateTime) validateEstimates(formats strfmt.Registry) error {
	if swag.IsZero(m.Estimates) { // not required
		return nil
	}

	for i := 0; i < len(m.Estimates); i++ {
		if swag.IsZero(m.Estimates[i]) { // not required
			continue
		}

		if m.Estimates[i] != nil {
			if err := m.Estimates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Estimates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Estimates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV2BusN1EstimateTime) validateNextBusTime(formats strfmt.Registry) error {
	if swag.IsZero(m.NextBusTime) { // not required
		return nil
	}

	if err := validate.FormatOf("NextBusTime", "body", "date-time", m.NextBusTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV2BusN1EstimateTime) validateRouteName(formats strfmt.Registry) error {
	if swag.IsZero(m.RouteName) { // not required
		return nil
	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV2BusN1EstimateTime) validateSrcRecTime(formats strfmt.Registry) error {
	if swag.IsZero(m.SrcRecTime) { // not required
		return nil
	}

	if err := validate.FormatOf("SrcRecTime", "body", "date-time", m.SrcRecTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV2BusN1EstimateTime) validateSrcTransTime(formats strfmt.Registry) error {
	if swag.IsZero(m.SrcTransTime) { // not required
		return nil
	}

	if err := validate.FormatOf("SrcTransTime", "body", "date-time", m.SrcTransTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV2BusN1EstimateTime) validateSrcUpdateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.SrcUpdateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("SrcUpdateTime", "body", "date-time", m.SrcUpdateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV2BusN1EstimateTime) validateStopName(formats strfmt.Registry) error {
	if swag.IsZero(m.StopName) { // not required
		return nil
	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV2BusN1EstimateTime) validateSubRouteName(formats strfmt.Registry) error {
	if swag.IsZero(m.SubRouteName) { // not required
		return nil
	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV2BusN1EstimateTime) validateTransTime(formats strfmt.Registry) error {
	if swag.IsZero(m.TransTime) { // not required
		return nil
	}

	if err := validate.FormatOf("TransTime", "body", "date-time", m.TransTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV2BusN1EstimateTime) validateUpdateTime(formats strfmt.Registry) error {

	if err := validate.Required("UpdateTime", "body", m.UpdateTime); err != nil {
		return err
	}

	if err := validate.FormatOf("UpdateTime", "body", "date-time", m.UpdateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this p t x service d t o bus specification v2 bus n1 estimate time based on the context it is used
func (m *PTXServiceDTOBusSpecificationV2BusN1EstimateTime) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEstimates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRouteName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStopName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubRouteName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTOBusSpecificationV2BusN1EstimateTime) contextValidateEstimates(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Estimates); i++ {

		if m.Estimates[i] != nil {
			if err := m.Estimates[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Estimates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Estimates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV2BusN1EstimateTime) contextValidateRouteName(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *PTXServiceDTOBusSpecificationV2BusN1EstimateTime) contextValidateStopName(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *PTXServiceDTOBusSpecificationV2BusN1EstimateTime) contextValidateSubRouteName(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *PTXServiceDTOBusSpecificationV2BusN1EstimateTime) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PTXServiceDTOBusSpecificationV2BusN1EstimateTime) UnmarshalBinary(b []byte) error {
	var res PTXServiceDTOBusSpecificationV2BusN1EstimateTime
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
