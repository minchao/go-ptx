// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceDTOVersion2BusBusFare BusFare
//
// 票票價種類及費率說明
// swagger:model Service.DTO.Version2.Bus.BusFare
type ServiceDTOVersion2BusBusFare struct {

	// 優惠時段
	DiscountPeriods []*ServiceDTOVersion2BusBusDiscountPeriods `json:"DiscountPeriods"`

	// integer
	//
	// 費率等級 : [1:'成人',2:'學生',3:'孩童',4:'敬老',5:'愛心',6:'愛心孩童',7:'愛心優待或愛心陪伴',8:'團體',9:'軍警',10:'由各運業者自行定義的半票']
	// Required: true
	FareClass *int32 `json:"FareClass"`

	// 票價名稱
	FareName string `json:"FareName,omitempty"`

	// 計費價格(新臺幣)
	// Required: true
	Price *int32 `json:"Price"`

	// integer
	//
	// 票種類型 : [1:'一般票',2:'來回票',3:'電子票證',4:'回數票',5:'定期票30天期',6:'定期票60天期',7:'早鳥票',8:'定期票90天期']
	// Required: true
	TicketType *int32 `json:"TicketType"`
}

// Validate validates this service d t o version2 bus bus fare
func (m *ServiceDTOVersion2BusBusFare) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDiscountPeriods(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFareClass(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTicketType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceDTOVersion2BusBusFare) validateDiscountPeriods(formats strfmt.Registry) error {

	if swag.IsZero(m.DiscountPeriods) { // not required
		return nil
	}

	for i := 0; i < len(m.DiscountPeriods); i++ {
		if swag.IsZero(m.DiscountPeriods[i]) { // not required
			continue
		}

		if m.DiscountPeriods[i] != nil {
			if err := m.DiscountPeriods[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("DiscountPeriods" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceDTOVersion2BusBusFare) validateFareClass(formats strfmt.Registry) error {

	if err := validate.Required("FareClass", "body", m.FareClass); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2BusBusFare) validatePrice(formats strfmt.Registry) error {

	if err := validate.Required("Price", "body", m.Price); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2BusBusFare) validateTicketType(formats strfmt.Registry) error {

	if err := validate.Required("TicketType", "body", m.TicketType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceDTOVersion2BusBusFare) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceDTOVersion2BusBusFare) UnmarshalBinary(b []byte) error {
	var res ServiceDTOVersion2BusBusFare
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
