// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PTXServiceDTOBusSpecificationV2BusDailyStopTimeTableStop Stop
//
// swagger:model PTX.Service.DTO.Bus.Specification.V2.BusDailyStopTimeTable+Stop
type PTXServiceDTOBusSpecificationV2BusDailyStopTimeTableStop struct {

	// String
	//
	// 地區既用中之站牌代碼(為原資料內碼)
	// Required: true
	StopID *string `json:"StopID" xml:"String"`

	// NameType
	//
	// 站牌名稱
	StopName struct {
		PTXServiceDTOSharedSpecificationV2BaseNameType
	} `json:"StopName,omitempty" xml:"NameType,omitempty"`

	// String
	//
	// 站牌唯一識別代碼，規則為 {業管機關代碼} + {StopID}，其中 {業管機關代碼} 可於Authority API中的AuthorityCode欄位查詢
	// Required: true
	StopUID *string `json:"StopUID" xml:"String"`

	// Array
	//
	// 預定班表
	TimeTables []*PTXServiceDTOBusSpecificationV2BusDailyStopTimeTableTimeTable "json:\"TimeTables\" xml:\"List`1\""
}

// Validate validates this p t x service d t o bus specification v2 bus daily stop time table stop
func (m *PTXServiceDTOBusSpecificationV2BusDailyStopTimeTableStop) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStopID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStopName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStopUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeTables(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTOBusSpecificationV2BusDailyStopTimeTableStop) validateStopID(formats strfmt.Registry) error {

	if err := validate.Required("StopID", "body", m.StopID); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV2BusDailyStopTimeTableStop) validateStopName(formats strfmt.Registry) error {
	if swag.IsZero(m.StopName) { // not required
		return nil
	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV2BusDailyStopTimeTableStop) validateStopUID(formats strfmt.Registry) error {

	if err := validate.Required("StopUID", "body", m.StopUID); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV2BusDailyStopTimeTableStop) validateTimeTables(formats strfmt.Registry) error {
	if swag.IsZero(m.TimeTables) { // not required
		return nil
	}

	for i := 0; i < len(m.TimeTables); i++ {
		if swag.IsZero(m.TimeTables[i]) { // not required
			continue
		}

		if m.TimeTables[i] != nil {
			if err := m.TimeTables[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("TimeTables" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this p t x service d t o bus specification v2 bus daily stop time table stop based on the context it is used
func (m *PTXServiceDTOBusSpecificationV2BusDailyStopTimeTableStop) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStopName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimeTables(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTOBusSpecificationV2BusDailyStopTimeTableStop) contextValidateStopName(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *PTXServiceDTOBusSpecificationV2BusDailyStopTimeTableStop) contextValidateTimeTables(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TimeTables); i++ {

		if m.TimeTables[i] != nil {
			if err := m.TimeTables[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("TimeTables" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PTXServiceDTOBusSpecificationV2BusDailyStopTimeTableStop) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PTXServiceDTOBusSpecificationV2BusDailyStopTimeTableStop) UnmarshalBinary(b []byte) error {
	var res PTXServiceDTOBusSpecificationV2BusDailyStopTimeTableStop
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
