// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceDTOVersion2BusBusStop BusStop
//
// 站牌/位資料型別
//
// swagger:model Service.DTO.Version2.Bus.BusStop
type ServiceDTOVersion2BusBusStop struct {

	// 業管機關代碼
	// Required: true
	AuthorityID *string `json:"AuthorityID"`

	// 方位角，E:東行;W:西行;S:南行;N:北行;SE:東南行;NE:東北行;SW:西南行;NW:西北行
	Bearing string `json:"Bearing,omitempty"`

	// 站牌權管所屬縣市(相當於市區公車API的City參數)[若為公路/國道客運路線則為空值]
	City string `json:"City,omitempty"`

	// 站牌權管所屬縣市之代碼(國際ISO 3166-2 三碼城市代碼)[若為公路/國道客運路線則為空值]
	CityCode string `json:"CityCode,omitempty"`

	// 站牌位置縣市之代碼(國際ISO 3166-2 三碼城市代碼)[若為公路/國道客運路線則為空值]
	LocationCityCode string `json:"LocationCityCode,omitempty"`

	// 站牌所屬的組站位ID
	// Required: true
	StationGroupID *string `json:"StationGroupID"`

	// 站牌所屬的站位ID
	StationID string `json:"StationID,omitempty"`

	// 站牌地址
	StopAddress string `json:"StopAddress,omitempty"`

	// 站牌詳細說明描述
	StopDescription string `json:"StopDescription,omitempty"`

	// 地區既用中之站牌代碼(為原資料內碼)
	// Required: true
	StopID *string `json:"StopID"`

	// NameType
	//
	// 站牌名稱
	// Required: true
	StopName *ServiceDTOVersion2BaseNameType `json:"StopName"`

	// PointType
	//
	// 站牌位置
	// Required: true
	StopPosition *ServiceDTOVersion2BasePointType `json:"StopPosition"`

	// 站牌唯一識別代碼，規則為 {業管機關簡碼} + {StopID}，其中 {業管機關簡碼} 可於Authority API中的AuthorityCode欄位查詢
	// Required: true
	StopUID *string `json:"StopUID"`

	// DateTime
	//
	// 資料更新日期時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)
	// Required: true
	UpdateTime *string `json:"UpdateTime"`

	// 資料版本編號
	// Required: true
	VersionID *int32 `json:"VersionID"`
}

// Validate validates this service d t o version2 bus bus stop
func (m *ServiceDTOVersion2BusBusStop) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthorityID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStationGroupID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStopID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStopName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStopPosition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStopUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceDTOVersion2BusBusStop) validateAuthorityID(formats strfmt.Registry) error {

	if err := validate.Required("AuthorityID", "body", m.AuthorityID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2BusBusStop) validateStationGroupID(formats strfmt.Registry) error {

	if err := validate.Required("StationGroupID", "body", m.StationGroupID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2BusBusStop) validateStopID(formats strfmt.Registry) error {

	if err := validate.Required("StopID", "body", m.StopID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2BusBusStop) validateStopName(formats strfmt.Registry) error {

	if err := validate.Required("StopName", "body", m.StopName); err != nil {
		return err
	}

	if m.StopName != nil {
		if err := m.StopName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("StopName")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion2BusBusStop) validateStopPosition(formats strfmt.Registry) error {

	if err := validate.Required("StopPosition", "body", m.StopPosition); err != nil {
		return err
	}

	if m.StopPosition != nil {
		if err := m.StopPosition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("StopPosition")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion2BusBusStop) validateStopUID(formats strfmt.Registry) error {

	if err := validate.Required("StopUID", "body", m.StopUID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2BusBusStop) validateUpdateTime(formats strfmt.Registry) error {

	if err := validate.Required("UpdateTime", "body", m.UpdateTime); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2BusBusStop) validateVersionID(formats strfmt.Registry) error {

	if err := validate.Required("VersionID", "body", m.VersionID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceDTOVersion2BusBusStop) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceDTOVersion2BusBusStop) UnmarshalBinary(b []byte) error {
	var res ServiceDTOVersion2BusBusStop
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
