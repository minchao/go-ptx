// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceDTOVersion2BusBusStationGroup BusStationGroup
//
// 組站位資料型別
// swagger:model Service.DTO.Version2.Bus.BusStationGroup
type ServiceDTOVersion2BusBusStationGroup struct {

	// 組站位代碼
	// Required: true
	StationGroupID *string `json:"StationGroupID"`

	// NameType
	//
	// 組站位名稱
	// Required: true
	StationGroupName *ServiceDTOVersion2BaseNameType `json:"StationGroupName"`

	// PointType
	//
	// 組站位位置
	// Required: true
	StationGroupPosition *ServiceDTOVersion2BasePointType `json:"StationGroupPosition"`

	// 組站位唯一識別代碼，規則為 {業管機關簡碼} + {StationGroupID}，其中 {業管機關簡碼} 可於Authority API中的AuthorityCode欄位查詢
	// Required: true
	StationGroupUID *string `json:"StationGroupUID"`

	// DateTime
	//
	// 資料更新日期時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)
	// Required: true
	UpdateTime *string `json:"UpdateTime"`

	// 資料版本編號
	// Required: true
	VersionID *int32 `json:"VersionID"`
}

// Validate validates this service d t o version2 bus bus station group
func (m *ServiceDTOVersion2BusBusStationGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStationGroupID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStationGroupName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStationGroupPosition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStationGroupUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceDTOVersion2BusBusStationGroup) validateStationGroupID(formats strfmt.Registry) error {

	if err := validate.Required("StationGroupID", "body", m.StationGroupID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2BusBusStationGroup) validateStationGroupName(formats strfmt.Registry) error {

	if err := validate.Required("StationGroupName", "body", m.StationGroupName); err != nil {
		return err
	}

	if m.StationGroupName != nil {
		if err := m.StationGroupName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("StationGroupName")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion2BusBusStationGroup) validateStationGroupPosition(formats strfmt.Registry) error {

	if err := validate.Required("StationGroupPosition", "body", m.StationGroupPosition); err != nil {
		return err
	}

	if m.StationGroupPosition != nil {
		if err := m.StationGroupPosition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("StationGroupPosition")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion2BusBusStationGroup) validateStationGroupUID(formats strfmt.Registry) error {

	if err := validate.Required("StationGroupUID", "body", m.StationGroupUID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2BusBusStationGroup) validateUpdateTime(formats strfmt.Registry) error {

	if err := validate.Required("UpdateTime", "body", m.UpdateTime); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2BusBusStationGroup) validateVersionID(formats strfmt.Registry) error {

	if err := validate.Required("VersionID", "body", m.VersionID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceDTOVersion2BusBusStationGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceDTOVersion2BusBusStationGroup) UnmarshalBinary(b []byte) error {
	var res ServiceDTOVersion2BusBusStationGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
