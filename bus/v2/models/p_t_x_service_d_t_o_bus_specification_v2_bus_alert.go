// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PTXServiceDTOBusSpecificationV2BusAlert BusAlert
//
// swagger:model PTX.Service.DTO.Bus.Specification.V2.BusAlert
type PTXServiceDTOBusSpecificationV2BusAlert struct {

	// String
	//
	// 通阻事件原單位發布代碼
	// Required: true
	AlertID *string `json:"AlertID" xml:"AlertID"`

	// String
	//
	// 詳細描述網站連結
	AlertURL string `json:"AlertURL,omitempty" xml:"AlertURL,omitempty"`

	// Int32
	//
	// 原因 : [1:'事故(ACCIDENT)',2:'維護檢修(MAINTENANCE)',3:'技術問題(TECHNICAL_PROBLEM)',4:'施工(CONSTRUCTION)',5:'醫療緊急狀況(MEDICAL_EMERGENCY)',6:'氣候(WEATHER)',7:'示威遊行(DEMONSTRATION)',8:'政治活動/維安(POLICE_ACTIVITY)',9:'假日/節慶(HOLIDAY)',10:'罷工(STRIKE)',11:'活動(Activity)(如：國慶活動/煙火活動/跨年活動/路跑活動/新北耶誕城活動等)',254:'其他(OTHER_CAUSE)',255:'未知原因(UNKNOWN_CAUSE)']
	Cause int64 `json:"Cause,omitempty"`

	// String
	//
	// 發布單位
	// Required: true
	Department *string `json:"Department" xml:"Department"`

	// String
	//
	// 事件描述
	// Required: true
	Description *string `json:"Description" xml:"Description"`

	// Int32
	//
	// 影響 : [1:'車輛改道/站牌不停靠(DETOUR)',2:'服務(班次)增加(ADDITIONAL_SERVICE)',3:'服務(班次)減少(REDUCED_SERVICE)',4:'服務(班次)取消(NO_SERVICE)',5:'服務(班次)改變(MODIFIED_SERVICE)',6:'站點異動(STOP_MOVED)',7:'重大延遲(SIGNIFICANT_DELAYS)',254:'其他影響(OTHER_EFFECT)',255:'未知影響(UNKNOWN_EFFECT)']
	Effect int64 `json:"Effect,omitempty"`

	// 結束日期時間
	// Required: true
	// Format: date-time
	EndTime *strfmt.DateTime `json:"EndTime"`

	// 消息公告日期時間
	// Format: date-time
	PublishTime strfmt.DateTime `json:"PublishTime,omitempty"`

	// Scope
	//
	// 通阻影響範圍
	// Required: true
	Scope struct {
		PTXServiceDTOBusSpecificationV2Scope
	} `json:"Scope" xml:"Scope"`

	// DateTime
	//
	// [來源端平臺]此筆資料最後更新時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)
	// Format: date-time
	SrcUpdateTime strfmt.DateTime `json:"SrcUpdateTime,omitempty"`

	// 開始日期時間
	// Required: true
	// Format: date-time
	StartTime *strfmt.DateTime `json:"StartTime"`

	// Int32
	//
	// 營運狀況 : [0:'全部營運停止',1:'全部營運正常',2:'有異常狀況']
	Status int64 `json:"Status,omitempty"`

	// String
	//
	// 通阻標題
	// Required: true
	Title *string `json:"Title" xml:"Title"`

	// DateTime
	//
	// 本平台資料更新時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)
	// Format: date-time
	UpdateTime strfmt.DateTime `json:"UpdateTime,omitempty"`
}

// Validate validates this p t x service d t o bus specification v2 bus alert
func (m *PTXServiceDTOBusSpecificationV2BusAlert) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlertID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDepartment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublishTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSrcUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTOBusSpecificationV2BusAlert) validateAlertID(formats strfmt.Registry) error {

	if err := validate.Required("AlertID", "body", m.AlertID); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV2BusAlert) validateDepartment(formats strfmt.Registry) error {

	if err := validate.Required("Department", "body", m.Department); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV2BusAlert) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("Description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV2BusAlert) validateEndTime(formats strfmt.Registry) error {

	if err := validate.Required("EndTime", "body", m.EndTime); err != nil {
		return err
	}

	if err := validate.FormatOf("EndTime", "body", "date-time", m.EndTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV2BusAlert) validatePublishTime(formats strfmt.Registry) error {
	if swag.IsZero(m.PublishTime) { // not required
		return nil
	}

	if err := validate.FormatOf("PublishTime", "body", "date-time", m.PublishTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV2BusAlert) validateScope(formats strfmt.Registry) error {

	return nil
}

func (m *PTXServiceDTOBusSpecificationV2BusAlert) validateSrcUpdateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.SrcUpdateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("SrcUpdateTime", "body", "date-time", m.SrcUpdateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV2BusAlert) validateStartTime(formats strfmt.Registry) error {

	if err := validate.Required("StartTime", "body", m.StartTime); err != nil {
		return err
	}

	if err := validate.FormatOf("StartTime", "body", "date-time", m.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV2BusAlert) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("Title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTOBusSpecificationV2BusAlert) validateUpdateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("UpdateTime", "body", "date-time", m.UpdateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this p t x service d t o bus specification v2 bus alert based on the context it is used
func (m *PTXServiceDTOBusSpecificationV2BusAlert) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateScope(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTOBusSpecificationV2BusAlert) contextValidateScope(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *PTXServiceDTOBusSpecificationV2BusAlert) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PTXServiceDTOBusSpecificationV2BusAlert) UnmarshalBinary(b []byte) error {
	var res PTXServiceDTOBusSpecificationV2BusAlert
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
