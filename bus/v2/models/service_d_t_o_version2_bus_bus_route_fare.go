// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceDTOVersion2BusBusRouteFare BusRouteFare
//
// 路線票價資料
// swagger:model Service.DTO.Version2.Bus.BusRouteFare
type ServiceDTOVersion2BusBusRouteFare struct {

	// 描述該路線計費方式
	// Required: true
	// Enum: [0: 段次計費 1: 起迄站間計費 2: 計費站區間計費]
	FarePricingType *string `json:"FarePricingType"`

	// 該收費方式是否應用到所有附屬路線
	// Required: true
	// Enum: [0: 否 1: 是]
	IsForAllSubRoutes *string `json:"IsForAllSubRoutes"`

	// 是否為免費公車
	// Required: true
	// Enum: [0: 否 1: 是]
	IsFreeBus *string `json:"IsFreeBus"`

	// 營運業者代碼
	// Required: true
	OperatorID *string `json:"OperatorID"`

	// 機關定義路線代號
	// Required: true
	RouteID *string `json:"RouteID"`

	// 路線名稱
	RouteName string `json:"RouteName,omitempty"`

	// 計費站區間計費
	StageFares []*ServiceDTOVersion2BusBusStageFare `json:"StageFares"`

	// 機關定義附屬路線代碼
	SubRouteID string `json:"SubRouteID,omitempty"`

	// 附屬路線名稱
	SubRouteName string `json:"SubRouteName,omitempty"`

	// DateTime
	//
	// 本平台資料更新時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)
	// Required: true
	UpdateTime *string `json:"UpdateTime"`
}

// Validate validates this service d t o version2 bus bus route fare
func (m *ServiceDTOVersion2BusBusRouteFare) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFarePricingType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsForAllSubRoutes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsFreeBus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperatorID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouteID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStageFares(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var serviceDTOVersion2BusBusRouteFareTypeFarePricingTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["0: 段次計費","1: 起迄站間計費","2: 計費站區間計費"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceDTOVersion2BusBusRouteFareTypeFarePricingTypePropEnum = append(serviceDTOVersion2BusBusRouteFareTypeFarePricingTypePropEnum, v)
	}
}

const (

	// ServiceDTOVersion2BusBusRouteFareFarePricingTypeNr0段次計費 captures enum value "0: 段次計費"
	ServiceDTOVersion2BusBusRouteFareFarePricingTypeNr0段次計費 string = "0: 段次計費"

	// ServiceDTOVersion2BusBusRouteFareFarePricingTypeNr1起迄站間計費 captures enum value "1: 起迄站間計費"
	ServiceDTOVersion2BusBusRouteFareFarePricingTypeNr1起迄站間計費 string = "1: 起迄站間計費"

	// ServiceDTOVersion2BusBusRouteFareFarePricingTypeNr2計費站區間計費 captures enum value "2: 計費站區間計費"
	ServiceDTOVersion2BusBusRouteFareFarePricingTypeNr2計費站區間計費 string = "2: 計費站區間計費"
)

// prop value enum
func (m *ServiceDTOVersion2BusBusRouteFare) validateFarePricingTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, serviceDTOVersion2BusBusRouteFareTypeFarePricingTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceDTOVersion2BusBusRouteFare) validateFarePricingType(formats strfmt.Registry) error {

	if err := validate.Required("FarePricingType", "body", m.FarePricingType); err != nil {
		return err
	}

	// value enum
	if err := m.validateFarePricingTypeEnum("FarePricingType", "body", *m.FarePricingType); err != nil {
		return err
	}

	return nil
}

var serviceDTOVersion2BusBusRouteFareTypeIsForAllSubRoutesPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["0: 否","1: 是"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceDTOVersion2BusBusRouteFareTypeIsForAllSubRoutesPropEnum = append(serviceDTOVersion2BusBusRouteFareTypeIsForAllSubRoutesPropEnum, v)
	}
}

const (

	// ServiceDTOVersion2BusBusRouteFareIsForAllSubRoutesNr0否 captures enum value "0: 否"
	ServiceDTOVersion2BusBusRouteFareIsForAllSubRoutesNr0否 string = "0: 否"

	// ServiceDTOVersion2BusBusRouteFareIsForAllSubRoutesNr1是 captures enum value "1: 是"
	ServiceDTOVersion2BusBusRouteFareIsForAllSubRoutesNr1是 string = "1: 是"
)

// prop value enum
func (m *ServiceDTOVersion2BusBusRouteFare) validateIsForAllSubRoutesEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, serviceDTOVersion2BusBusRouteFareTypeIsForAllSubRoutesPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceDTOVersion2BusBusRouteFare) validateIsForAllSubRoutes(formats strfmt.Registry) error {

	if err := validate.Required("IsForAllSubRoutes", "body", m.IsForAllSubRoutes); err != nil {
		return err
	}

	// value enum
	if err := m.validateIsForAllSubRoutesEnum("IsForAllSubRoutes", "body", *m.IsForAllSubRoutes); err != nil {
		return err
	}

	return nil
}

var serviceDTOVersion2BusBusRouteFareTypeIsFreeBusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["0: 否","1: 是"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceDTOVersion2BusBusRouteFareTypeIsFreeBusPropEnum = append(serviceDTOVersion2BusBusRouteFareTypeIsFreeBusPropEnum, v)
	}
}

const (

	// ServiceDTOVersion2BusBusRouteFareIsFreeBusNr0否 captures enum value "0: 否"
	ServiceDTOVersion2BusBusRouteFareIsFreeBusNr0否 string = "0: 否"

	// ServiceDTOVersion2BusBusRouteFareIsFreeBusNr1是 captures enum value "1: 是"
	ServiceDTOVersion2BusBusRouteFareIsFreeBusNr1是 string = "1: 是"
)

// prop value enum
func (m *ServiceDTOVersion2BusBusRouteFare) validateIsFreeBusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, serviceDTOVersion2BusBusRouteFareTypeIsFreeBusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceDTOVersion2BusBusRouteFare) validateIsFreeBus(formats strfmt.Registry) error {

	if err := validate.Required("IsFreeBus", "body", m.IsFreeBus); err != nil {
		return err
	}

	// value enum
	if err := m.validateIsFreeBusEnum("IsFreeBus", "body", *m.IsFreeBus); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2BusBusRouteFare) validateOperatorID(formats strfmt.Registry) error {

	if err := validate.Required("OperatorID", "body", m.OperatorID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2BusBusRouteFare) validateRouteID(formats strfmt.Registry) error {

	if err := validate.Required("RouteID", "body", m.RouteID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2BusBusRouteFare) validateStageFares(formats strfmt.Registry) error {

	if swag.IsZero(m.StageFares) { // not required
		return nil
	}

	for i := 0; i < len(m.StageFares); i++ {
		if swag.IsZero(m.StageFares[i]) { // not required
			continue
		}

		if m.StageFares[i] != nil {
			if err := m.StageFares[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("StageFares" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceDTOVersion2BusBusRouteFare) validateUpdateTime(formats strfmt.Registry) error {

	if err := validate.Required("UpdateTime", "body", m.UpdateTime); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceDTOVersion2BusBusRouteFare) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceDTOVersion2BusBusRouteFare) UnmarshalBinary(b []byte) error {
	var res ServiceDTOVersion2BusBusRouteFare
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
