// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceDTOVersion2BusBusA1Data BusA1Data
//
// 定時車機資料型別
// swagger:model Service.DTO.Version2.Bus.BusA1Data
type ServiceDTOVersion2BusBusA1Data struct {

	// 方位角
	Azimuth float64 `json:"Azimuth,omitempty"`

	// PointType
	//
	// 車輛位置經度
	BusPosition *ServiceDTOVersion2BasePointType `json:"BusPosition,omitempty"`

	// 行車狀況
	// Enum: [0: 正常 1: 車禍 2: 故障 3: 塞車 4: 緊急求援 5: 加油 90: 不明 91: 去回不明 98: 偏移路線 99: 非營運狀態 100: 客滿 101: 包車出租 255: 未知]
	BusStatus string `json:"BusStatus,omitempty"`

	// 去返程
	// Enum: [0: 去程 1: 返程 2: 迴圈 255: 未知]
	Direction string `json:"Direction,omitempty"`

	// 勤務狀態
	// Enum: [0: 正常 1: 開始 2: 結束]
	DutyStatus string `json:"DutyStatus,omitempty"`

	// DateTime
	//
	// 車機時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)
	// Required: true
	GPSTime *string `json:"GPSTime"`

	// 資料型態種類
	// Enum: [0: 未知 1: 定期 2: 非定期]
	MessageType string `json:"MessageType,omitempty"`

	// 營運業者代碼
	OperatorID string `json:"OperatorID,omitempty"`

	// 車牌號碼
	// Required: true
	PlateNumb *string `json:"PlateNumb"`

	// 地區既用中之路線代碼(為原資料內碼)
	RouteID string `json:"RouteID,omitempty"`

	// NameType
	//
	// 路線名稱
	RouteName *ServiceDTOVersion2BaseNameType `json:"RouteName,omitempty"`

	// 路線唯一識別代碼，規則為 {業管機關簡碼} + {RouteID}，其中 {業管機關簡碼} 可於Authority API中的AuthorityCode欄位查詢
	RouteUID string `json:"RouteUID,omitempty"`

	// 行駛速度(kph)
	Speed float64 `json:"Speed,omitempty"`

	// DateTime
	//
	// 來源端平台接收時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)
	SrcRecTime string `json:"SrcRecTime,omitempty"`

	// DateTime
	//
	// 來源端平台資料傳出時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)[公總使用TCP動態即時推播故有提供此欄位, 而非公總系統因使用整包資料更新, 故沒有提供此欄位]
	SrcTransTime string `json:"SrcTransTime,omitempty"`

	// DateTime
	//
	// 來源端平台資料更新時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)[公總使用TCP動態即時推播故沒有提供此欄位, 而非公總系統因提供整包資料更新, 故有提供此欄]
	SrcUpdateTime string `json:"SrcUpdateTime,omitempty"`

	// 地區既用中之子路線代碼(為原資料內碼)
	SubRouteID string `json:"SubRouteID,omitempty"`

	// NameType
	//
	// 子路線名稱
	SubRouteName *ServiceDTOVersion2BaseNameType `json:"SubRouteName,omitempty"`

	// 子路線唯一識別代碼，規則為 {業管機關簡碼} + {SubRouteID}，其中 {業管機關簡碼} 可於Authority API中的AuthorityCode欄位查詢
	SubRouteUID string `json:"SubRouteUID,omitempty"`

	// DateTime
	//
	// 車機資料傳輸時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)[多數單位沒有提供此欄位資訊]
	TransTime string `json:"TransTime,omitempty"`

	// DateTime
	//
	// 本平台資料更新時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)
	// Required: true
	UpdateTime *string `json:"UpdateTime"`
}

// Validate validates this service d t o version2 bus bus a1 data
func (m *ServiceDTOVersion2BusBusA1Data) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBusPosition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBusStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDutyStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGPSTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessageType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlateNumb(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouteName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubRouteName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceDTOVersion2BusBusA1Data) validateBusPosition(formats strfmt.Registry) error {

	if swag.IsZero(m.BusPosition) { // not required
		return nil
	}

	if m.BusPosition != nil {
		if err := m.BusPosition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("BusPosition")
			}
			return err
		}
	}

	return nil
}

var serviceDTOVersion2BusBusA1DataTypeBusStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["0: 正常","1: 車禍","2: 故障","3: 塞車","4: 緊急求援","5: 加油","90: 不明","91: 去回不明","98: 偏移路線","99: 非營運狀態","100: 客滿","101: 包車出租","255: 未知"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceDTOVersion2BusBusA1DataTypeBusStatusPropEnum = append(serviceDTOVersion2BusBusA1DataTypeBusStatusPropEnum, v)
	}
}

const (

	// ServiceDTOVersion2BusBusA1DataBusStatusNr0正常 captures enum value "0: 正常"
	ServiceDTOVersion2BusBusA1DataBusStatusNr0正常 string = "0: 正常"

	// ServiceDTOVersion2BusBusA1DataBusStatusNr1車禍 captures enum value "1: 車禍"
	ServiceDTOVersion2BusBusA1DataBusStatusNr1車禍 string = "1: 車禍"

	// ServiceDTOVersion2BusBusA1DataBusStatusNr2故障 captures enum value "2: 故障"
	ServiceDTOVersion2BusBusA1DataBusStatusNr2故障 string = "2: 故障"

	// ServiceDTOVersion2BusBusA1DataBusStatusNr3塞車 captures enum value "3: 塞車"
	ServiceDTOVersion2BusBusA1DataBusStatusNr3塞車 string = "3: 塞車"

	// ServiceDTOVersion2BusBusA1DataBusStatusNr4緊急求援 captures enum value "4: 緊急求援"
	ServiceDTOVersion2BusBusA1DataBusStatusNr4緊急求援 string = "4: 緊急求援"

	// ServiceDTOVersion2BusBusA1DataBusStatusNr5加油 captures enum value "5: 加油"
	ServiceDTOVersion2BusBusA1DataBusStatusNr5加油 string = "5: 加油"

	// ServiceDTOVersion2BusBusA1DataBusStatusNr90不明 captures enum value "90: 不明"
	ServiceDTOVersion2BusBusA1DataBusStatusNr90不明 string = "90: 不明"

	// ServiceDTOVersion2BusBusA1DataBusStatusNr91去回不明 captures enum value "91: 去回不明"
	ServiceDTOVersion2BusBusA1DataBusStatusNr91去回不明 string = "91: 去回不明"

	// ServiceDTOVersion2BusBusA1DataBusStatusNr98偏移路線 captures enum value "98: 偏移路線"
	ServiceDTOVersion2BusBusA1DataBusStatusNr98偏移路線 string = "98: 偏移路線"

	// ServiceDTOVersion2BusBusA1DataBusStatusNr99非營運狀態 captures enum value "99: 非營運狀態"
	ServiceDTOVersion2BusBusA1DataBusStatusNr99非營運狀態 string = "99: 非營運狀態"

	// ServiceDTOVersion2BusBusA1DataBusStatusNr100客滿 captures enum value "100: 客滿"
	ServiceDTOVersion2BusBusA1DataBusStatusNr100客滿 string = "100: 客滿"

	// ServiceDTOVersion2BusBusA1DataBusStatusNr101包車出租 captures enum value "101: 包車出租"
	ServiceDTOVersion2BusBusA1DataBusStatusNr101包車出租 string = "101: 包車出租"

	// ServiceDTOVersion2BusBusA1DataBusStatusNr255未知 captures enum value "255: 未知"
	ServiceDTOVersion2BusBusA1DataBusStatusNr255未知 string = "255: 未知"
)

// prop value enum
func (m *ServiceDTOVersion2BusBusA1Data) validateBusStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, serviceDTOVersion2BusBusA1DataTypeBusStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceDTOVersion2BusBusA1Data) validateBusStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.BusStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateBusStatusEnum("BusStatus", "body", m.BusStatus); err != nil {
		return err
	}

	return nil
}

var serviceDTOVersion2BusBusA1DataTypeDirectionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["0: 去程","1: 返程","2: 迴圈","255: 未知"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceDTOVersion2BusBusA1DataTypeDirectionPropEnum = append(serviceDTOVersion2BusBusA1DataTypeDirectionPropEnum, v)
	}
}

const (

	// ServiceDTOVersion2BusBusA1DataDirectionNr0去程 captures enum value "0: 去程"
	ServiceDTOVersion2BusBusA1DataDirectionNr0去程 string = "0: 去程"

	// ServiceDTOVersion2BusBusA1DataDirectionNr1返程 captures enum value "1: 返程"
	ServiceDTOVersion2BusBusA1DataDirectionNr1返程 string = "1: 返程"

	// ServiceDTOVersion2BusBusA1DataDirectionNr2迴圈 captures enum value "2: 迴圈"
	ServiceDTOVersion2BusBusA1DataDirectionNr2迴圈 string = "2: 迴圈"

	// ServiceDTOVersion2BusBusA1DataDirectionNr255未知 captures enum value "255: 未知"
	ServiceDTOVersion2BusBusA1DataDirectionNr255未知 string = "255: 未知"
)

// prop value enum
func (m *ServiceDTOVersion2BusBusA1Data) validateDirectionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, serviceDTOVersion2BusBusA1DataTypeDirectionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceDTOVersion2BusBusA1Data) validateDirection(formats strfmt.Registry) error {

	if swag.IsZero(m.Direction) { // not required
		return nil
	}

	// value enum
	if err := m.validateDirectionEnum("Direction", "body", m.Direction); err != nil {
		return err
	}

	return nil
}

var serviceDTOVersion2BusBusA1DataTypeDutyStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["0: 正常","1: 開始","2: 結束"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceDTOVersion2BusBusA1DataTypeDutyStatusPropEnum = append(serviceDTOVersion2BusBusA1DataTypeDutyStatusPropEnum, v)
	}
}

const (

	// ServiceDTOVersion2BusBusA1DataDutyStatusNr0正常 captures enum value "0: 正常"
	ServiceDTOVersion2BusBusA1DataDutyStatusNr0正常 string = "0: 正常"

	// ServiceDTOVersion2BusBusA1DataDutyStatusNr1開始 captures enum value "1: 開始"
	ServiceDTOVersion2BusBusA1DataDutyStatusNr1開始 string = "1: 開始"

	// ServiceDTOVersion2BusBusA1DataDutyStatusNr2結束 captures enum value "2: 結束"
	ServiceDTOVersion2BusBusA1DataDutyStatusNr2結束 string = "2: 結束"
)

// prop value enum
func (m *ServiceDTOVersion2BusBusA1Data) validateDutyStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, serviceDTOVersion2BusBusA1DataTypeDutyStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceDTOVersion2BusBusA1Data) validateDutyStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.DutyStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateDutyStatusEnum("DutyStatus", "body", m.DutyStatus); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2BusBusA1Data) validateGPSTime(formats strfmt.Registry) error {

	if err := validate.Required("GPSTime", "body", m.GPSTime); err != nil {
		return err
	}

	return nil
}

var serviceDTOVersion2BusBusA1DataTypeMessageTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["0: 未知","1: 定期","2: 非定期"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceDTOVersion2BusBusA1DataTypeMessageTypePropEnum = append(serviceDTOVersion2BusBusA1DataTypeMessageTypePropEnum, v)
	}
}

const (

	// ServiceDTOVersion2BusBusA1DataMessageTypeNr0未知 captures enum value "0: 未知"
	ServiceDTOVersion2BusBusA1DataMessageTypeNr0未知 string = "0: 未知"

	// ServiceDTOVersion2BusBusA1DataMessageTypeNr1定期 captures enum value "1: 定期"
	ServiceDTOVersion2BusBusA1DataMessageTypeNr1定期 string = "1: 定期"

	// ServiceDTOVersion2BusBusA1DataMessageTypeNr2非定期 captures enum value "2: 非定期"
	ServiceDTOVersion2BusBusA1DataMessageTypeNr2非定期 string = "2: 非定期"
)

// prop value enum
func (m *ServiceDTOVersion2BusBusA1Data) validateMessageTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, serviceDTOVersion2BusBusA1DataTypeMessageTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceDTOVersion2BusBusA1Data) validateMessageType(formats strfmt.Registry) error {

	if swag.IsZero(m.MessageType) { // not required
		return nil
	}

	// value enum
	if err := m.validateMessageTypeEnum("MessageType", "body", m.MessageType); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2BusBusA1Data) validatePlateNumb(formats strfmt.Registry) error {

	if err := validate.Required("PlateNumb", "body", m.PlateNumb); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2BusBusA1Data) validateRouteName(formats strfmt.Registry) error {

	if swag.IsZero(m.RouteName) { // not required
		return nil
	}

	if m.RouteName != nil {
		if err := m.RouteName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RouteName")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion2BusBusA1Data) validateSubRouteName(formats strfmt.Registry) error {

	if swag.IsZero(m.SubRouteName) { // not required
		return nil
	}

	if m.SubRouteName != nil {
		if err := m.SubRouteName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SubRouteName")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion2BusBusA1Data) validateUpdateTime(formats strfmt.Registry) error {

	if err := validate.Required("UpdateTime", "body", m.UpdateTime); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceDTOVersion2BusBusA1Data) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceDTOVersion2BusBusA1Data) UnmarshalBinary(b []byte) error {
	var res ServiceDTOVersion2BusBusA1Data
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
