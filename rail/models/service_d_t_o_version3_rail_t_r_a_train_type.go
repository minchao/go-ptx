// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceDTOVersion3RailTRATrainType TrainType
//
// 臺鐵列車車種資料
// swagger:model Service.DTO.Version3.Rail.TRA.TrainType
type ServiceDTOVersion3RailTRATrainType struct {

	// 車種簡碼 = ['1: 太魯閣', '2: 普悠瑪', '3: 自強', '4: 莒光', '5: 復興', '6: 區間', '7: 普快', '10: 區間快']
	// Required: true
	TrainTypeCode *string `json:"TrainTypeCode"`

	// 列車車種代碼
	// Required: true
	TrainTypeID *string `json:"TrainTypeID"`

	// NameType
	//
	// 列車車種名稱
	// Required: true
	TrainTypeName *ServiceDTOVersion3BaseNameType `json:"TrainTypeName"`
}

// Validate validates this service d t o version3 rail t r a train type
func (m *ServiceDTOVersion3RailTRATrainType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTrainTypeCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrainTypeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrainTypeName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceDTOVersion3RailTRATrainType) validateTrainTypeCode(formats strfmt.Registry) error {

	if err := validate.Required("TrainTypeCode", "body", m.TrainTypeCode); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3RailTRATrainType) validateTrainTypeID(formats strfmt.Registry) error {

	if err := validate.Required("TrainTypeID", "body", m.TrainTypeID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3RailTRATrainType) validateTrainTypeName(formats strfmt.Registry) error {

	if err := validate.Required("TrainTypeName", "body", m.TrainTypeName); err != nil {
		return err
	}

	if m.TrainTypeName != nil {
		if err := m.TrainTypeName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TrainTypeName")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceDTOVersion3RailTRATrainType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceDTOVersion3RailTRATrainType) UnmarshalBinary(b []byte) error {
	var res ServiceDTOVersion3RailTRATrainType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
