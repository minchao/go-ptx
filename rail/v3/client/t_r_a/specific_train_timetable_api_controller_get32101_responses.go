// Code generated by go-swagger; DO NOT EDIT.

package t_r_a

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/minchao/go-ptx/rail/v3/models"
)

// SpecificTrainTimetableAPIControllerGet32101Reader is a Reader for the SpecificTrainTimetableAPIControllerGet32101 structure.
type SpecificTrainTimetableAPIControllerGet32101Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SpecificTrainTimetableAPIControllerGet32101Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSpecificTrainTimetableAPIControllerGet32101OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 299:
		result := NewSpecificTrainTimetableAPIControllerGet32101Status299()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSpecificTrainTimetableAPIControllerGet32101OK creates a SpecificTrainTimetableAPIControllerGet32101OK with default headers values
func NewSpecificTrainTimetableAPIControllerGet32101OK() *SpecificTrainTimetableAPIControllerGet32101OK {
	return &SpecificTrainTimetableAPIControllerGet32101OK{}
}

/* SpecificTrainTimetableAPIControllerGet32101OK describes a response with status code 200, with default header values.

Success
*/
type SpecificTrainTimetableAPIControllerGet32101OK struct {
	Payload *models.PTXAPIRailModelTRASpecificWrapperPTXServiceDTORailSpecificationV3TRASpecificTrainTimetable
}

func (o *SpecificTrainTimetableAPIControllerGet32101OK) Error() string {
	return fmt.Sprintf("[GET /v3/Rail/TRA/SpecificTrainTimetable/TrainNo/{TrainNo}][%d] specificTrainTimetableApiControllerGet32101OK  %+v", 200, o.Payload)
}
func (o *SpecificTrainTimetableAPIControllerGet32101OK) GetPayload() *models.PTXAPIRailModelTRASpecificWrapperPTXServiceDTORailSpecificationV3TRASpecificTrainTimetable {
	return o.Payload
}

func (o *SpecificTrainTimetableAPIControllerGet32101OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PTXAPIRailModelTRASpecificWrapperPTXServiceDTORailSpecificationV3TRASpecificTrainTimetable)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSpecificTrainTimetableAPIControllerGet32101Status299 creates a SpecificTrainTimetableAPIControllerGet32101Status299 with default headers values
func NewSpecificTrainTimetableAPIControllerGet32101Status299() *SpecificTrainTimetableAPIControllerGet32101Status299 {
	return &SpecificTrainTimetableAPIControllerGet32101Status299{}
}

/* SpecificTrainTimetableAPIControllerGet32101Status299 describes a response with status code 299, with default header values.

加入參數'?health=true'即可查詢此API服務的健康狀態
*/
type SpecificTrainTimetableAPIControllerGet32101Status299 struct {
	Payload *models.PTXServiceDTOSharedSpecificationV3BaseDisplayHealth
}

func (o *SpecificTrainTimetableAPIControllerGet32101Status299) Error() string {
	return fmt.Sprintf("[GET /v3/Rail/TRA/SpecificTrainTimetable/TrainNo/{TrainNo}][%d] specificTrainTimetableApiControllerGet32101Status299  %+v", 299, o.Payload)
}
func (o *SpecificTrainTimetableAPIControllerGet32101Status299) GetPayload() *models.PTXServiceDTOSharedSpecificationV3BaseDisplayHealth {
	return o.Payload
}

func (o *SpecificTrainTimetableAPIControllerGet32101Status299) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PTXServiceDTOSharedSpecificationV3BaseDisplayHealth)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
