// Code generated by go-swagger; DO NOT EDIT.

package t_r_a

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new t r a API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for t r a API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AlertAPIControllerGet(params *AlertAPIControllerGetParams, opts ...ClientOption) (*AlertAPIControllerGetOK, *AlertAPIControllerGetStatus299, error)

	DailyStationTimeTableAPIControllerGet(params *DailyStationTimeTableAPIControllerGetParams, opts ...ClientOption) (*DailyStationTimeTableAPIControllerGetOK, *DailyStationTimeTableAPIControllerGetStatus299, error)

	DailyStationTimeTableAPIControllerGet1(params *DailyStationTimeTableAPIControllerGet1Params, opts ...ClientOption) (*DailyStationTimeTableAPIControllerGet1OK, *DailyStationTimeTableAPIControllerGet1Status299, error)

	DailyStationTimeTableAPIControllerGet2(params *DailyStationTimeTableAPIControllerGet2Params, opts ...ClientOption) (*DailyStationTimeTableAPIControllerGet2OK, *DailyStationTimeTableAPIControllerGet2Status299, error)

	DailyTrainTimeTableAPIControllerGet(params *DailyTrainTimeTableAPIControllerGetParams, opts ...ClientOption) (*DailyTrainTimeTableAPIControllerGetOK, *DailyTrainTimeTableAPIControllerGetStatus299, error)

	DailyTrainTimeTableAPIControllerGet1(params *DailyTrainTimeTableAPIControllerGet1Params, opts ...ClientOption) (*DailyTrainTimeTableAPIControllerGet1OK, *DailyTrainTimeTableAPIControllerGet1Status299, error)

	DailyTrainTimeTableAPIControllerGet2(params *DailyTrainTimeTableAPIControllerGet2Params, opts ...ClientOption) (*DailyTrainTimeTableAPIControllerGet2OK, *DailyTrainTimeTableAPIControllerGet2Status299, error)

	DailyTrainTimeTableAPIControllerGet3(params *DailyTrainTimeTableAPIControllerGet3Params, opts ...ClientOption) (*DailyTrainTimeTableAPIControllerGet3OK, *DailyTrainTimeTableAPIControllerGet3Status299, error)

	DailyTrainTimeTableAPIControllerGet4(params *DailyTrainTimeTableAPIControllerGet4Params, opts ...ClientOption) (*DailyTrainTimeTableAPIControllerGet4OK, *DailyTrainTimeTableAPIControllerGet4Status299, error)

	GeneralStationTimetableAPIControllerGet(params *GeneralStationTimetableAPIControllerGetParams, opts ...ClientOption) (*GeneralStationTimetableAPIControllerGetOK, *GeneralStationTimetableAPIControllerGetStatus299, error)

	GeneralStationTimetableAPIControllerGet1(params *GeneralStationTimetableAPIControllerGet1Params, opts ...ClientOption) (*GeneralStationTimetableAPIControllerGet1OK, *GeneralStationTimetableAPIControllerGet1Status299, error)

	GeneralTrainTimetableAPIControllerGet(params *GeneralTrainTimetableAPIControllerGetParams, opts ...ClientOption) (*GeneralTrainTimetableAPIControllerGetOK, *GeneralTrainTimetableAPIControllerGetStatus299, error)

	GeneralTrainTimetableAPIControllerGet1(params *GeneralTrainTimetableAPIControllerGet1Params, opts ...ClientOption) (*GeneralTrainTimetableAPIControllerGet1OK, *GeneralTrainTimetableAPIControllerGet1Status299, error)

	LineAPIControllerGet(params *LineAPIControllerGetParams, opts ...ClientOption) (*LineAPIControllerGetOK, *LineAPIControllerGetStatus299, error)

	LineNetworkAPIControllerGet(params *LineNetworkAPIControllerGetParams, opts ...ClientOption) (*LineNetworkAPIControllerGetOK, *LineNetworkAPIControllerGetStatus299, error)

	LineTransferAPIControllerGet(params *LineTransferAPIControllerGetParams, opts ...ClientOption) (*LineTransferAPIControllerGetOK, *LineTransferAPIControllerGetStatus299, error)

	NetworkAPIControllerGet(params *NetworkAPIControllerGetParams, opts ...ClientOption) (*NetworkAPIControllerGetOK, *NetworkAPIControllerGetStatus299, error)

	NewsAPIControllerGet(params *NewsAPIControllerGetParams, opts ...ClientOption) (*NewsAPIControllerGetOK, *NewsAPIControllerGetStatus299, error)

	ODFareAPIControllerAPIControllerGet(params *ODFareAPIControllerAPIControllerGetParams, opts ...ClientOption) (*ODFareAPIControllerAPIControllerGetOK, *ODFareAPIControllerAPIControllerGetStatus299, error)

	ODFareAPIControllerAPIControllerGet1(params *ODFareAPIControllerAPIControllerGet1Params, opts ...ClientOption) (*ODFareAPIControllerAPIControllerGet1OK, *ODFareAPIControllerAPIControllerGet1Status299, error)

	OperatorAPIControllerGet(params *OperatorAPIControllerGetParams, opts ...ClientOption) (*OperatorAPIControllerGetOK, *OperatorAPIControllerGetStatus299, error)

	ShapeAPIControllerGet(params *ShapeAPIControllerGetParams, opts ...ClientOption) (*ShapeAPIControllerGetOK, *ShapeAPIControllerGetStatus299, error)

	SpecificTrainTimetableAPIControllerGet(params *SpecificTrainTimetableAPIControllerGetParams, opts ...ClientOption) (*SpecificTrainTimetableAPIControllerGetOK, *SpecificTrainTimetableAPIControllerGetStatus299, error)

	SpecificTrainTimetableAPIControllerGet1(params *SpecificTrainTimetableAPIControllerGet1Params, opts ...ClientOption) (*SpecificTrainTimetableAPIControllerGet1OK, *SpecificTrainTimetableAPIControllerGet1Status299, error)

	StationAPIControllerGet(params *StationAPIControllerGetParams, opts ...ClientOption) (*StationAPIControllerGetOK, *StationAPIControllerGetStatus299, error)

	StationExitAPIControllerGet(params *StationExitAPIControllerGetParams, opts ...ClientOption) (*StationExitAPIControllerGetOK, *StationExitAPIControllerGetStatus299, error)

	StationFacilityAPIControllerGet(params *StationFacilityAPIControllerGetParams, opts ...ClientOption) (*StationFacilityAPIControllerGetOK, *StationFacilityAPIControllerGetStatus299, error)

	StationLiveBoardAPIControllerGet(params *StationLiveBoardAPIControllerGetParams, opts ...ClientOption) (*StationLiveBoardAPIControllerGetOK, *StationLiveBoardAPIControllerGetStatus299, error)

	StationLiveBoardAPIControllerGet1(params *StationLiveBoardAPIControllerGet1Params, opts ...ClientOption) (*StationLiveBoardAPIControllerGet1OK, *StationLiveBoardAPIControllerGet1Status299, error)

	StationOfLineAPIControllerGet(params *StationOfLineAPIControllerGetParams, opts ...ClientOption) (*StationOfLineAPIControllerGetOK, *StationOfLineAPIControllerGetStatus299, error)

	StationTransferAPIControllerGet(params *StationTransferAPIControllerGetParams, opts ...ClientOption) (*StationTransferAPIControllerGetOK, *StationTransferAPIControllerGetStatus299, error)

	TrainLiveBoardAPIControllerGet(params *TrainLiveBoardAPIControllerGetParams, opts ...ClientOption) (*TrainLiveBoardAPIControllerGetOK, *TrainLiveBoardAPIControllerGetStatus299, error)

	TrainLiveBoardAPIControllerGet1(params *TrainLiveBoardAPIControllerGet1Params, opts ...ClientOption) (*TrainLiveBoardAPIControllerGet1OK, *TrainLiveBoardAPIControllerGet1Status299, error)

	TrainTypeAPIControllerGet(params *TrainTypeAPIControllerGetParams, opts ...ClientOption) (*TrainTypeAPIControllerGetOK, *TrainTypeAPIControllerGetStatus299, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AlertAPIControllerGet 取得營運通阻資料s

  取得營運通阻資料
*/
func (a *Client) AlertAPIControllerGet(params *AlertAPIControllerGetParams, opts ...ClientOption) (*AlertAPIControllerGetOK, *AlertAPIControllerGetStatus299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAlertAPIControllerGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AlertApiController_Get",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/Alert",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AlertAPIControllerGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AlertAPIControllerGetOK:
		return value, nil, nil
	case *AlertAPIControllerGetStatus299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DailyStationTimeTableAPIControllerGet 取得當天各站站別時刻表資料s

  取得當天各站站別時刻表資料
*/
func (a *Client) DailyStationTimeTableAPIControllerGet(params *DailyStationTimeTableAPIControllerGetParams, opts ...ClientOption) (*DailyStationTimeTableAPIControllerGetOK, *DailyStationTimeTableAPIControllerGetStatus299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDailyStationTimeTableAPIControllerGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DailyStationTimeTableApiController_Get",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/DailyStationTimetable/Today",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DailyStationTimeTableAPIControllerGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DailyStationTimeTableAPIControllerGetOK:
		return value, nil, nil
	case *DailyStationTimeTableAPIControllerGetStatus299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DailyStationTimeTableAPIControllerGet1 取得當天指定s 車站 的時刻表資料

  取得當天指定[車站]的時刻表資料
*/
func (a *Client) DailyStationTimeTableAPIControllerGet1(params *DailyStationTimeTableAPIControllerGet1Params, opts ...ClientOption) (*DailyStationTimeTableAPIControllerGet1OK, *DailyStationTimeTableAPIControllerGet1Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDailyStationTimeTableAPIControllerGet1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "DailyStationTimeTableApiController_Get_1",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/DailyStationTimetable/Today/Station/{StationID}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DailyStationTimeTableAPIControllerGet1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DailyStationTimeTableAPIControllerGet1OK:
		return value, nil, nil
	case *DailyStationTimeTableAPIControllerGet1Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DailyStationTimeTableAPIControllerGet2 取得各站每日站別時刻表資料s

  取得各站每日站別時刻表資料
*/
func (a *Client) DailyStationTimeTableAPIControllerGet2(params *DailyStationTimeTableAPIControllerGet2Params, opts ...ClientOption) (*DailyStationTimeTableAPIControllerGet2OK, *DailyStationTimeTableAPIControllerGet2Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDailyStationTimeTableAPIControllerGet2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "DailyStationTimeTableApiController_Get_2",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/DailyStationTimetable/TrainDate/{TrainDate}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DailyStationTimeTableAPIControllerGet2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DailyStationTimeTableAPIControllerGet2OK:
		return value, nil, nil
	case *DailyStationTimeTableAPIControllerGet2Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DailyTrainTimeTableAPIControllerGet 取得當天車次時刻表資料s

  取得當天車次時刻表資料
*/
func (a *Client) DailyTrainTimeTableAPIControllerGet(params *DailyTrainTimeTableAPIControllerGetParams, opts ...ClientOption) (*DailyTrainTimeTableAPIControllerGetOK, *DailyTrainTimeTableAPIControllerGetStatus299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDailyTrainTimeTableAPIControllerGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DailyTrainTimeTableApiController_Get",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/DailyTrainTimetable/Today",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DailyTrainTimeTableAPIControllerGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DailyTrainTimeTableAPIControllerGetOK:
		return value, nil, nil
	case *DailyTrainTimeTableAPIControllerGetStatus299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DailyTrainTimeTableAPIControllerGet1 取得當天指定s 車次 的時刻表資料

  取得當天指定[車次]的時刻表資料
*/
func (a *Client) DailyTrainTimeTableAPIControllerGet1(params *DailyTrainTimeTableAPIControllerGet1Params, opts ...ClientOption) (*DailyTrainTimeTableAPIControllerGet1OK, *DailyTrainTimeTableAPIControllerGet1Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDailyTrainTimeTableAPIControllerGet1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "DailyTrainTimeTableApiController_Get_1",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/DailyTrainTimetable/Today/TrainNo/{TrainNo}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DailyTrainTimeTableAPIControllerGet1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DailyTrainTimeTableAPIControllerGet1OK:
		return value, nil, nil
	case *DailyTrainTimeTableAPIControllerGet1Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DailyTrainTimeTableAPIControllerGet2 取得指定s 日期 所有車次的時刻表資料

  取得指定[日期]所有車次的時刻表資料(台鐵提供近60天每日時刻表)
*/
func (a *Client) DailyTrainTimeTableAPIControllerGet2(params *DailyTrainTimeTableAPIControllerGet2Params, opts ...ClientOption) (*DailyTrainTimeTableAPIControllerGet2OK, *DailyTrainTimeTableAPIControllerGet2Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDailyTrainTimeTableAPIControllerGet2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "DailyTrainTimeTableApiController_Get_2",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/DailyTrainTimetable/TrainDate/{TrainDate}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DailyTrainTimeTableAPIControllerGet2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DailyTrainTimeTableAPIControllerGet2OK:
		return value, nil, nil
	case *DailyTrainTimeTableAPIControllerGet2Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DailyTrainTimeTableAPIControllerGet3 取得指定s 日期 起迄站間 之站間時刻表資料 僅列出查詢的停靠站

  取得指定[日期],[起迄站間]之站間時刻表資料(僅列出查詢的停靠站)
*/
func (a *Client) DailyTrainTimeTableAPIControllerGet3(params *DailyTrainTimeTableAPIControllerGet3Params, opts ...ClientOption) (*DailyTrainTimeTableAPIControllerGet3OK, *DailyTrainTimeTableAPIControllerGet3Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDailyTrainTimeTableAPIControllerGet3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "DailyTrainTimeTableApiController_Get_3",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/DailyTrainTimetable/OD/{OriginStationID}/to/{DestinationStationID}/{TrainDate}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DailyTrainTimeTableAPIControllerGet3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DailyTrainTimeTableAPIControllerGet3OK:
		return value, nil, nil
	case *DailyTrainTimeTableAPIControllerGet3Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DailyTrainTimeTableAPIControllerGet4 取得指定s 日期 起迄站間 之站間時刻表資料

  取得指定[日期],[起迄站間]之站間時刻表資料
*/
func (a *Client) DailyTrainTimeTableAPIControllerGet4(params *DailyTrainTimeTableAPIControllerGet4Params, opts ...ClientOption) (*DailyTrainTimeTableAPIControllerGet4OK, *DailyTrainTimeTableAPIControllerGet4Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDailyTrainTimeTableAPIControllerGet4Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "DailyTrainTimeTableApiController_Get_4",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/DailyTrainTimetable/OD/Inclusive/{OriginStationID}/to/{DestinationStationID}/{TrainDate}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DailyTrainTimeTableAPIControllerGet4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DailyTrainTimeTableAPIControllerGet4OK:
		return value, nil, nil
	case *DailyTrainTimeTableAPIControllerGet4Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GeneralStationTimetableAPIControllerGet 取得各站的定期站別時刻表資料s

  取得各站的定期站別時刻表資料
*/
func (a *Client) GeneralStationTimetableAPIControllerGet(params *GeneralStationTimetableAPIControllerGetParams, opts ...ClientOption) (*GeneralStationTimetableAPIControllerGetOK, *GeneralStationTimetableAPIControllerGetStatus299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGeneralStationTimetableAPIControllerGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GeneralStationTimetableApiController_Get",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/GeneralStationTimetable",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GeneralStationTimetableAPIControllerGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GeneralStationTimetableAPIControllerGetOK:
		return value, nil, nil
	case *GeneralStationTimetableAPIControllerGetStatus299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GeneralStationTimetableAPIControllerGet1 取得指定s 車站 的定期站別時刻表資料

  取得指定[車站]的定期站別時刻表資料
*/
func (a *Client) GeneralStationTimetableAPIControllerGet1(params *GeneralStationTimetableAPIControllerGet1Params, opts ...ClientOption) (*GeneralStationTimetableAPIControllerGet1OK, *GeneralStationTimetableAPIControllerGet1Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGeneralStationTimetableAPIControllerGet1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "GeneralStationTimetableApiController_Get_1",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/GeneralStationTimetable/Station/{StationID}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GeneralStationTimetableAPIControllerGet1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GeneralStationTimetableAPIControllerGet1OK:
		return value, nil, nil
	case *GeneralStationTimetableAPIControllerGet1Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GeneralTrainTimetableAPIControllerGet 取得所有車次的定期時刻表資料s

  取得所有車次的定期時刻表資料
*/
func (a *Client) GeneralTrainTimetableAPIControllerGet(params *GeneralTrainTimetableAPIControllerGetParams, opts ...ClientOption) (*GeneralTrainTimetableAPIControllerGetOK, *GeneralTrainTimetableAPIControllerGetStatus299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGeneralTrainTimetableAPIControllerGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GeneralTrainTimetableApiController_Get",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/GeneralTrainTimetable",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GeneralTrainTimetableAPIControllerGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GeneralTrainTimetableAPIControllerGetOK:
		return value, nil, nil
	case *GeneralTrainTimetableAPIControllerGetStatus299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GeneralTrainTimetableAPIControllerGet1 取得指定s 車次 的定期時刻表資料

  取得指定[車次]的定期時刻表資料
*/
func (a *Client) GeneralTrainTimetableAPIControllerGet1(params *GeneralTrainTimetableAPIControllerGet1Params, opts ...ClientOption) (*GeneralTrainTimetableAPIControllerGet1OK, *GeneralTrainTimetableAPIControllerGet1Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGeneralTrainTimetableAPIControllerGet1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "GeneralTrainTimetableApiController_Get_1",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/GeneralTrainTimetable/TrainNo/{TrainNo}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GeneralTrainTimetableAPIControllerGet1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GeneralTrainTimetableAPIControllerGet1OK:
		return value, nil, nil
	case *GeneralTrainTimetableAPIControllerGet1Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LineAPIControllerGet 取得路線基本資料s

  取得路線基本資料
*/
func (a *Client) LineAPIControllerGet(params *LineAPIControllerGetParams, opts ...ClientOption) (*LineAPIControllerGetOK, *LineAPIControllerGetStatus299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLineAPIControllerGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "LineApiController_Get",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/Line",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LineAPIControllerGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *LineAPIControllerGetOK:
		return value, nil, nil
	case *LineAPIControllerGetStatus299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LineNetworkAPIControllerGet 取得路線網路拓撲基本資料s

  取得路線網路拓撲基本資料
*/
func (a *Client) LineNetworkAPIControllerGet(params *LineNetworkAPIControllerGetParams, opts ...ClientOption) (*LineNetworkAPIControllerGetOK, *LineNetworkAPIControllerGetStatus299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLineNetworkAPIControllerGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "LineNetworkApiController_Get",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/LineNetwork",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LineNetworkAPIControllerGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *LineNetworkAPIControllerGetOK:
		return value, nil, nil
	case *LineNetworkAPIControllerGetStatus299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LineTransferAPIControllerGet 取得內部路線轉乘資料s

  取得內部路線轉乘資料
*/
func (a *Client) LineTransferAPIControllerGet(params *LineTransferAPIControllerGetParams, opts ...ClientOption) (*LineTransferAPIControllerGetOK, *LineTransferAPIControllerGetStatus299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLineTransferAPIControllerGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "LineTransferApiController_Get",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/LineTransfer",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LineTransferAPIControllerGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *LineTransferAPIControllerGetOK:
		return value, nil, nil
	case *LineTransferAPIControllerGetStatus299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NetworkAPIControllerGet 取得臺鐵路網資料s

  取得臺鐵路網資料
*/
func (a *Client) NetworkAPIControllerGet(params *NetworkAPIControllerGetParams, opts ...ClientOption) (*NetworkAPIControllerGetOK, *NetworkAPIControllerGetStatus299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNetworkAPIControllerGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NetworkApiController_Get",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/Network",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NetworkAPIControllerGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *NetworkAPIControllerGetOK:
		return value, nil, nil
	case *NetworkAPIControllerGetStatus299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NewsAPIControllerGet 取得最新消息s

  取得最新消息
*/
func (a *Client) NewsAPIControllerGet(params *NewsAPIControllerGetParams, opts ...ClientOption) (*NewsAPIControllerGetOK, *NewsAPIControllerGetStatus299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNewsAPIControllerGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NewsApiController_Get",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/News",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NewsAPIControllerGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *NewsAPIControllerGetOK:
		return value, nil, nil
	case *NewsAPIControllerGetStatus299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ODFareAPIControllerAPIControllerGet 取得票價資料s 檔案

  取得Gzip壓縮檔
*/
func (a *Client) ODFareAPIControllerAPIControllerGet(params *ODFareAPIControllerAPIControllerGetParams, opts ...ClientOption) (*ODFareAPIControllerAPIControllerGetOK, *ODFareAPIControllerAPIControllerGetStatus299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewODFareAPIControllerAPIControllerGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ODFareApiControllerApiController_Get",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/ODFare",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ODFareAPIControllerAPIControllerGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ODFareAPIControllerAPIControllerGetOK:
		return value, nil, nil
	case *ODFareAPIControllerAPIControllerGetStatus299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ODFareAPIControllerAPIControllerGet1 取得指定起迄站間票價資料s

  取得指定起迄站間票價資料
*/
func (a *Client) ODFareAPIControllerAPIControllerGet1(params *ODFareAPIControllerAPIControllerGet1Params, opts ...ClientOption) (*ODFareAPIControllerAPIControllerGet1OK, *ODFareAPIControllerAPIControllerGet1Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewODFareAPIControllerAPIControllerGet1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "ODFareApiControllerApiController_Get_1",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/ODFare/{OriginStationID}/to/{DestinationStationID}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ODFareAPIControllerAPIControllerGet1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ODFareAPIControllerAPIControllerGet1OK:
		return value, nil, nil
	case *ODFareAPIControllerAPIControllerGet1Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OperatorAPIControllerGet 取得台鐵營運業者基本資料s

  取得台鐵營運業者基本資料
*/
func (a *Client) OperatorAPIControllerGet(params *OperatorAPIControllerGetParams, opts ...ClientOption) (*OperatorAPIControllerGetOK, *OperatorAPIControllerGetStatus299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOperatorAPIControllerGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "OperatorApiController_Get",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/Operator",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OperatorAPIControllerGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *OperatorAPIControllerGetOK:
		return value, nil, nil
	case *OperatorAPIControllerGetStatus299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShapeAPIControllerGet 取得線型基本資料s

  取得線型基本資料
*/
func (a *Client) ShapeAPIControllerGet(params *ShapeAPIControllerGetParams, opts ...ClientOption) (*ShapeAPIControllerGetOK, *ShapeAPIControllerGetStatus299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShapeAPIControllerGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ShapeApiController_Get",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/Shape",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShapeAPIControllerGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ShapeAPIControllerGetOK:
		return value, nil, nil
	case *ShapeAPIControllerGetStatus299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SpecificTrainTimetableAPIControllerGet 取得所有特殊車次時刻表資料s

  取得所有特殊車次時刻表資料
*/
func (a *Client) SpecificTrainTimetableAPIControllerGet(params *SpecificTrainTimetableAPIControllerGetParams, opts ...ClientOption) (*SpecificTrainTimetableAPIControllerGetOK, *SpecificTrainTimetableAPIControllerGetStatus299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSpecificTrainTimetableAPIControllerGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SpecificTrainTimetableApiController_Get",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/SpecificTrainTimetable",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SpecificTrainTimetableAPIControllerGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *SpecificTrainTimetableAPIControllerGetOK:
		return value, nil, nil
	case *SpecificTrainTimetableAPIControllerGetStatus299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SpecificTrainTimetableAPIControllerGet1 取得指定s 車次 的特殊車次時刻表資料

  取得指定[車次]的特殊車次時刻表資料
*/
func (a *Client) SpecificTrainTimetableAPIControllerGet1(params *SpecificTrainTimetableAPIControllerGet1Params, opts ...ClientOption) (*SpecificTrainTimetableAPIControllerGet1OK, *SpecificTrainTimetableAPIControllerGet1Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSpecificTrainTimetableAPIControllerGet1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "SpecificTrainTimetableApiController_Get_1",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/SpecificTrainTimetable/TrainNo/{TrainNo}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SpecificTrainTimetableAPIControllerGet1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *SpecificTrainTimetableAPIControllerGet1OK:
		return value, nil, nil
	case *SpecificTrainTimetableAPIControllerGet1Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StationAPIControllerGet 取得車站基本資料s

  取得車站基本資料
*/
func (a *Client) StationAPIControllerGet(params *StationAPIControllerGetParams, opts ...ClientOption) (*StationAPIControllerGetOK, *StationAPIControllerGetStatus299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStationAPIControllerGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StationApiController_Get",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/Station",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StationAPIControllerGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *StationAPIControllerGetOK:
		return value, nil, nil
	case *StationAPIControllerGetStatus299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StationExitAPIControllerGet 取得車站出入口基本資料s

  取得車站出入口基本資料
*/
func (a *Client) StationExitAPIControllerGet(params *StationExitAPIControllerGetParams, opts ...ClientOption) (*StationExitAPIControllerGetOK, *StationExitAPIControllerGetStatus299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStationExitAPIControllerGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StationExitApiController_Get",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/StationExit",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StationExitAPIControllerGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *StationExitAPIControllerGetOK:
		return value, nil, nil
	case *StationExitAPIControllerGetStatus299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StationFacilityAPIControllerGet 取得車站設施資料s

  取得車站設施資料
*/
func (a *Client) StationFacilityAPIControllerGet(params *StationFacilityAPIControllerGetParams, opts ...ClientOption) (*StationFacilityAPIControllerGetOK, *StationFacilityAPIControllerGetStatus299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStationFacilityAPIControllerGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StationFacilityApiController_Get",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/StationFacility",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StationFacilityAPIControllerGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *StationFacilityAPIControllerGetOK:
		return value, nil, nil
	case *StationFacilityAPIControllerGetStatus299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StationLiveBoardAPIControllerGet 取得列車即時到離站資料s

  取得列車即時到離站資料
*/
func (a *Client) StationLiveBoardAPIControllerGet(params *StationLiveBoardAPIControllerGetParams, opts ...ClientOption) (*StationLiveBoardAPIControllerGetOK, *StationLiveBoardAPIControllerGetStatus299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStationLiveBoardAPIControllerGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StationLiveBoardApiController_Get",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/StationLiveBoard",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StationLiveBoardAPIControllerGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *StationLiveBoardAPIControllerGetOK:
		return value, nil, nil
	case *StationLiveBoardAPIControllerGetStatus299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StationLiveBoardAPIControllerGet1 取得指定s 車站 的列車即時到離站資料

  取得指定[車站]的列車即時到離站資料
*/
func (a *Client) StationLiveBoardAPIControllerGet1(params *StationLiveBoardAPIControllerGet1Params, opts ...ClientOption) (*StationLiveBoardAPIControllerGet1OK, *StationLiveBoardAPIControllerGet1Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStationLiveBoardAPIControllerGet1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "StationLiveBoardApiController_Get_1",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/StationLiveBoard/Station/{StationID}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StationLiveBoardAPIControllerGet1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *StationLiveBoardAPIControllerGet1OK:
		return value, nil, nil
	case *StationLiveBoardAPIControllerGet1Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StationOfLineAPIControllerGet 取得路線車站基本資料s

  取得路線車站基本資料
*/
func (a *Client) StationOfLineAPIControllerGet(params *StationOfLineAPIControllerGetParams, opts ...ClientOption) (*StationOfLineAPIControllerGetOK, *StationOfLineAPIControllerGetStatus299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStationOfLineAPIControllerGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StationOfLineApiController_Get",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/StationOfLine",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StationOfLineAPIControllerGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *StationOfLineAPIControllerGetOK:
		return value, nil, nil
	case *StationOfLineAPIControllerGetStatus299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StationTransferAPIControllerGet 取得車站跨運具轉乘資訊s

  取得車站跨運具轉乘資訊
*/
func (a *Client) StationTransferAPIControllerGet(params *StationTransferAPIControllerGetParams, opts ...ClientOption) (*StationTransferAPIControllerGetOK, *StationTransferAPIControllerGetStatus299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStationTransferAPIControllerGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StationTransferApiController_Get",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/StationTransfer",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StationTransferAPIControllerGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *StationTransferAPIControllerGetOK:
		return value, nil, nil
	case *StationTransferAPIControllerGetStatus299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TrainLiveBoardAPIControllerGet 取得列車即時位置動態資料s

  取得列車即時位置動態資料

## 使用注意事項
1.  本項資料為「列車目前所在之車站」資料，而更新資料的時機點為「列車離站時」(由 CTC 提供)，其內容之車站資料可能為經過站，也可能為停靠站。
2.  以「145車次」為例，如果車站名稱為「萬華」，表示 145 車次剛從萬華離開，而不是正前往萬華，另萬華站為145 車次之經過站，非停靠站。
3.  提供所有經過站資料是為確保車次的準誤點資料都會是最新的 (尤其是東部幹線普悠瑪、太魯閣車次，因停靠站少，更新頻率低的話會使呈現的準誤點時間誤差過大)。
4.  基於上述原因，本項資料並非僅提供列車停靠站資料，因為這樣提供方式會使列車位置資訊更狹隘，例如:只知道離開台北站，不曉得經過哪一站了，故請加值者使用時多加注意。
*/
func (a *Client) TrainLiveBoardAPIControllerGet(params *TrainLiveBoardAPIControllerGetParams, opts ...ClientOption) (*TrainLiveBoardAPIControllerGetOK, *TrainLiveBoardAPIControllerGetStatus299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTrainLiveBoardAPIControllerGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TrainLiveBoardApiController_Get",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/TrainLiveBoard",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TrainLiveBoardAPIControllerGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *TrainLiveBoardAPIControllerGetOK:
		return value, nil, nil
	case *TrainLiveBoardAPIControllerGetStatus299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TrainLiveBoardAPIControllerGet1 取得指定s 車次 的列車即時位置動態資料

  取得指定[車次]的列車即時位置動態資料

## 使用注意事項
1.  本項資料為「列車目前所在之車站」資料，而更新資料的時機點為「列車離站時」(由 CTC 提供)，其內容之車站資料可能為經過站，也可能為停靠站。
2.  以「145車次」為例，如果車站名稱為「萬華」，表示 145 車次剛從萬華離開，而不是正前往萬華，另萬華站為145 車次之經過站，非停靠站。
3.  提供所有經過站資料是為確保車次的準誤點資料都會是最新的 (尤其是東部幹線普悠瑪、太魯閣車次，因停靠站少，更新頻率低的話會使呈現的準誤點時間誤差過大)。
4.  基於上述原因，本項資料並非僅提供列車停靠站資料，因為這樣提供方式會使列車位置資訊更狹隘，例如:只知道離開台北站，不曉得經過哪一站了，故請加值者使用時多加注意。
*/
func (a *Client) TrainLiveBoardAPIControllerGet1(params *TrainLiveBoardAPIControllerGet1Params, opts ...ClientOption) (*TrainLiveBoardAPIControllerGet1OK, *TrainLiveBoardAPIControllerGet1Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTrainLiveBoardAPIControllerGet1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "TrainLiveBoardApiController_Get_1",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/TrainLiveBoard/TrainNo/{TrainNo}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TrainLiveBoardAPIControllerGet1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *TrainLiveBoardAPIControllerGet1OK:
		return value, nil, nil
	case *TrainLiveBoardAPIControllerGet1Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TrainTypeAPIControllerGet 取得所有列車車種資料s

  取得所有列車車種資料
*/
func (a *Client) TrainTypeAPIControllerGet(params *TrainTypeAPIControllerGetParams, opts ...ClientOption) (*TrainTypeAPIControllerGetOK, *TrainTypeAPIControllerGetStatus299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTrainTypeAPIControllerGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TrainTypeApiController_Get",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/TrainType",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TrainTypeAPIControllerGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *TrainTypeAPIControllerGetOK:
		return value, nil, nil
	case *TrainTypeAPIControllerGetStatus299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
