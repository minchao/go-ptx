// Code generated by go-swagger; DO NOT EDIT.

package t_r_a

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new t r a API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for t r a API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AlertAPIControllerGet3218(params *AlertAPIControllerGet3218Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AlertAPIControllerGet3218OK, *AlertAPIControllerGet3218Status299, error)

	DailyStationTimeTableAPIControllerGet3212(params *DailyStationTimeTableAPIControllerGet3212Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DailyStationTimeTableAPIControllerGet3212OK, *DailyStationTimeTableAPIControllerGet3212Status299, error)

	DailyStationTimeTableAPIControllerGet32121(params *DailyStationTimeTableAPIControllerGet32121Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DailyStationTimeTableAPIControllerGet32121OK, *DailyStationTimeTableAPIControllerGet32121Status299, error)

	DailyStationTimeTableAPIControllerGet32122(params *DailyStationTimeTableAPIControllerGet32122Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DailyStationTimeTableAPIControllerGet32122OK, *DailyStationTimeTableAPIControllerGet32122Status299, error)

	DailyTrainTimeTableAPIControllerGet3211(params *DailyTrainTimeTableAPIControllerGet3211Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DailyTrainTimeTableAPIControllerGet3211OK, *DailyTrainTimeTableAPIControllerGet3211Status299, error)

	DailyTrainTimeTableAPIControllerGet32111(params *DailyTrainTimeTableAPIControllerGet32111Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DailyTrainTimeTableAPIControllerGet32111OK, *DailyTrainTimeTableAPIControllerGet32111Status299, error)

	DailyTrainTimeTableAPIControllerGet32112(params *DailyTrainTimeTableAPIControllerGet32112Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DailyTrainTimeTableAPIControllerGet32112OK, *DailyTrainTimeTableAPIControllerGet32112Status299, error)

	DailyTrainTimeTableAPIControllerGet32113(params *DailyTrainTimeTableAPIControllerGet32113Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DailyTrainTimeTableAPIControllerGet32113OK, *DailyTrainTimeTableAPIControllerGet32113Status299, error)

	DailyTrainTimeTableAPIControllerGet32114(params *DailyTrainTimeTableAPIControllerGet32114Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DailyTrainTimeTableAPIControllerGet32114OK, *DailyTrainTimeTableAPIControllerGet32114Status299, error)

	DailyTrainTimeTableAPIControllerGet32115(params *DailyTrainTimeTableAPIControllerGet32115Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DailyTrainTimeTableAPIControllerGet32115OK, *DailyTrainTimeTableAPIControllerGet32115Status299, error)

	GeneralStationTimetableAPIControllerGet3209(params *GeneralStationTimetableAPIControllerGet3209Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GeneralStationTimetableAPIControllerGet3209OK, *GeneralStationTimetableAPIControllerGet3209Status299, error)

	GeneralStationTimetableAPIControllerGet32091(params *GeneralStationTimetableAPIControllerGet32091Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GeneralStationTimetableAPIControllerGet32091OK, *GeneralStationTimetableAPIControllerGet32091Status299, error)

	GeneralTrainTimetableAPIControllerGet3208(params *GeneralTrainTimetableAPIControllerGet3208Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GeneralTrainTimetableAPIControllerGet3208OK, *GeneralTrainTimetableAPIControllerGet3208Status299, error)

	GeneralTrainTimetableAPIControllerGet32081(params *GeneralTrainTimetableAPIControllerGet32081Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GeneralTrainTimetableAPIControllerGet32081OK, *GeneralTrainTimetableAPIControllerGet32081Status299, error)

	LineAPIControllerGet3204(params *LineAPIControllerGet3204Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LineAPIControllerGet3204OK, *LineAPIControllerGet3204Status299, error)

	LineNetworkAPIControllerGet3221(params *LineNetworkAPIControllerGet3221Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LineNetworkAPIControllerGet3221OK, *LineNetworkAPIControllerGet3221Status299, error)

	LineTransferAPIControllerGet3215(params *LineTransferAPIControllerGet3215Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LineTransferAPIControllerGet3215OK, *LineTransferAPIControllerGet3215Status299, error)

	NetworkAPIControllerGet3200(params *NetworkAPIControllerGet3200Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NetworkAPIControllerGet3200OK, *NetworkAPIControllerGet3200Status299, error)

	NewsAPIControllerGet3217(params *NewsAPIControllerGet3217Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NewsAPIControllerGet3217OK, *NewsAPIControllerGet3217Status299, error)

	ODFareAPIControllerAPIControllerGet3207(params *ODFareAPIControllerAPIControllerGet3207Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ODFareAPIControllerAPIControllerGet3207OK, *ODFareAPIControllerAPIControllerGet3207Status299, error)

	ODFareAPIControllerAPIControllerGet32071(params *ODFareAPIControllerAPIControllerGet32071Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ODFareAPIControllerAPIControllerGet32071OK, *ODFareAPIControllerAPIControllerGet32071Status299, error)

	OperatorAPIControllerGet3220(params *OperatorAPIControllerGet3220Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OperatorAPIControllerGet3220OK, *OperatorAPIControllerGet3220Status299, error)

	ShapeAPIControllerGet3219(params *ShapeAPIControllerGet3219Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShapeAPIControllerGet3219OK, *ShapeAPIControllerGet3219Status299, error)

	SpecificTrainTimetableAPIControllerGet3210(params *SpecificTrainTimetableAPIControllerGet3210Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SpecificTrainTimetableAPIControllerGet3210OK, *SpecificTrainTimetableAPIControllerGet3210Status299, error)

	SpecificTrainTimetableAPIControllerGet32101(params *SpecificTrainTimetableAPIControllerGet32101Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SpecificTrainTimetableAPIControllerGet32101OK, *SpecificTrainTimetableAPIControllerGet32101Status299, error)

	StationAPIControllerGet3201(params *StationAPIControllerGet3201Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StationAPIControllerGet3201OK, *StationAPIControllerGet3201Status299, error)

	StationExitAPIControllerGet3202(params *StationExitAPIControllerGet3202Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StationExitAPIControllerGet3202OK, *StationExitAPIControllerGet3202Status299, error)

	StationFacilityAPIControllerGet3203(params *StationFacilityAPIControllerGet3203Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StationFacilityAPIControllerGet3203OK, *StationFacilityAPIControllerGet3203Status299, error)

	StationLiveBoardAPIControllerGet3213(params *StationLiveBoardAPIControllerGet3213Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StationLiveBoardAPIControllerGet3213OK, *StationLiveBoardAPIControllerGet3213Status299, error)

	StationLiveBoardAPIControllerGet32131(params *StationLiveBoardAPIControllerGet32131Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StationLiveBoardAPIControllerGet32131OK, *StationLiveBoardAPIControllerGet32131Status299, error)

	StationOfLineAPIControllerGet3205(params *StationOfLineAPIControllerGet3205Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StationOfLineAPIControllerGet3205OK, *StationOfLineAPIControllerGet3205Status299, error)

	StationTransferAPIControllerGet3216(params *StationTransferAPIControllerGet3216Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StationTransferAPIControllerGet3216OK, *StationTransferAPIControllerGet3216Status299, error)

	TrainLiveBoardAPIControllerGet3214(params *TrainLiveBoardAPIControllerGet3214Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TrainLiveBoardAPIControllerGet3214OK, *TrainLiveBoardAPIControllerGet3214Status299, error)

	TrainLiveBoardAPIControllerGet32141(params *TrainLiveBoardAPIControllerGet32141Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TrainLiveBoardAPIControllerGet32141OK, *TrainLiveBoardAPIControllerGet32141Status299, error)

	TrainTypeAPIControllerGet3206(params *TrainTypeAPIControllerGet3206Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TrainTypeAPIControllerGet3206OK, *TrainTypeAPIControllerGet3206Status299, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AlertAPIControllerGet3218 取得營運通阻資料s

  取得營運通阻資料
*/
func (a *Client) AlertAPIControllerGet3218(params *AlertAPIControllerGet3218Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AlertAPIControllerGet3218OK, *AlertAPIControllerGet3218Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAlertAPIControllerGet3218Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "AlertApiController_Get_3218",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/Alert",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AlertAPIControllerGet3218Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AlertAPIControllerGet3218OK:
		return value, nil, nil
	case *AlertAPIControllerGet3218Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DailyStationTimeTableAPIControllerGet3212 取得當天各站站別時刻表資料s

  取得當天各站站別時刻表資料
*/
func (a *Client) DailyStationTimeTableAPIControllerGet3212(params *DailyStationTimeTableAPIControllerGet3212Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DailyStationTimeTableAPIControllerGet3212OK, *DailyStationTimeTableAPIControllerGet3212Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDailyStationTimeTableAPIControllerGet3212Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "DailyStationTimeTableApiController_Get_3212",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/DailyStationTimetable/Today",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DailyStationTimeTableAPIControllerGet3212Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DailyStationTimeTableAPIControllerGet3212OK:
		return value, nil, nil
	case *DailyStationTimeTableAPIControllerGet3212Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DailyStationTimeTableAPIControllerGet32121 取得當天指定s 車站 的時刻表資料

  取得當天指定[車站]的時刻表資料
*/
func (a *Client) DailyStationTimeTableAPIControllerGet32121(params *DailyStationTimeTableAPIControllerGet32121Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DailyStationTimeTableAPIControllerGet32121OK, *DailyStationTimeTableAPIControllerGet32121Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDailyStationTimeTableAPIControllerGet32121Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "DailyStationTimeTableApiController_Get_3212_1",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/DailyStationTimetable/Today/Station/{StationID}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DailyStationTimeTableAPIControllerGet32121Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DailyStationTimeTableAPIControllerGet32121OK:
		return value, nil, nil
	case *DailyStationTimeTableAPIControllerGet32121Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DailyStationTimeTableAPIControllerGet32122 取得各站每日站別時刻表資料s

  取得各站每日站別時刻表資料
*/
func (a *Client) DailyStationTimeTableAPIControllerGet32122(params *DailyStationTimeTableAPIControllerGet32122Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DailyStationTimeTableAPIControllerGet32122OK, *DailyStationTimeTableAPIControllerGet32122Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDailyStationTimeTableAPIControllerGet32122Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "DailyStationTimeTableApiController_Get_3212_2",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/DailyStationTimetable/TrainDate/{TrainDate}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DailyStationTimeTableAPIControllerGet32122Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DailyStationTimeTableAPIControllerGet32122OK:
		return value, nil, nil
	case *DailyStationTimeTableAPIControllerGet32122Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DailyTrainTimeTableAPIControllerGet3211 取得當天車次時刻表資料s

  取得當天車次時刻表資料
*/
func (a *Client) DailyTrainTimeTableAPIControllerGet3211(params *DailyTrainTimeTableAPIControllerGet3211Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DailyTrainTimeTableAPIControllerGet3211OK, *DailyTrainTimeTableAPIControllerGet3211Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDailyTrainTimeTableAPIControllerGet3211Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "DailyTrainTimeTableApiController_Get_3211",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/DailyTrainTimetable/Today",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DailyTrainTimeTableAPIControllerGet3211Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DailyTrainTimeTableAPIControllerGet3211OK:
		return value, nil, nil
	case *DailyTrainTimeTableAPIControllerGet3211Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DailyTrainTimeTableAPIControllerGet32111 取得當天指定s 車次 的時刻表資料

  取得當天指定[車次]的時刻表資料
*/
func (a *Client) DailyTrainTimeTableAPIControllerGet32111(params *DailyTrainTimeTableAPIControllerGet32111Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DailyTrainTimeTableAPIControllerGet32111OK, *DailyTrainTimeTableAPIControllerGet32111Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDailyTrainTimeTableAPIControllerGet32111Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "DailyTrainTimeTableApiController_Get_3211_1",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/DailyTrainTimetable/Today/TrainNo/{TrainNo}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DailyTrainTimeTableAPIControllerGet32111Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DailyTrainTimeTableAPIControllerGet32111OK:
		return value, nil, nil
	case *DailyTrainTimeTableAPIControllerGet32111Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DailyTrainTimeTableAPIControllerGet32112 取得臺鐵每日時刻表所有供應的日期資料s

  取得臺鐵每日時刻表所有供應的日期資料
*/
func (a *Client) DailyTrainTimeTableAPIControllerGet32112(params *DailyTrainTimeTableAPIControllerGet32112Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DailyTrainTimeTableAPIControllerGet32112OK, *DailyTrainTimeTableAPIControllerGet32112Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDailyTrainTimeTableAPIControllerGet32112Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "DailyTrainTimeTableApiController_Get_3211_2",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/DailyTrainTimetable/TrainDates",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DailyTrainTimeTableAPIControllerGet32112Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DailyTrainTimeTableAPIControllerGet32112OK:
		return value, nil, nil
	case *DailyTrainTimeTableAPIControllerGet32112Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DailyTrainTimeTableAPIControllerGet32113 取得指定s 日期 所有車次的時刻表資料

  取得指定[日期]所有車次的時刻表資料(台鐵提供近60天每日時刻表)
*/
func (a *Client) DailyTrainTimeTableAPIControllerGet32113(params *DailyTrainTimeTableAPIControllerGet32113Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DailyTrainTimeTableAPIControllerGet32113OK, *DailyTrainTimeTableAPIControllerGet32113Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDailyTrainTimeTableAPIControllerGet32113Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "DailyTrainTimeTableApiController_Get_3211_3",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/DailyTrainTimetable/TrainDate/{TrainDate}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DailyTrainTimeTableAPIControllerGet32113Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DailyTrainTimeTableAPIControllerGet32113OK:
		return value, nil, nil
	case *DailyTrainTimeTableAPIControllerGet32113Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DailyTrainTimeTableAPIControllerGet32114 取得指定s 日期 起迄站間 之站間時刻表資料 僅列出查詢的停靠站

  取得指定[日期],[起迄站間]之站間時刻表資料(僅列出查詢的停靠站)
*/
func (a *Client) DailyTrainTimeTableAPIControllerGet32114(params *DailyTrainTimeTableAPIControllerGet32114Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DailyTrainTimeTableAPIControllerGet32114OK, *DailyTrainTimeTableAPIControllerGet32114Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDailyTrainTimeTableAPIControllerGet32114Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "DailyTrainTimeTableApiController_Get_3211_4",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/DailyTrainTimetable/OD/{OriginStationID}/to/{DestinationStationID}/{TrainDate}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DailyTrainTimeTableAPIControllerGet32114Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DailyTrainTimeTableAPIControllerGet32114OK:
		return value, nil, nil
	case *DailyTrainTimeTableAPIControllerGet32114Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DailyTrainTimeTableAPIControllerGet32115 取得指定s 日期 起迄站間 之站間時刻表資料

  取得指定[日期],[起迄站間]之站間時刻表資料
*/
func (a *Client) DailyTrainTimeTableAPIControllerGet32115(params *DailyTrainTimeTableAPIControllerGet32115Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DailyTrainTimeTableAPIControllerGet32115OK, *DailyTrainTimeTableAPIControllerGet32115Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDailyTrainTimeTableAPIControllerGet32115Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "DailyTrainTimeTableApiController_Get_3211_5",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/DailyTrainTimetable/OD/Inclusive/{OriginStationID}/to/{DestinationStationID}/{TrainDate}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DailyTrainTimeTableAPIControllerGet32115Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DailyTrainTimeTableAPIControllerGet32115OK:
		return value, nil, nil
	case *DailyTrainTimeTableAPIControllerGet32115Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GeneralStationTimetableAPIControllerGet3209 取得各站的定期站別時刻表資料s

  取得各站的定期站別時刻表資料
*/
func (a *Client) GeneralStationTimetableAPIControllerGet3209(params *GeneralStationTimetableAPIControllerGet3209Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GeneralStationTimetableAPIControllerGet3209OK, *GeneralStationTimetableAPIControllerGet3209Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGeneralStationTimetableAPIControllerGet3209Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "GeneralStationTimetableApiController_Get_3209",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/GeneralStationTimetable",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GeneralStationTimetableAPIControllerGet3209Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GeneralStationTimetableAPIControllerGet3209OK:
		return value, nil, nil
	case *GeneralStationTimetableAPIControllerGet3209Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GeneralStationTimetableAPIControllerGet32091 取得指定s 車站 的定期站別時刻表資料

  取得指定[車站]的定期站別時刻表資料
*/
func (a *Client) GeneralStationTimetableAPIControllerGet32091(params *GeneralStationTimetableAPIControllerGet32091Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GeneralStationTimetableAPIControllerGet32091OK, *GeneralStationTimetableAPIControllerGet32091Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGeneralStationTimetableAPIControllerGet32091Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "GeneralStationTimetableApiController_Get_3209_1",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/GeneralStationTimetable/Station/{StationID}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GeneralStationTimetableAPIControllerGet32091Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GeneralStationTimetableAPIControllerGet32091OK:
		return value, nil, nil
	case *GeneralStationTimetableAPIControllerGet32091Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GeneralTrainTimetableAPIControllerGet3208 取得所有車次的定期時刻表資料s

  取得所有車次的定期時刻表資料
*/
func (a *Client) GeneralTrainTimetableAPIControllerGet3208(params *GeneralTrainTimetableAPIControllerGet3208Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GeneralTrainTimetableAPIControllerGet3208OK, *GeneralTrainTimetableAPIControllerGet3208Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGeneralTrainTimetableAPIControllerGet3208Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "GeneralTrainTimetableApiController_Get_3208",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/GeneralTrainTimetable",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GeneralTrainTimetableAPIControllerGet3208Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GeneralTrainTimetableAPIControllerGet3208OK:
		return value, nil, nil
	case *GeneralTrainTimetableAPIControllerGet3208Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GeneralTrainTimetableAPIControllerGet32081 取得指定s 車次 的定期時刻表資料

  取得指定[車次]的定期時刻表資料
*/
func (a *Client) GeneralTrainTimetableAPIControllerGet32081(params *GeneralTrainTimetableAPIControllerGet32081Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GeneralTrainTimetableAPIControllerGet32081OK, *GeneralTrainTimetableAPIControllerGet32081Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGeneralTrainTimetableAPIControllerGet32081Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "GeneralTrainTimetableApiController_Get_3208_1",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/GeneralTrainTimetable/TrainNo/{TrainNo}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GeneralTrainTimetableAPIControllerGet32081Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GeneralTrainTimetableAPIControllerGet32081OK:
		return value, nil, nil
	case *GeneralTrainTimetableAPIControllerGet32081Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LineAPIControllerGet3204 取得路線基本資料s

  取得路線基本資料
*/
func (a *Client) LineAPIControllerGet3204(params *LineAPIControllerGet3204Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LineAPIControllerGet3204OK, *LineAPIControllerGet3204Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLineAPIControllerGet3204Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "LineApiController_Get_3204",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/Line",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LineAPIControllerGet3204Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *LineAPIControllerGet3204OK:
		return value, nil, nil
	case *LineAPIControllerGet3204Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LineNetworkAPIControllerGet3221 取得路線網路拓撲基本資料s

  取得路線網路拓撲基本資料
*/
func (a *Client) LineNetworkAPIControllerGet3221(params *LineNetworkAPIControllerGet3221Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LineNetworkAPIControllerGet3221OK, *LineNetworkAPIControllerGet3221Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLineNetworkAPIControllerGet3221Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "LineNetworkApiController_Get_3221",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/LineNetwork",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LineNetworkAPIControllerGet3221Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *LineNetworkAPIControllerGet3221OK:
		return value, nil, nil
	case *LineNetworkAPIControllerGet3221Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LineTransferAPIControllerGet3215 取得內部路線轉乘資料s

  取得內部路線轉乘資料
*/
func (a *Client) LineTransferAPIControllerGet3215(params *LineTransferAPIControllerGet3215Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LineTransferAPIControllerGet3215OK, *LineTransferAPIControllerGet3215Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLineTransferAPIControllerGet3215Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "LineTransferApiController_Get_3215",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/LineTransfer",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LineTransferAPIControllerGet3215Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *LineTransferAPIControllerGet3215OK:
		return value, nil, nil
	case *LineTransferAPIControllerGet3215Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NetworkAPIControllerGet3200 取得臺鐵路網資料s

  取得臺鐵路網資料
*/
func (a *Client) NetworkAPIControllerGet3200(params *NetworkAPIControllerGet3200Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NetworkAPIControllerGet3200OK, *NetworkAPIControllerGet3200Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNetworkAPIControllerGet3200Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "NetworkApiController_Get_3200",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/Network",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NetworkAPIControllerGet3200Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *NetworkAPIControllerGet3200OK:
		return value, nil, nil
	case *NetworkAPIControllerGet3200Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NewsAPIControllerGet3217 取得最新消息s

  取得最新消息
*/
func (a *Client) NewsAPIControllerGet3217(params *NewsAPIControllerGet3217Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NewsAPIControllerGet3217OK, *NewsAPIControllerGet3217Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNewsAPIControllerGet3217Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "NewsApiController_Get_3217",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/News",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NewsAPIControllerGet3217Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *NewsAPIControllerGet3217OK:
		return value, nil, nil
	case *NewsAPIControllerGet3217Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ODFareAPIControllerAPIControllerGet3207 取得票價資料s 檔案

  取得Gzip壓縮檔
*/
func (a *Client) ODFareAPIControllerAPIControllerGet3207(params *ODFareAPIControllerAPIControllerGet3207Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ODFareAPIControllerAPIControllerGet3207OK, *ODFareAPIControllerAPIControllerGet3207Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewODFareAPIControllerAPIControllerGet3207Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "ODFareApiControllerApiController_Get_3207",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/ODFare",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ODFareAPIControllerAPIControllerGet3207Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ODFareAPIControllerAPIControllerGet3207OK:
		return value, nil, nil
	case *ODFareAPIControllerAPIControllerGet3207Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ODFareAPIControllerAPIControllerGet32071 取得指定起迄站間票價資料s

  取得指定起迄站間票價資料
*/
func (a *Client) ODFareAPIControllerAPIControllerGet32071(params *ODFareAPIControllerAPIControllerGet32071Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ODFareAPIControllerAPIControllerGet32071OK, *ODFareAPIControllerAPIControllerGet32071Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewODFareAPIControllerAPIControllerGet32071Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "ODFareApiControllerApiController_Get_3207_1",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/ODFare/{OriginStationID}/to/{DestinationStationID}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ODFareAPIControllerAPIControllerGet32071Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ODFareAPIControllerAPIControllerGet32071OK:
		return value, nil, nil
	case *ODFareAPIControllerAPIControllerGet32071Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OperatorAPIControllerGet3220 取得台鐵營運業者基本資料s

  取得台鐵營運業者基本資料
*/
func (a *Client) OperatorAPIControllerGet3220(params *OperatorAPIControllerGet3220Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OperatorAPIControllerGet3220OK, *OperatorAPIControllerGet3220Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOperatorAPIControllerGet3220Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "OperatorApiController_Get_3220",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/Operator",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OperatorAPIControllerGet3220Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *OperatorAPIControllerGet3220OK:
		return value, nil, nil
	case *OperatorAPIControllerGet3220Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShapeAPIControllerGet3219 取得線型基本資料s

  取得線型基本資料
*/
func (a *Client) ShapeAPIControllerGet3219(params *ShapeAPIControllerGet3219Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShapeAPIControllerGet3219OK, *ShapeAPIControllerGet3219Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShapeAPIControllerGet3219Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "ShapeApiController_Get_3219",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/Shape",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShapeAPIControllerGet3219Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ShapeAPIControllerGet3219OK:
		return value, nil, nil
	case *ShapeAPIControllerGet3219Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SpecificTrainTimetableAPIControllerGet3210 取得所有特殊車次時刻表資料s

  取得所有特殊車次時刻表資料
*/
func (a *Client) SpecificTrainTimetableAPIControllerGet3210(params *SpecificTrainTimetableAPIControllerGet3210Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SpecificTrainTimetableAPIControllerGet3210OK, *SpecificTrainTimetableAPIControllerGet3210Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSpecificTrainTimetableAPIControllerGet3210Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "SpecificTrainTimetableApiController_Get_3210",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/SpecificTrainTimetable",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SpecificTrainTimetableAPIControllerGet3210Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *SpecificTrainTimetableAPIControllerGet3210OK:
		return value, nil, nil
	case *SpecificTrainTimetableAPIControllerGet3210Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SpecificTrainTimetableAPIControllerGet32101 取得指定s 車次 的特殊車次時刻表資料

  取得指定[車次]的特殊車次時刻表資料
*/
func (a *Client) SpecificTrainTimetableAPIControllerGet32101(params *SpecificTrainTimetableAPIControllerGet32101Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SpecificTrainTimetableAPIControllerGet32101OK, *SpecificTrainTimetableAPIControllerGet32101Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSpecificTrainTimetableAPIControllerGet32101Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "SpecificTrainTimetableApiController_Get_3210_1",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/SpecificTrainTimetable/TrainNo/{TrainNo}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SpecificTrainTimetableAPIControllerGet32101Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *SpecificTrainTimetableAPIControllerGet32101OK:
		return value, nil, nil
	case *SpecificTrainTimetableAPIControllerGet32101Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StationAPIControllerGet3201 取得車站基本資料s

  取得車站基本資料
*/
func (a *Client) StationAPIControllerGet3201(params *StationAPIControllerGet3201Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StationAPIControllerGet3201OK, *StationAPIControllerGet3201Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStationAPIControllerGet3201Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "StationApiController_Get_3201",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/Station",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StationAPIControllerGet3201Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *StationAPIControllerGet3201OK:
		return value, nil, nil
	case *StationAPIControllerGet3201Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StationExitAPIControllerGet3202 取得車站出入口基本資料s

  取得車站出入口基本資料
*/
func (a *Client) StationExitAPIControllerGet3202(params *StationExitAPIControllerGet3202Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StationExitAPIControllerGet3202OK, *StationExitAPIControllerGet3202Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStationExitAPIControllerGet3202Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "StationExitApiController_Get_3202",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/StationExit",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StationExitAPIControllerGet3202Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *StationExitAPIControllerGet3202OK:
		return value, nil, nil
	case *StationExitAPIControllerGet3202Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StationFacilityAPIControllerGet3203 取得車站設施資料s

  取得車站設施資料
*/
func (a *Client) StationFacilityAPIControllerGet3203(params *StationFacilityAPIControllerGet3203Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StationFacilityAPIControllerGet3203OK, *StationFacilityAPIControllerGet3203Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStationFacilityAPIControllerGet3203Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "StationFacilityApiController_Get_3203",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/StationFacility",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StationFacilityAPIControllerGet3203Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *StationFacilityAPIControllerGet3203OK:
		return value, nil, nil
	case *StationFacilityAPIControllerGet3203Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StationLiveBoardAPIControllerGet3213 取得列車即時到離站資料s

  取得列車即時到離站資料
*/
func (a *Client) StationLiveBoardAPIControllerGet3213(params *StationLiveBoardAPIControllerGet3213Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StationLiveBoardAPIControllerGet3213OK, *StationLiveBoardAPIControllerGet3213Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStationLiveBoardAPIControllerGet3213Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "StationLiveBoardApiController_Get_3213",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/StationLiveBoard",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StationLiveBoardAPIControllerGet3213Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *StationLiveBoardAPIControllerGet3213OK:
		return value, nil, nil
	case *StationLiveBoardAPIControllerGet3213Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StationLiveBoardAPIControllerGet32131 取得指定s 車站 的列車即時到離站資料

  取得指定[車站]的列車即時到離站資料
*/
func (a *Client) StationLiveBoardAPIControllerGet32131(params *StationLiveBoardAPIControllerGet32131Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StationLiveBoardAPIControllerGet32131OK, *StationLiveBoardAPIControllerGet32131Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStationLiveBoardAPIControllerGet32131Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "StationLiveBoardApiController_Get_3213_1",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/StationLiveBoard/Station/{StationID}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StationLiveBoardAPIControllerGet32131Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *StationLiveBoardAPIControllerGet32131OK:
		return value, nil, nil
	case *StationLiveBoardAPIControllerGet32131Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StationOfLineAPIControllerGet3205 取得路線車站基本資料s

  取得路線車站基本資料
*/
func (a *Client) StationOfLineAPIControllerGet3205(params *StationOfLineAPIControllerGet3205Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StationOfLineAPIControllerGet3205OK, *StationOfLineAPIControllerGet3205Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStationOfLineAPIControllerGet3205Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "StationOfLineApiController_Get_3205",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/StationOfLine",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StationOfLineAPIControllerGet3205Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *StationOfLineAPIControllerGet3205OK:
		return value, nil, nil
	case *StationOfLineAPIControllerGet3205Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StationTransferAPIControllerGet3216 取得車站跨運具轉乘資訊s

  取得車站跨運具轉乘資訊
*/
func (a *Client) StationTransferAPIControllerGet3216(params *StationTransferAPIControllerGet3216Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StationTransferAPIControllerGet3216OK, *StationTransferAPIControllerGet3216Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStationTransferAPIControllerGet3216Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "StationTransferApiController_Get_3216",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/StationTransfer",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StationTransferAPIControllerGet3216Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *StationTransferAPIControllerGet3216OK:
		return value, nil, nil
	case *StationTransferAPIControllerGet3216Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TrainLiveBoardAPIControllerGet3214 取得列車即時位置動態資料s

  取得列車即時位置動態資料

## 使用注意事項
1.  本項資料為「列車目前所在之車站」資料，而更新資料的時機點為「列車離站時」(由 CTC 提供)，其內容之車站資料可能為經過站，也可能為停靠站。
2.  以「145車次」為例，如果車站名稱為「萬華」，表示 145 車次剛從萬華離開，而不是正前往萬華，另萬華站為145 車次之經過站，非停靠站。
3.  提供所有經過站資料是為確保車次的準誤點資料都會是最新的 (尤其是東部幹線普悠瑪、太魯閣車次，因停靠站少，更新頻率低的話會使呈現的準誤點時間誤差過大)。
4.  基於上述原因，本項資料並非僅提供列車停靠站資料，因為這樣提供方式會使列車位置資訊更狹隘，例如:只知道離開台北站，不曉得經過哪一站了，故請加值者使用時多加注意。
*/
func (a *Client) TrainLiveBoardAPIControllerGet3214(params *TrainLiveBoardAPIControllerGet3214Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TrainLiveBoardAPIControllerGet3214OK, *TrainLiveBoardAPIControllerGet3214Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTrainLiveBoardAPIControllerGet3214Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "TrainLiveBoardApiController_Get_3214",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/TrainLiveBoard",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TrainLiveBoardAPIControllerGet3214Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *TrainLiveBoardAPIControllerGet3214OK:
		return value, nil, nil
	case *TrainLiveBoardAPIControllerGet3214Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TrainLiveBoardAPIControllerGet32141 取得指定s 車次 的列車即時位置動態資料

  取得指定[車次]的列車即時位置動態資料

## 使用注意事項
1.  本項資料為「列車目前所在之車站」資料，而更新資料的時機點為「列車離站時」(由 CTC 提供)，其內容之車站資料可能為經過站，也可能為停靠站。
2.  以「145車次」為例，如果車站名稱為「萬華」，表示 145 車次剛從萬華離開，而不是正前往萬華，另萬華站為145 車次之經過站，非停靠站。
3.  提供所有經過站資料是為確保車次的準誤點資料都會是最新的 (尤其是東部幹線普悠瑪、太魯閣車次，因停靠站少，更新頻率低的話會使呈現的準誤點時間誤差過大)。
4.  基於上述原因，本項資料並非僅提供列車停靠站資料，因為這樣提供方式會使列車位置資訊更狹隘，例如:只知道離開台北站，不曉得經過哪一站了，故請加值者使用時多加注意。
*/
func (a *Client) TrainLiveBoardAPIControllerGet32141(params *TrainLiveBoardAPIControllerGet32141Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TrainLiveBoardAPIControllerGet32141OK, *TrainLiveBoardAPIControllerGet32141Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTrainLiveBoardAPIControllerGet32141Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "TrainLiveBoardApiController_Get_3214_1",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/TrainLiveBoard/TrainNo/{TrainNo}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TrainLiveBoardAPIControllerGet32141Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *TrainLiveBoardAPIControllerGet32141OK:
		return value, nil, nil
	case *TrainLiveBoardAPIControllerGet32141Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TrainTypeAPIControllerGet3206 取得所有列車車種資料s

  取得所有列車車種資料
*/
func (a *Client) TrainTypeAPIControllerGet3206(params *TrainTypeAPIControllerGet3206Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TrainTypeAPIControllerGet3206OK, *TrainTypeAPIControllerGet3206Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTrainTypeAPIControllerGet3206Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "TrainTypeApiController_Get_3206",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/TrainType",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TrainTypeAPIControllerGet3206Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *TrainTypeAPIControllerGet3206OK:
		return value, nil, nil
	case *TrainTypeAPIControllerGet3206Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t_r_a: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
