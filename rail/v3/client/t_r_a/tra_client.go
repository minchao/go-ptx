// Code generated by go-swagger; DO NOT EDIT.

package t_r_a

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new t r a API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for t r a API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AlertAPIControllerGet(params *AlertAPIControllerGetParams) (*AlertAPIControllerGetOK, error)

	DailyStationTimeTableAPIControllerGet(params *DailyStationTimeTableAPIControllerGetParams) (*DailyStationTimeTableAPIControllerGetOK, error)

	DailyStationTimeTableAPIControllerGet1(params *DailyStationTimeTableAPIControllerGet1Params) (*DailyStationTimeTableAPIControllerGet1OK, error)

	DailyStationTimeTableAPIControllerGet2(params *DailyStationTimeTableAPIControllerGet2Params) (*DailyStationTimeTableAPIControllerGet2OK, error)

	DailyTrainTimeTableAPIControllerGet(params *DailyTrainTimeTableAPIControllerGetParams) (*DailyTrainTimeTableAPIControllerGetOK, error)

	DailyTrainTimeTableAPIControllerGet1(params *DailyTrainTimeTableAPIControllerGet1Params) (*DailyTrainTimeTableAPIControllerGet1OK, error)

	DailyTrainTimeTableAPIControllerGet2(params *DailyTrainTimeTableAPIControllerGet2Params) (*DailyTrainTimeTableAPIControllerGet2OK, error)

	DailyTrainTimeTableAPIControllerGet3(params *DailyTrainTimeTableAPIControllerGet3Params) (*DailyTrainTimeTableAPIControllerGet3OK, error)

	DailyTrainTimeTableAPIControllerGet4(params *DailyTrainTimeTableAPIControllerGet4Params) (*DailyTrainTimeTableAPIControllerGet4OK, error)

	GeneralStationTimetableAPIControllerGet(params *GeneralStationTimetableAPIControllerGetParams) (*GeneralStationTimetableAPIControllerGetOK, error)

	GeneralStationTimetableAPIControllerGet1(params *GeneralStationTimetableAPIControllerGet1Params) (*GeneralStationTimetableAPIControllerGet1OK, error)

	GeneralTrainTimetableAPIControllerGet(params *GeneralTrainTimetableAPIControllerGetParams) (*GeneralTrainTimetableAPIControllerGetOK, error)

	GeneralTrainTimetableAPIControllerGet1(params *GeneralTrainTimetableAPIControllerGet1Params) (*GeneralTrainTimetableAPIControllerGet1OK, error)

	LineAPIControllerGet(params *LineAPIControllerGetParams) (*LineAPIControllerGetOK, error)

	LineNetworkAPIControllerGet(params *LineNetworkAPIControllerGetParams) (*LineNetworkAPIControllerGetOK, error)

	LineTransferAPIControllerGet(params *LineTransferAPIControllerGetParams) (*LineTransferAPIControllerGetOK, error)

	NetworkAPIControllerGet(params *NetworkAPIControllerGetParams) (*NetworkAPIControllerGetOK, error)

	NewsAPIControllerGet(params *NewsAPIControllerGetParams) (*NewsAPIControllerGetOK, error)

	ODFareAPIControllerAPIControllerGet(params *ODFareAPIControllerAPIControllerGetParams) (*ODFareAPIControllerAPIControllerGetOK, error)

	ODFareAPIControllerAPIControllerGet1(params *ODFareAPIControllerAPIControllerGet1Params) (*ODFareAPIControllerAPIControllerGet1OK, error)

	OperatorAPIControllerGet(params *OperatorAPIControllerGetParams) (*OperatorAPIControllerGetOK, error)

	ShapeAPIControllerGet(params *ShapeAPIControllerGetParams) (*ShapeAPIControllerGetOK, error)

	SpecificTrainTimetableAPIControllerGet(params *SpecificTrainTimetableAPIControllerGetParams) (*SpecificTrainTimetableAPIControllerGetOK, error)

	SpecificTrainTimetableAPIControllerGet1(params *SpecificTrainTimetableAPIControllerGet1Params) (*SpecificTrainTimetableAPIControllerGet1OK, error)

	StationAPIControllerGet(params *StationAPIControllerGetParams) (*StationAPIControllerGetOK, error)

	StationExitAPIControllerGet(params *StationExitAPIControllerGetParams) (*StationExitAPIControllerGetOK, error)

	StationFacilityAPIControllerGet(params *StationFacilityAPIControllerGetParams) (*StationFacilityAPIControllerGetOK, error)

	StationLiveBoardAPIControllerGet(params *StationLiveBoardAPIControllerGetParams) (*StationLiveBoardAPIControllerGetOK, error)

	StationLiveBoardAPIControllerGet1(params *StationLiveBoardAPIControllerGet1Params) (*StationLiveBoardAPIControllerGet1OK, error)

	StationOfLineAPIControllerGet(params *StationOfLineAPIControllerGetParams) (*StationOfLineAPIControllerGetOK, error)

	StationTransferAPIControllerGet(params *StationTransferAPIControllerGetParams) (*StationTransferAPIControllerGetOK, error)

	TrainLiveBoardAPIControllerGet(params *TrainLiveBoardAPIControllerGetParams) (*TrainLiveBoardAPIControllerGetOK, error)

	TrainLiveBoardAPIControllerGet1(params *TrainLiveBoardAPIControllerGet1Params) (*TrainLiveBoardAPIControllerGet1OK, error)

	TrainTypeAPIControllerGet(params *TrainTypeAPIControllerGetParams) (*TrainTypeAPIControllerGetOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AlertAPIControllerGet 取得營運通阻資料s

  取得營運通阻資料
*/
func (a *Client) AlertAPIControllerGet(params *AlertAPIControllerGetParams) (*AlertAPIControllerGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAlertAPIControllerGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AlertApiController_Get",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/Alert",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AlertAPIControllerGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AlertAPIControllerGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AlertApiController_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DailyStationTimeTableAPIControllerGet 取得當天各站站別時刻表資料s

  取得當天各站站別時刻表資料
*/
func (a *Client) DailyStationTimeTableAPIControllerGet(params *DailyStationTimeTableAPIControllerGetParams) (*DailyStationTimeTableAPIControllerGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDailyStationTimeTableAPIControllerGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DailyStationTimeTableApiController_Get",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/DailyStationTimetable/Today",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DailyStationTimeTableAPIControllerGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DailyStationTimeTableAPIControllerGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DailyStationTimeTableApiController_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DailyStationTimeTableAPIControllerGet1 取得當天指定s 車站 的時刻表資料

  取得當天指定[車站]的時刻表資料
*/
func (a *Client) DailyStationTimeTableAPIControllerGet1(params *DailyStationTimeTableAPIControllerGet1Params) (*DailyStationTimeTableAPIControllerGet1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDailyStationTimeTableAPIControllerGet1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DailyStationTimeTableApiController_Get_1",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/DailyStationTimetable/Today/Station/{StationID}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DailyStationTimeTableAPIControllerGet1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DailyStationTimeTableAPIControllerGet1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DailyStationTimeTableApiController_Get_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DailyStationTimeTableAPIControllerGet2 取得各站每日站別時刻表資料s

  取得各站每日站別時刻表資料
*/
func (a *Client) DailyStationTimeTableAPIControllerGet2(params *DailyStationTimeTableAPIControllerGet2Params) (*DailyStationTimeTableAPIControllerGet2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDailyStationTimeTableAPIControllerGet2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DailyStationTimeTableApiController_Get_2",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/DailyStationTimetable/TrainDate/{TrainDate}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DailyStationTimeTableAPIControllerGet2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DailyStationTimeTableAPIControllerGet2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DailyStationTimeTableApiController_Get_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DailyTrainTimeTableAPIControllerGet 取得當天車次時刻表資料s

  取得當天車次時刻表資料
*/
func (a *Client) DailyTrainTimeTableAPIControllerGet(params *DailyTrainTimeTableAPIControllerGetParams) (*DailyTrainTimeTableAPIControllerGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDailyTrainTimeTableAPIControllerGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DailyTrainTimeTableApiController_Get",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/DailyTrainTimetable/Today",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DailyTrainTimeTableAPIControllerGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DailyTrainTimeTableAPIControllerGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DailyTrainTimeTableApiController_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DailyTrainTimeTableAPIControllerGet1 取得當天指定s 車次 的時刻表資料

  取得當天指定[車次]的時刻表資料
*/
func (a *Client) DailyTrainTimeTableAPIControllerGet1(params *DailyTrainTimeTableAPIControllerGet1Params) (*DailyTrainTimeTableAPIControllerGet1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDailyTrainTimeTableAPIControllerGet1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DailyTrainTimeTableApiController_Get_1",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/DailyTrainTimetable/Today/TrainNo/{TrainNo}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DailyTrainTimeTableAPIControllerGet1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DailyTrainTimeTableAPIControllerGet1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DailyTrainTimeTableApiController_Get_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DailyTrainTimeTableAPIControllerGet2 取得指定s 日期 所有車次的時刻表資料

  取得指定[日期]所有車次的時刻表資料(台鐵提供近60天每日時刻表)
*/
func (a *Client) DailyTrainTimeTableAPIControllerGet2(params *DailyTrainTimeTableAPIControllerGet2Params) (*DailyTrainTimeTableAPIControllerGet2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDailyTrainTimeTableAPIControllerGet2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DailyTrainTimeTableApiController_Get_2",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/DailyTrainTimetable/TrainDate/{TrainDate}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DailyTrainTimeTableAPIControllerGet2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DailyTrainTimeTableAPIControllerGet2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DailyTrainTimeTableApiController_Get_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DailyTrainTimeTableAPIControllerGet3 取得指定s 日期 起迄站間 之站間時刻表資料 僅列出查詢的停靠站

  取得指定[日期],[起迄站間]之站間時刻表資料(僅列出查詢的停靠站)
*/
func (a *Client) DailyTrainTimeTableAPIControllerGet3(params *DailyTrainTimeTableAPIControllerGet3Params) (*DailyTrainTimeTableAPIControllerGet3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDailyTrainTimeTableAPIControllerGet3Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DailyTrainTimeTableApiController_Get_3",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/DailyTrainTimetable/OD/{OriginStationID}/to/{DestinationStationID}/{TrainDate}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DailyTrainTimeTableAPIControllerGet3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DailyTrainTimeTableAPIControllerGet3OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DailyTrainTimeTableApiController_Get_3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DailyTrainTimeTableAPIControllerGet4 取得指定s 日期 起迄站間 之站間時刻表資料

  取得指定[日期],[起迄站間]之站間時刻表資料
*/
func (a *Client) DailyTrainTimeTableAPIControllerGet4(params *DailyTrainTimeTableAPIControllerGet4Params) (*DailyTrainTimeTableAPIControllerGet4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDailyTrainTimeTableAPIControllerGet4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DailyTrainTimeTableApiController_Get_4",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/DailyTrainTimetable/OD/Inclusive/{OriginStationID}/to/{DestinationStationID}/{TrainDate}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DailyTrainTimeTableAPIControllerGet4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DailyTrainTimeTableAPIControllerGet4OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DailyTrainTimeTableApiController_Get_4: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GeneralStationTimetableAPIControllerGet 取得各站的定期站別時刻表資料s

  取得各站的定期站別時刻表資料
*/
func (a *Client) GeneralStationTimetableAPIControllerGet(params *GeneralStationTimetableAPIControllerGetParams) (*GeneralStationTimetableAPIControllerGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGeneralStationTimetableAPIControllerGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GeneralStationTimetableApiController_Get",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/GeneralStationTimetable",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GeneralStationTimetableAPIControllerGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GeneralStationTimetableAPIControllerGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GeneralStationTimetableApiController_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GeneralStationTimetableAPIControllerGet1 取得指定s 車站 的定期站別時刻表資料

  取得指定[車站]的定期站別時刻表資料
*/
func (a *Client) GeneralStationTimetableAPIControllerGet1(params *GeneralStationTimetableAPIControllerGet1Params) (*GeneralStationTimetableAPIControllerGet1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGeneralStationTimetableAPIControllerGet1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GeneralStationTimetableApiController_Get_1",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/GeneralStationTimetable/Station/{StationID}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GeneralStationTimetableAPIControllerGet1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GeneralStationTimetableAPIControllerGet1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GeneralStationTimetableApiController_Get_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GeneralTrainTimetableAPIControllerGet 取得所有車次的定期時刻表資料s

  取得所有車次的定期時刻表資料
*/
func (a *Client) GeneralTrainTimetableAPIControllerGet(params *GeneralTrainTimetableAPIControllerGetParams) (*GeneralTrainTimetableAPIControllerGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGeneralTrainTimetableAPIControllerGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GeneralTrainTimetableApiController_Get",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/GeneralTrainTimetable",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GeneralTrainTimetableAPIControllerGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GeneralTrainTimetableAPIControllerGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GeneralTrainTimetableApiController_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GeneralTrainTimetableAPIControllerGet1 取得指定s 車次 的定期時刻表資料

  取得指定[車次]的定期時刻表資料
*/
func (a *Client) GeneralTrainTimetableAPIControllerGet1(params *GeneralTrainTimetableAPIControllerGet1Params) (*GeneralTrainTimetableAPIControllerGet1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGeneralTrainTimetableAPIControllerGet1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GeneralTrainTimetableApiController_Get_1",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/GeneralTrainTimetable/TrainNo/{TrainNo}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GeneralTrainTimetableAPIControllerGet1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GeneralTrainTimetableAPIControllerGet1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GeneralTrainTimetableApiController_Get_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LineAPIControllerGet 取得路線基本資料s

  取得路線基本資料
*/
func (a *Client) LineAPIControllerGet(params *LineAPIControllerGetParams) (*LineAPIControllerGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLineAPIControllerGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LineApiController_Get",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/Line",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LineAPIControllerGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LineAPIControllerGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for LineApiController_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LineNetworkAPIControllerGet 取得路線網路拓撲基本資料s

  取得路線網路拓撲基本資料
*/
func (a *Client) LineNetworkAPIControllerGet(params *LineNetworkAPIControllerGetParams) (*LineNetworkAPIControllerGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLineNetworkAPIControllerGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LineNetworkApiController_Get",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/LineNetwork",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LineNetworkAPIControllerGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LineNetworkAPIControllerGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for LineNetworkApiController_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LineTransferAPIControllerGet 取得內部路線轉乘資料s

  取得內部路線轉乘資料
*/
func (a *Client) LineTransferAPIControllerGet(params *LineTransferAPIControllerGetParams) (*LineTransferAPIControllerGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLineTransferAPIControllerGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LineTransferApiController_Get",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/LineTransfer",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LineTransferAPIControllerGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LineTransferAPIControllerGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for LineTransferApiController_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NetworkAPIControllerGet 取得臺鐵路網資料s

  取得臺鐵路網資料
*/
func (a *Client) NetworkAPIControllerGet(params *NetworkAPIControllerGetParams) (*NetworkAPIControllerGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNetworkAPIControllerGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "NetworkApiController_Get",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/Network",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NetworkAPIControllerGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NetworkAPIControllerGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for NetworkApiController_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NewsAPIControllerGet 取得最新消息s

  取得最新消息
*/
func (a *Client) NewsAPIControllerGet(params *NewsAPIControllerGetParams) (*NewsAPIControllerGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNewsAPIControllerGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "NewsApiController_Get",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/News",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NewsAPIControllerGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NewsAPIControllerGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for NewsApiController_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ODFareAPIControllerAPIControllerGet 取得票價資料s 檔案

  取得Gzip壓縮檔
*/
func (a *Client) ODFareAPIControllerAPIControllerGet(params *ODFareAPIControllerAPIControllerGetParams) (*ODFareAPIControllerAPIControllerGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewODFareAPIControllerAPIControllerGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ODFareApiControllerApiController_Get",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/ODFare",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ODFareAPIControllerAPIControllerGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ODFareAPIControllerAPIControllerGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ODFareApiControllerApiController_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ODFareAPIControllerAPIControllerGet1 取得指定起迄站間票價資料s

  取得指定起迄站間票價資料
*/
func (a *Client) ODFareAPIControllerAPIControllerGet1(params *ODFareAPIControllerAPIControllerGet1Params) (*ODFareAPIControllerAPIControllerGet1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewODFareAPIControllerAPIControllerGet1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ODFareApiControllerApiController_Get_1",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/ODFare/{OriginStationID}/to/{DestinationStationID}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ODFareAPIControllerAPIControllerGet1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ODFareAPIControllerAPIControllerGet1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ODFareApiControllerApiController_Get_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OperatorAPIControllerGet 取得台鐵營運業者基本資料s

  取得台鐵營運業者基本資料
*/
func (a *Client) OperatorAPIControllerGet(params *OperatorAPIControllerGetParams) (*OperatorAPIControllerGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOperatorAPIControllerGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "OperatorApiController_Get",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/Operator",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OperatorAPIControllerGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OperatorAPIControllerGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OperatorApiController_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShapeAPIControllerGet 取得線型基本資料s

  取得線型基本資料
*/
func (a *Client) ShapeAPIControllerGet(params *ShapeAPIControllerGetParams) (*ShapeAPIControllerGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShapeAPIControllerGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ShapeApiController_Get",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/Shape",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShapeAPIControllerGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShapeAPIControllerGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ShapeApiController_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SpecificTrainTimetableAPIControllerGet 取得所有特殊車次時刻表資料s

  取得所有特殊車次時刻表資料
*/
func (a *Client) SpecificTrainTimetableAPIControllerGet(params *SpecificTrainTimetableAPIControllerGetParams) (*SpecificTrainTimetableAPIControllerGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSpecificTrainTimetableAPIControllerGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SpecificTrainTimetableApiController_Get",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/SpecificTrainTimetable",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SpecificTrainTimetableAPIControllerGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SpecificTrainTimetableAPIControllerGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SpecificTrainTimetableApiController_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SpecificTrainTimetableAPIControllerGet1 取得指定s 車次 的特殊車次時刻表資料

  取得指定[車次]的特殊車次時刻表資料
*/
func (a *Client) SpecificTrainTimetableAPIControllerGet1(params *SpecificTrainTimetableAPIControllerGet1Params) (*SpecificTrainTimetableAPIControllerGet1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSpecificTrainTimetableAPIControllerGet1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SpecificTrainTimetableApiController_Get_1",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/SpecificTrainTimetable/TrainNo/{TrainNo}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SpecificTrainTimetableAPIControllerGet1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SpecificTrainTimetableAPIControllerGet1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SpecificTrainTimetableApiController_Get_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StationAPIControllerGet 取得車站基本資料s

  取得車站基本資料
*/
func (a *Client) StationAPIControllerGet(params *StationAPIControllerGetParams) (*StationAPIControllerGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStationAPIControllerGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StationApiController_Get",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/Station",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StationAPIControllerGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StationAPIControllerGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StationApiController_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StationExitAPIControllerGet 取得車站出入口基本資料s

  取得車站出入口基本資料
*/
func (a *Client) StationExitAPIControllerGet(params *StationExitAPIControllerGetParams) (*StationExitAPIControllerGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStationExitAPIControllerGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StationExitApiController_Get",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/StationExit",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StationExitAPIControllerGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StationExitAPIControllerGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StationExitApiController_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StationFacilityAPIControllerGet 取得車站設施資料s

  取得車站設施資料
*/
func (a *Client) StationFacilityAPIControllerGet(params *StationFacilityAPIControllerGetParams) (*StationFacilityAPIControllerGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStationFacilityAPIControllerGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StationFacilityApiController_Get",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/StationFacility",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StationFacilityAPIControllerGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StationFacilityAPIControllerGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StationFacilityApiController_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StationLiveBoardAPIControllerGet 取得列車即時到離站資料s

  取得列車即時到離站資料
*/
func (a *Client) StationLiveBoardAPIControllerGet(params *StationLiveBoardAPIControllerGetParams) (*StationLiveBoardAPIControllerGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStationLiveBoardAPIControllerGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StationLiveBoardApiController_Get",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/StationLiveBoard",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StationLiveBoardAPIControllerGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StationLiveBoardAPIControllerGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StationLiveBoardApiController_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StationLiveBoardAPIControllerGet1 取得指定s 車站 的列車即時到離站資料

  取得指定[車站]的列車即時到離站資料
*/
func (a *Client) StationLiveBoardAPIControllerGet1(params *StationLiveBoardAPIControllerGet1Params) (*StationLiveBoardAPIControllerGet1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStationLiveBoardAPIControllerGet1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StationLiveBoardApiController_Get_1",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/StationLiveBoard/Station/{StationID}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StationLiveBoardAPIControllerGet1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StationLiveBoardAPIControllerGet1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StationLiveBoardApiController_Get_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StationOfLineAPIControllerGet 取得路線車站基本資料s

  取得路線車站基本資料
*/
func (a *Client) StationOfLineAPIControllerGet(params *StationOfLineAPIControllerGetParams) (*StationOfLineAPIControllerGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStationOfLineAPIControllerGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StationOfLineApiController_Get",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/StationOfLine",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StationOfLineAPIControllerGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StationOfLineAPIControllerGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StationOfLineApiController_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StationTransferAPIControllerGet 取得車站跨運具轉乘資訊s

  取得車站跨運具轉乘資訊
*/
func (a *Client) StationTransferAPIControllerGet(params *StationTransferAPIControllerGetParams) (*StationTransferAPIControllerGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStationTransferAPIControllerGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StationTransferApiController_Get",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/StationTransfer",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StationTransferAPIControllerGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StationTransferAPIControllerGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StationTransferApiController_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TrainLiveBoardAPIControllerGet 取得列車即時位置動態資料s

  取得列車即時位置動態資料

## 使用注意事項
1.  本項資料為「列車目前所在之車站」資料，而更新資料的時機點為「列車離站時」(由 CTC 提供)，其內容之車站資料可能為經過站，也可能為停靠站。
2.  以「145車次」為例，如果車站名稱為「萬華」，表示 145 車次剛從萬華離開，而不是正前往萬華，另萬華站為145 車次之經過站，非停靠站。
3.  提供所有經過站資料是為確保車次的準誤點資料都會是最新的 (尤其是東部幹線普悠瑪、太魯閣車次，因停靠站少，更新頻率低的話會使呈現的準誤點時間誤差過大)。
4.  基於上述原因，本項資料並非僅提供列車停靠站資料，因為這樣提供方式會使列車位置資訊更狹隘，例如:只知道離開台北站，不曉得經過哪一站了，故請加值者使用時多加注意。
*/
func (a *Client) TrainLiveBoardAPIControllerGet(params *TrainLiveBoardAPIControllerGetParams) (*TrainLiveBoardAPIControllerGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTrainLiveBoardAPIControllerGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TrainLiveBoardApiController_Get",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/TrainLiveBoard",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TrainLiveBoardAPIControllerGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TrainLiveBoardAPIControllerGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TrainLiveBoardApiController_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TrainLiveBoardAPIControllerGet1 取得指定s 車次 的列車即時位置動態資料

  取得指定[車次]的列車即時位置動態資料

## 使用注意事項
1.  本項資料為「列車目前所在之車站」資料，而更新資料的時機點為「列車離站時」(由 CTC 提供)，其內容之車站資料可能為經過站，也可能為停靠站。
2.  以「145車次」為例，如果車站名稱為「萬華」，表示 145 車次剛從萬華離開，而不是正前往萬華，另萬華站為145 車次之經過站，非停靠站。
3.  提供所有經過站資料是為確保車次的準誤點資料都會是最新的 (尤其是東部幹線普悠瑪、太魯閣車次，因停靠站少，更新頻率低的話會使呈現的準誤點時間誤差過大)。
4.  基於上述原因，本項資料並非僅提供列車停靠站資料，因為這樣提供方式會使列車位置資訊更狹隘，例如:只知道離開台北站，不曉得經過哪一站了，故請加值者使用時多加注意。
*/
func (a *Client) TrainLiveBoardAPIControllerGet1(params *TrainLiveBoardAPIControllerGet1Params) (*TrainLiveBoardAPIControllerGet1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTrainLiveBoardAPIControllerGet1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TrainLiveBoardApiController_Get_1",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/TrainLiveBoard/TrainNo/{TrainNo}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TrainLiveBoardAPIControllerGet1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TrainLiveBoardAPIControllerGet1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TrainLiveBoardApiController_Get_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TrainTypeAPIControllerGet 取得所有列車車種資料s

  取得所有列車車種資料
*/
func (a *Client) TrainTypeAPIControllerGet(params *TrainTypeAPIControllerGetParams) (*TrainTypeAPIControllerGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTrainTypeAPIControllerGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TrainTypeApiController_Get",
		Method:             "GET",
		PathPattern:        "/v3/Rail/TRA/TrainType",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TrainTypeAPIControllerGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TrainTypeAPIControllerGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TrainTypeApiController_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
