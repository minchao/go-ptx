// Code generated by go-swagger; DO NOT EDIT.

package t_r_a

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/minchao/go-ptx/rail/v3/models"
)

// GeneralTrainTimetableAPIControllerGet32081Reader is a Reader for the GeneralTrainTimetableAPIControllerGet32081 structure.
type GeneralTrainTimetableAPIControllerGet32081Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GeneralTrainTimetableAPIControllerGet32081Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGeneralTrainTimetableAPIControllerGet32081OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 299:
		result := NewGeneralTrainTimetableAPIControllerGet32081Status299()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGeneralTrainTimetableAPIControllerGet32081OK creates a GeneralTrainTimetableAPIControllerGet32081OK with default headers values
func NewGeneralTrainTimetableAPIControllerGet32081OK() *GeneralTrainTimetableAPIControllerGet32081OK {
	return &GeneralTrainTimetableAPIControllerGet32081OK{}
}

/* GeneralTrainTimetableAPIControllerGet32081OK describes a response with status code 200, with default header values.

Success
*/
type GeneralTrainTimetableAPIControllerGet32081OK struct {
	Payload *models.PTXAPIRailModelTRAGeneralTrainWrapperPTXServiceDTORailSpecificationV3TRAGeneralTrainTimetable
}

func (o *GeneralTrainTimetableAPIControllerGet32081OK) Error() string {
	return fmt.Sprintf("[GET /v3/Rail/TRA/GeneralTrainTimetable/TrainNo/{TrainNo}][%d] generalTrainTimetableApiControllerGet32081OK  %+v", 200, o.Payload)
}
func (o *GeneralTrainTimetableAPIControllerGet32081OK) GetPayload() *models.PTXAPIRailModelTRAGeneralTrainWrapperPTXServiceDTORailSpecificationV3TRAGeneralTrainTimetable {
	return o.Payload
}

func (o *GeneralTrainTimetableAPIControllerGet32081OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PTXAPIRailModelTRAGeneralTrainWrapperPTXServiceDTORailSpecificationV3TRAGeneralTrainTimetable)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGeneralTrainTimetableAPIControllerGet32081Status299 creates a GeneralTrainTimetableAPIControllerGet32081Status299 with default headers values
func NewGeneralTrainTimetableAPIControllerGet32081Status299() *GeneralTrainTimetableAPIControllerGet32081Status299 {
	return &GeneralTrainTimetableAPIControllerGet32081Status299{}
}

/* GeneralTrainTimetableAPIControllerGet32081Status299 describes a response with status code 299, with default header values.

加入參數'?health=true'即可查詢此API服務的健康狀態
*/
type GeneralTrainTimetableAPIControllerGet32081Status299 struct {
	Payload *models.PTXServiceDTOSharedSpecificationV3BaseDisplayHealth
}

func (o *GeneralTrainTimetableAPIControllerGet32081Status299) Error() string {
	return fmt.Sprintf("[GET /v3/Rail/TRA/GeneralTrainTimetable/TrainNo/{TrainNo}][%d] generalTrainTimetableApiControllerGet32081Status299  %+v", 299, o.Payload)
}
func (o *GeneralTrainTimetableAPIControllerGet32081Status299) GetPayload() *models.PTXServiceDTOSharedSpecificationV3BaseDisplayHealth {
	return o.Payload
}

func (o *GeneralTrainTimetableAPIControllerGet32081Status299) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PTXServiceDTOSharedSpecificationV3BaseDisplayHealth)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
