// Code generated by go-swagger; DO NOT EDIT.

package a_f_r

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new a f r API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for a f r API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	LiteTrainGeneralTrainTimetable3285(params *LiteTrainGeneralTrainTimetable3285Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LiteTrainGeneralTrainTimetable3285OK, *LiteTrainGeneralTrainTimetable3285Status299, error)

	LiteTrainGeneralTrainTimetable32851(params *LiteTrainGeneralTrainTimetable32851Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LiteTrainGeneralTrainTimetable32851OK, *LiteTrainGeneralTrainTimetable32851Status299, error)

	LiteTrainLine3283(params *LiteTrainLine3283Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LiteTrainLine3283OK, *LiteTrainLine3283Status299, error)

	LiteTrainNetwork3281(params *LiteTrainNetwork3281Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LiteTrainNetwork3281OK, *LiteTrainNetwork3281Status299, error)

	LiteTrainNews3291(params *LiteTrainNews3291Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LiteTrainNews3291OK, *LiteTrainNews3291Status299, error)

	LiteTrainODFare3286(params *LiteTrainODFare3286Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LiteTrainODFare3286OK, *LiteTrainODFare3286Status299, error)

	LiteTrainODFare32861(params *LiteTrainODFare32861Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LiteTrainODFare32861OK, *LiteTrainODFare32861Status299, error)

	LiteTrainOperator3284(params *LiteTrainOperator3284Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LiteTrainOperator3284OK, *LiteTrainOperator3284Status299, error)

	LiteTrainRoute3287(params *LiteTrainRoute3287Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LiteTrainRoute3287OK, *LiteTrainRoute3287Status299, error)

	LiteTrainStationOfLine3288(params *LiteTrainStationOfLine3288Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LiteTrainStationOfLine3288OK, *LiteTrainStationOfLine3288Status299, error)

	LiteTrainStationOfRoute3290(params *LiteTrainStationOfRoute3290Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LiteTrainStationOfRoute3290OK, *LiteTrainStationOfRoute3290Status299, error)

	LiteTrainStation3282(params *LiteTrainStation3282Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LiteTrainStation3282OK, *LiteTrainStation3282Status299, error)

	LiteTrainTrainType3289(params *LiteTrainTrainType3289Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LiteTrainTrainType3289OK, *LiteTrainTrainType3289Status299, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  LiteTrainGeneralTrainTimetable3285 取得所有車次的定期時刻表資料s

  取得所有車次的定期時刻表資料
*/
func (a *Client) LiteTrainGeneralTrainTimetable3285(params *LiteTrainGeneralTrainTimetable3285Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LiteTrainGeneralTrainTimetable3285OK, *LiteTrainGeneralTrainTimetable3285Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLiteTrainGeneralTrainTimetable3285Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "LiteTrain_GeneralTrainTimetable_3285",
		Method:             "GET",
		PathPattern:        "/v3/Rail/AFR/GeneralTrainTimetable",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LiteTrainGeneralTrainTimetable3285Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *LiteTrainGeneralTrainTimetable3285OK:
		return value, nil, nil
	case *LiteTrainGeneralTrainTimetable3285Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for a_f_r: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LiteTrainGeneralTrainTimetable32851 取得指定s 車次 的定期時刻表資料

  取得指定[車次]的定期時刻表資料
*/
func (a *Client) LiteTrainGeneralTrainTimetable32851(params *LiteTrainGeneralTrainTimetable32851Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LiteTrainGeneralTrainTimetable32851OK, *LiteTrainGeneralTrainTimetable32851Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLiteTrainGeneralTrainTimetable32851Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "LiteTrain_GeneralTrainTimetable_3285_1",
		Method:             "GET",
		PathPattern:        "/v3/Rail/AFR/GeneralTrainTimetable/TrainNo/{TrainNo}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LiteTrainGeneralTrainTimetable32851Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *LiteTrainGeneralTrainTimetable32851OK:
		return value, nil, nil
	case *LiteTrainGeneralTrainTimetable32851Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for a_f_r: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LiteTrainLine3283 取得路線基本資料s

  取得路線基本資料
*/
func (a *Client) LiteTrainLine3283(params *LiteTrainLine3283Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LiteTrainLine3283OK, *LiteTrainLine3283Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLiteTrainLine3283Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "LiteTrain_Line_3283",
		Method:             "GET",
		PathPattern:        "/v3/Rail/AFR/Line",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LiteTrainLine3283Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *LiteTrainLine3283OK:
		return value, nil, nil
	case *LiteTrainLine3283Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for a_f_r: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LiteTrainNetwork3281 取得路網資料s

  取得路網資料
*/
func (a *Client) LiteTrainNetwork3281(params *LiteTrainNetwork3281Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LiteTrainNetwork3281OK, *LiteTrainNetwork3281Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLiteTrainNetwork3281Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "LiteTrain_Network_3281",
		Method:             "GET",
		PathPattern:        "/v3/Rail/AFR/Network",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LiteTrainNetwork3281Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *LiteTrainNetwork3281OK:
		return value, nil, nil
	case *LiteTrainNetwork3281Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for a_f_r: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LiteTrainNews3291 取得最新消息s

  取得最新消息
*/
func (a *Client) LiteTrainNews3291(params *LiteTrainNews3291Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LiteTrainNews3291OK, *LiteTrainNews3291Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLiteTrainNews3291Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "LiteTrain_News_3291",
		Method:             "GET",
		PathPattern:        "/v3/Rail/AFR/News",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LiteTrainNews3291Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *LiteTrainNews3291OK:
		return value, nil, nil
	case *LiteTrainNews3291Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for a_f_r: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LiteTrainODFare3286 取得所有票價資料s

  取得所有票價資料
*/
func (a *Client) LiteTrainODFare3286(params *LiteTrainODFare3286Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LiteTrainODFare3286OK, *LiteTrainODFare3286Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLiteTrainODFare3286Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "LiteTrain_ODFare_3286",
		Method:             "GET",
		PathPattern:        "/v3/Rail/AFR/ODFare",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LiteTrainODFare3286Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *LiteTrainODFare3286OK:
		return value, nil, nil
	case *LiteTrainODFare3286Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for a_f_r: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LiteTrainODFare32861 取得指定起迄站間票價資料s

  取得指定起迄站間票價資料
*/
func (a *Client) LiteTrainODFare32861(params *LiteTrainODFare32861Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LiteTrainODFare32861OK, *LiteTrainODFare32861Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLiteTrainODFare32861Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "LiteTrain_ODFare_3286_1",
		Method:             "GET",
		PathPattern:        "/v3/Rail/AFR/ODFare/{OriginStationID}/to/{DestinationStationID}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LiteTrainODFare32861Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *LiteTrainODFare32861OK:
		return value, nil, nil
	case *LiteTrainODFare32861Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for a_f_r: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LiteTrainOperator3284 取得營運業者基本資料s

  取得營運業者基本資料
*/
func (a *Client) LiteTrainOperator3284(params *LiteTrainOperator3284Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LiteTrainOperator3284OK, *LiteTrainOperator3284Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLiteTrainOperator3284Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "LiteTrain_Operator_3284",
		Method:             "GET",
		PathPattern:        "/v3/Rail/AFR/Operator",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LiteTrainOperator3284Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *LiteTrainOperator3284OK:
		return value, nil, nil
	case *LiteTrainOperator3284Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for a_f_r: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LiteTrainRoute3287 取得營運路線基本資料s

  取得營運路線基本資料
*/
func (a *Client) LiteTrainRoute3287(params *LiteTrainRoute3287Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LiteTrainRoute3287OK, *LiteTrainRoute3287Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLiteTrainRoute3287Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "LiteTrain_Route_3287",
		Method:             "GET",
		PathPattern:        "/v3/Rail/AFR/Route",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LiteTrainRoute3287Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *LiteTrainRoute3287OK:
		return value, nil, nil
	case *LiteTrainRoute3287Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for a_f_r: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LiteTrainStationOfLine3288 取得路線車站基本資料s

  取得路線車站基本資料
*/
func (a *Client) LiteTrainStationOfLine3288(params *LiteTrainStationOfLine3288Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LiteTrainStationOfLine3288OK, *LiteTrainStationOfLine3288Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLiteTrainStationOfLine3288Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "LiteTrain_StationOfLine_3288",
		Method:             "GET",
		PathPattern:        "/v3/Rail/AFR/StationOfLine",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LiteTrainStationOfLine3288Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *LiteTrainStationOfLine3288OK:
		return value, nil, nil
	case *LiteTrainStationOfLine3288Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for a_f_r: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LiteTrainStationOfRoute3290 取得營運路線車站基本資料s

  取得營運路線車站基本資料
*/
func (a *Client) LiteTrainStationOfRoute3290(params *LiteTrainStationOfRoute3290Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LiteTrainStationOfRoute3290OK, *LiteTrainStationOfRoute3290Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLiteTrainStationOfRoute3290Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "LiteTrain_StationOfRoute_3290",
		Method:             "GET",
		PathPattern:        "/v3/Rail/AFR/StationOfRoute",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LiteTrainStationOfRoute3290Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *LiteTrainStationOfRoute3290OK:
		return value, nil, nil
	case *LiteTrainStationOfRoute3290Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for a_f_r: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LiteTrainStation3282 取得車站基本資料s

  取得車站基本資料
*/
func (a *Client) LiteTrainStation3282(params *LiteTrainStation3282Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LiteTrainStation3282OK, *LiteTrainStation3282Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLiteTrainStation3282Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "LiteTrain_Station_3282",
		Method:             "GET",
		PathPattern:        "/v3/Rail/AFR/Station",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LiteTrainStation3282Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *LiteTrainStation3282OK:
		return value, nil, nil
	case *LiteTrainStation3282Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for a_f_r: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LiteTrainTrainType3289 取得所有列車車種資料s

  取得所有列車車種資料
*/
func (a *Client) LiteTrainTrainType3289(params *LiteTrainTrainType3289Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LiteTrainTrainType3289OK, *LiteTrainTrainType3289Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLiteTrainTrainType3289Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "LiteTrain_TrainType_3289",
		Method:             "GET",
		PathPattern:        "/v3/Rail/AFR/TrainType",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LiteTrainTrainType3289Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *LiteTrainTrainType3289OK:
		return value, nil, nil
	case *LiteTrainTrainType3289Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for a_f_r: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
