// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceDTOVersion3RailTRADailyTrainTimeTableTrainInfo TrainInfo
// swagger:model Service.DTO.Version3.Rail.TRA.DailyTrainTimeTable.TrainInfo
type ServiceDTOVersion3RailTRADailyTrainTimeTableTrainInfo struct {

	// integer
	//
	// 是否人車同行班次(置於攜車袋之自行車各級列車均可乘車) : [0:'否',1:'是']
	// Required: true
	BikeFlag *int32 `json:"BikeFlag"`

	// integer
	//
	// 是否設有哺(集)乳室車廂 : [0:'否',1:'是']
	// Required: true
	BreastFeedFlag *int32 `json:"BreastFeedFlag"`

	// integer
	//
	// 是否提供小汽車上火車服務 : [0:'否',1:'是']
	CarFlag int32 `json:"CarFlag,omitempty"`

	// integer
	//
	// 是否提供小汽車上火車服務 : [0:'否',1:'是']
	// Required: true
	DailyFlag *int32 `json:"DailyFlag"`

	// integer
	//
	// 是否提供餐車服務 : [0:'否',1:'是']
	// Required: true
	DiningFlag *int32 `json:"DiningFlag"`

	// integer
	//
	// 行駛方向 : [0:'順行',1:'逆行']
	// Required: true
	Direction *int32 `json:"Direction"`

	// 車次之終點站車站代號
	EndingStationID string `json:"EndingStationID,omitempty"`

	// NameType
	//
	// 車次之終點站車站名稱
	// Required: true
	EndingStationName *ServiceDTOVersion3BaseNameType `json:"EndingStationName"`

	// integer
	//
	// 是否為加班車 : [0:'否',1:'是']
	// Required: true
	ExtraTrainFlag *int32 `json:"ExtraTrainFlag"`

	// 附註說明
	Note string `json:"Note,omitempty"`

	// 跨夜車站代碼
	OverNightStationID string `json:"OverNightStationID,omitempty"`

	// integer
	//
	// 是否提供行李服務 : [0:'否',1:'是']
	// Required: true
	PackageServiceFlag *int32 `json:"PackageServiceFlag"`

	// 營運路線代碼
	// Required: true
	RouteID *string `json:"RouteID"`

	// 車次之起始站車站代號
	StartingStationID string `json:"StartingStationID,omitempty"`

	// NameType
	//
	// 車次之起始站車站名稱
	// Required: true
	StartingStationName *ServiceDTOVersion3BaseNameType `json:"StartingStationName"`

	// 車次代碼
	// Required: true
	TrainNo *string `json:"TrainNo"`

	// 車種簡碼 = ['1: 太魯閣', '2: 普悠瑪', '3: 自強', '4: 莒光', '5: 復興', '6: 區間', '7: 普快', '10: 區間快']
	TrainTypeCode string `json:"TrainTypeCode,omitempty"`

	// 車種代嗎
	TrainTypeID string `json:"TrainTypeID,omitempty"`

	// NameType
	//
	// 車種名稱
	// Required: true
	TrainTypeName *ServiceDTOVersion3BaseNameType `json:"TrainTypeName"`

	// 車次之目的地方向描述
	TripHeadSign string `json:"TripHeadSign,omitempty"`

	// integer
	//
	// 山海線類型 : [0:'不經山海線',1:'山線',2:'海線']
	TripLine int32 `json:"TripLine,omitempty"`

	// integer
	//
	// 是否設身障旅客專用座位車 : [0:'否',1:'是']
	// Required: true
	WheelChairFlag *int32 `json:"WheelChairFlag"`
}

// Validate validates this service d t o version3 rail t r a daily train time table train info
func (m *ServiceDTOVersion3RailTRADailyTrainTimeTableTrainInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBikeFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBreastFeedFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDailyFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiningFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndingStationName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtraTrainFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageServiceFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouteID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartingStationName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrainNo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrainTypeName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWheelChairFlag(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceDTOVersion3RailTRADailyTrainTimeTableTrainInfo) validateBikeFlag(formats strfmt.Registry) error {

	if err := validate.Required("BikeFlag", "body", m.BikeFlag); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3RailTRADailyTrainTimeTableTrainInfo) validateBreastFeedFlag(formats strfmt.Registry) error {

	if err := validate.Required("BreastFeedFlag", "body", m.BreastFeedFlag); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3RailTRADailyTrainTimeTableTrainInfo) validateDailyFlag(formats strfmt.Registry) error {

	if err := validate.Required("DailyFlag", "body", m.DailyFlag); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3RailTRADailyTrainTimeTableTrainInfo) validateDiningFlag(formats strfmt.Registry) error {

	if err := validate.Required("DiningFlag", "body", m.DiningFlag); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3RailTRADailyTrainTimeTableTrainInfo) validateDirection(formats strfmt.Registry) error {

	if err := validate.Required("Direction", "body", m.Direction); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3RailTRADailyTrainTimeTableTrainInfo) validateEndingStationName(formats strfmt.Registry) error {

	if err := validate.Required("EndingStationName", "body", m.EndingStationName); err != nil {
		return err
	}

	if m.EndingStationName != nil {
		if err := m.EndingStationName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EndingStationName")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion3RailTRADailyTrainTimeTableTrainInfo) validateExtraTrainFlag(formats strfmt.Registry) error {

	if err := validate.Required("ExtraTrainFlag", "body", m.ExtraTrainFlag); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3RailTRADailyTrainTimeTableTrainInfo) validatePackageServiceFlag(formats strfmt.Registry) error {

	if err := validate.Required("PackageServiceFlag", "body", m.PackageServiceFlag); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3RailTRADailyTrainTimeTableTrainInfo) validateRouteID(formats strfmt.Registry) error {

	if err := validate.Required("RouteID", "body", m.RouteID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3RailTRADailyTrainTimeTableTrainInfo) validateStartingStationName(formats strfmt.Registry) error {

	if err := validate.Required("StartingStationName", "body", m.StartingStationName); err != nil {
		return err
	}

	if m.StartingStationName != nil {
		if err := m.StartingStationName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("StartingStationName")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion3RailTRADailyTrainTimeTableTrainInfo) validateTrainNo(formats strfmt.Registry) error {

	if err := validate.Required("TrainNo", "body", m.TrainNo); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3RailTRADailyTrainTimeTableTrainInfo) validateTrainTypeName(formats strfmt.Registry) error {

	if err := validate.Required("TrainTypeName", "body", m.TrainTypeName); err != nil {
		return err
	}

	if m.TrainTypeName != nil {
		if err := m.TrainTypeName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TrainTypeName")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion3RailTRADailyTrainTimeTableTrainInfo) validateWheelChairFlag(formats strfmt.Registry) error {

	if err := validate.Required("WheelChairFlag", "body", m.WheelChairFlag); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceDTOVersion3RailTRADailyTrainTimeTableTrainInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceDTOVersion3RailTRADailyTrainTimeTableTrainInfo) UnmarshalBinary(b []byte) error {
	var res ServiceDTOVersion3RailTRADailyTrainTimeTableTrainInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
