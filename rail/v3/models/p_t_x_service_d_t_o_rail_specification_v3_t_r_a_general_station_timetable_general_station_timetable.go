// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PTXServiceDTORailSpecificationV3TRAGeneralStationTimetableGeneralStationTimetable GeneralStationTimetable
//
// 車站站別時刻表資料型別
//
// swagger:model PTX.Service.DTO.Rail.Specification.V3.TRA.GeneralStationTimetable.GeneralStationTimetable
type PTXServiceDTORailSpecificationV3TRAGeneralStationTimetableGeneralStationTimetable struct {

	// Int32
	//
	// 行駛方向 : [0:'順行',1:'逆行']
	// Required: true
	Direction *int64 `json:"Direction"`

	// String
	//
	// 營運路線代碼
	RouteID string `json:"RouteID,omitempty" xml:"String,omitempty"`

	// ServiceDay
	//
	// 服務日型態
	// Required: true
	ServiceDay struct {
		PTXServiceDTORailSpecificationV3TRAGeneralStationTimetableServiceDay
	} `json:"ServiceDay" xml:"ServiceDay"`

	// String
	//
	// 車站代碼
	// Required: true
	StationID *string `json:"StationID" xml:"String"`

	// NameType
	//
	// 車站名稱
	StationName struct {
		PTXServiceDTOSharedSpecificationV3BaseNameType
	} `json:"StationName,omitempty" xml:"NameType,omitempty"`

	// Array
	//
	// 車次停靠站資料
	// Required: true
	Timetables []*PTXServiceDTORailSpecificationV3TRAGeneralStationTimetableTimetable "json:\"Timetables\" xml:\"List`1\""
}

// Validate validates this p t x service d t o rail specification v3 t r a general station timetable general station timetable
func (m *PTXServiceDTORailSpecificationV3TRAGeneralStationTimetableGeneralStationTimetable) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceDay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStationName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimetables(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTORailSpecificationV3TRAGeneralStationTimetableGeneralStationTimetable) validateDirection(formats strfmt.Registry) error {

	if err := validate.Required("Direction", "body", m.Direction); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV3TRAGeneralStationTimetableGeneralStationTimetable) validateServiceDay(formats strfmt.Registry) error {

	return nil
}

func (m *PTXServiceDTORailSpecificationV3TRAGeneralStationTimetableGeneralStationTimetable) validateStationID(formats strfmt.Registry) error {

	if err := validate.Required("StationID", "body", m.StationID); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV3TRAGeneralStationTimetableGeneralStationTimetable) validateStationName(formats strfmt.Registry) error {
	if swag.IsZero(m.StationName) { // not required
		return nil
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV3TRAGeneralStationTimetableGeneralStationTimetable) validateTimetables(formats strfmt.Registry) error {

	if err := validate.Required("Timetables", "body", m.Timetables); err != nil {
		return err
	}

	for i := 0; i < len(m.Timetables); i++ {
		if swag.IsZero(m.Timetables[i]) { // not required
			continue
		}

		if m.Timetables[i] != nil {
			if err := m.Timetables[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Timetables" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Timetables" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this p t x service d t o rail specification v3 t r a general station timetable general station timetable based on the context it is used
func (m *PTXServiceDTORailSpecificationV3TRAGeneralStationTimetableGeneralStationTimetable) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateServiceDay(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStationName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimetables(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTORailSpecificationV3TRAGeneralStationTimetableGeneralStationTimetable) contextValidateServiceDay(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *PTXServiceDTORailSpecificationV3TRAGeneralStationTimetableGeneralStationTimetable) contextValidateStationName(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *PTXServiceDTORailSpecificationV3TRAGeneralStationTimetableGeneralStationTimetable) contextValidateTimetables(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Timetables); i++ {

		if m.Timetables[i] != nil {
			if err := m.Timetables[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Timetables" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Timetables" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PTXServiceDTORailSpecificationV3TRAGeneralStationTimetableGeneralStationTimetable) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PTXServiceDTORailSpecificationV3TRAGeneralStationTimetableGeneralStationTimetable) UnmarshalBinary(b []byte) error {
	var res PTXServiceDTORailSpecificationV3TRAGeneralStationTimetableGeneralStationTimetable
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
