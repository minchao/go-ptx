// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceDTOVersion3RailTRALineTransfer LineTransfer
//
// 台鐵路線站間轉乘基本資料
//
// swagger:model Service.DTO.Version3.Rail.TRA.LineTransfer
type ServiceDTOVersion3RailTRALineTransfer struct {

	// 路線間轉乘(起)之路線代碼
	// Required: true
	FromLineID *string `json:"FromLineID"`

	// NameType
	//
	// 路線間轉乘(起)之路線名稱
	// Required: true
	FromLineName *ServiceDTOVersion3BaseNameType `json:"FromLineName"`

	// 路線間轉乘(起)之車站代碼
	// Required: true
	FromStationID *string `json:"FromStationID"`

	// NameType
	//
	// 路線間轉乘(起)之車站名稱
	// Required: true
	FromStationName *ServiceDTOVersion3BaseNameType `json:"FromStationName"`

	// 轉乘耗時參考時間(分)
	// Required: true
	MinTransferTime *int32 `json:"MinTransferTime"`

	// 路線間轉乘(迄)之路線代碼
	// Required: true
	ToLineID *string `json:"ToLineID"`

	// NameType
	//
	// 路線間轉乘(迄)之路線名稱
	// Required: true
	ToLineName *ServiceDTOVersion3BaseNameType `json:"ToLineName"`

	// 路線間轉乘(迄)之車站代碼
	// Required: true
	ToStationID *string `json:"ToStationID"`

	// NameType
	//
	// 路線間轉乘(迄)之車站名稱
	// Required: true
	ToStationName *ServiceDTOVersion3BaseNameType `json:"ToStationName"`

	// 轉乘方式文字描述
	// Required: true
	TransferDescription *string `json:"TransferDescription"`
}

// Validate validates this service d t o version3 rail t r a line transfer
func (m *ServiceDTOVersion3RailTRALineTransfer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFromLineID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFromLineName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFromStationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFromStationName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinTransferTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToLineID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToLineName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToStationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToStationName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransferDescription(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceDTOVersion3RailTRALineTransfer) validateFromLineID(formats strfmt.Registry) error {

	if err := validate.Required("FromLineID", "body", m.FromLineID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3RailTRALineTransfer) validateFromLineName(formats strfmt.Registry) error {

	if err := validate.Required("FromLineName", "body", m.FromLineName); err != nil {
		return err
	}

	if m.FromLineName != nil {
		if err := m.FromLineName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FromLineName")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion3RailTRALineTransfer) validateFromStationID(formats strfmt.Registry) error {

	if err := validate.Required("FromStationID", "body", m.FromStationID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3RailTRALineTransfer) validateFromStationName(formats strfmt.Registry) error {

	if err := validate.Required("FromStationName", "body", m.FromStationName); err != nil {
		return err
	}

	if m.FromStationName != nil {
		if err := m.FromStationName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FromStationName")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion3RailTRALineTransfer) validateMinTransferTime(formats strfmt.Registry) error {

	if err := validate.Required("MinTransferTime", "body", m.MinTransferTime); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3RailTRALineTransfer) validateToLineID(formats strfmt.Registry) error {

	if err := validate.Required("ToLineID", "body", m.ToLineID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3RailTRALineTransfer) validateToLineName(formats strfmt.Registry) error {

	if err := validate.Required("ToLineName", "body", m.ToLineName); err != nil {
		return err
	}

	if m.ToLineName != nil {
		if err := m.ToLineName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ToLineName")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion3RailTRALineTransfer) validateToStationID(formats strfmt.Registry) error {

	if err := validate.Required("ToStationID", "body", m.ToStationID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3RailTRALineTransfer) validateToStationName(formats strfmt.Registry) error {

	if err := validate.Required("ToStationName", "body", m.ToStationName); err != nil {
		return err
	}

	if m.ToStationName != nil {
		if err := m.ToStationName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ToStationName")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion3RailTRALineTransfer) validateTransferDescription(formats strfmt.Registry) error {

	if err := validate.Required("TransferDescription", "body", m.TransferDescription); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceDTOVersion3RailTRALineTransfer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceDTOVersion3RailTRALineTransfer) UnmarshalBinary(b []byte) error {
	var res ServiceDTOVersion3RailTRALineTransfer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
