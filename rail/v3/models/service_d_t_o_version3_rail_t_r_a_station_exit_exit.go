// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceDTOVersion3RailTRAStationExitExit Exit
//
// 車站出入口
//
// swagger:model Service.DTO.Version3.Rail.TRA.StationExit.Exit
type ServiceDTOVersion3RailTRAStationExitExit struct {

	// 出入口所在道路路段方位角
	Bearing string `json:"Bearing,omitempty"`

	// 是否有電梯
	Elevator bool `json:"Elevator,omitempty"`

	// 是否有電扶梯 = ['0: 沒有', '1: 雙向皆有', '2: 出站有', '3: 入站有']
	// Required: true
	Escalator *int32 `json:"Escalator"`

	// 出入口代碼
	// Required: true
	ExitID *string `json:"ExitID"`

	// NameType
	//
	// 出入口名稱
	// Required: true
	ExitName *ServiceDTOVersion3BaseNameType `json:"ExitName"`

	// PointType
	//
	// 出入口座標
	// Required: true
	ExitPosition *ServiceDTOVersion3BasePointType `json:"ExitPosition"`

	// 地址描述
	LocationDescription string `json:"LocationDescription,omitempty"`

	// 出入口所在道路名稱
	RoadName string `json:"RoadName,omitempty"`

	// 是否有樓梯
	Stair bool `json:"Stair,omitempty"`
}

// Validate validates this service d t o version3 rail t r a station exit exit
func (m *ServiceDTOVersion3RailTRAStationExitExit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEscalator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExitID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExitName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExitPosition(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceDTOVersion3RailTRAStationExitExit) validateEscalator(formats strfmt.Registry) error {

	if err := validate.Required("Escalator", "body", m.Escalator); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3RailTRAStationExitExit) validateExitID(formats strfmt.Registry) error {

	if err := validate.Required("ExitID", "body", m.ExitID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3RailTRAStationExitExit) validateExitName(formats strfmt.Registry) error {

	if err := validate.Required("ExitName", "body", m.ExitName); err != nil {
		return err
	}

	if m.ExitName != nil {
		if err := m.ExitName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ExitName")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion3RailTRAStationExitExit) validateExitPosition(formats strfmt.Registry) error {

	if err := validate.Required("ExitPosition", "body", m.ExitPosition); err != nil {
		return err
	}

	if m.ExitPosition != nil {
		if err := m.ExitPosition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ExitPosition")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceDTOVersion3RailTRAStationExitExit) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceDTOVersion3RailTRAStationExitExit) UnmarshalBinary(b []byte) error {
	var res ServiceDTOVersion3RailTRAStationExitExit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
