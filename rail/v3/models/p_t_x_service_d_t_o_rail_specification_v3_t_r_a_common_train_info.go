// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PTXServiceDTORailSpecificationV3TRACommonTrainInfo TrainInfo
//
// 臺鐵車次定期資料型別(時刻表用)
//
// swagger:model PTX.Service.DTO.Rail.Specification.V3.TRA.Common.TrainInfo
type PTXServiceDTORailSpecificationV3TRACommonTrainInfo struct {

	// integer
	//
	// 是否人車同行班次(置於攜車袋之自行車各級列車均可乘車) : [0:'否',1:'是']
	// Required: true
	BikeFlag *int32 `json:"BikeFlag"`

	// integer
	//
	// 是否設有哺(集)乳室車廂 : [0:'否',1:'是']
	// Required: true
	BreastFeedFlag *int32 `json:"BreastFeedFlag"`

	// integer
	//
	// 是否提供小客車 : [0:'否',1:'是']
	// Required: true
	CarFlag *int32 `json:"CarFlag"`

	// integer
	//
	// 是否為每日行駛 : [0:'否',1:'是']
	// Required: true
	DailyFlag *int32 `json:"DailyFlag"`

	// integer
	//
	// 是否提供訂便當服務 : [0:'否',1:'是']
	// Required: true
	DiningFlag *int32 `json:"DiningFlag"`

	// integer
	//
	// 行駛方向 : [0:'順行',1:'逆行']
	// Required: true
	Direction *int32 `json:"Direction"`

	// String
	//
	// 列車終點車站代號
	EndingStationID string `json:"EndingStationID,omitempty"`

	// NameType
	//
	// 列車終點車站名稱
	EndingStationName struct {
		PTXServiceDTOSharedSpecificationV3BaseNameType
	} `json:"EndingStationName,omitempty"`

	// integer
	//
	// 是否為加班車 : [0:'否',1:'是']
	// Required: true
	ExtraTrainFlag *int32 `json:"ExtraTrainFlag"`

	// String
	//
	// 附註說明
	Note string `json:"Note,omitempty"`

	// String
	//
	// 跨夜車站代碼
	OverNightStationID string `json:"OverNightStationID,omitempty"`

	// integer
	//
	// 是否提供行李服務 : [0:'否',1:'是']
	// Required: true
	PackageServiceFlag *int32 `json:"PackageServiceFlag"`

	// String
	//
	// 營運路線代碼
	RouteID string `json:"RouteID,omitempty"`

	// String
	//
	// 列車起點車站代號
	StartingStationID string `json:"StartingStationID,omitempty"`

	// NameType
	//
	// 列車起點車站名稱
	StartingStationName struct {
		PTXServiceDTOSharedSpecificationV3BaseNameType
	} `json:"StartingStationName,omitempty"`

	// String
	//
	// 車次代碼
	// Required: true
	TrainNo *string `json:"TrainNo"`

	// String
	//
	// 車種簡碼 = ['1: 太魯閣', '2: 普悠瑪', '3: 自強', '4: 莒光', '5: 復興', '6: 區間', '7: 普快', '10: 區間快']
	TrainTypeCode string `json:"TrainTypeCode,omitempty"`

	// String
	//
	// 車種代嗎
	TrainTypeID string `json:"TrainTypeID,omitempty"`

	// NameType
	//
	// 車種名稱
	TrainTypeName struct {
		PTXServiceDTOSharedSpecificationV3BaseNameType
	} `json:"TrainTypeName,omitempty"`

	// String
	//
	// 車次之目的地方向描述
	TripHeadSign string `json:"TripHeadSign,omitempty"`

	// integer
	//
	// 山海線類型 : [0:'不經山海線',1:'山線',2:'海線',3:'成追線']
	TripLine int32 `json:"TripLine,omitempty"`

	// integer
	//
	// 是否設身障旅客專用座位車 : [0:'否',1:'是']
	// Required: true
	WheelChairFlag *int32 `json:"WheelChairFlag"`
}

// Validate validates this p t x service d t o rail specification v3 t r a common train info
func (m *PTXServiceDTORailSpecificationV3TRACommonTrainInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBikeFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBreastFeedFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCarFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDailyFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiningFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndingStationName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtraTrainFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageServiceFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartingStationName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrainNo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrainTypeName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWheelChairFlag(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTORailSpecificationV3TRACommonTrainInfo) validateBikeFlag(formats strfmt.Registry) error {

	if err := validate.Required("BikeFlag", "body", m.BikeFlag); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV3TRACommonTrainInfo) validateBreastFeedFlag(formats strfmt.Registry) error {

	if err := validate.Required("BreastFeedFlag", "body", m.BreastFeedFlag); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV3TRACommonTrainInfo) validateCarFlag(formats strfmt.Registry) error {

	if err := validate.Required("CarFlag", "body", m.CarFlag); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV3TRACommonTrainInfo) validateDailyFlag(formats strfmt.Registry) error {

	if err := validate.Required("DailyFlag", "body", m.DailyFlag); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV3TRACommonTrainInfo) validateDiningFlag(formats strfmt.Registry) error {

	if err := validate.Required("DiningFlag", "body", m.DiningFlag); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV3TRACommonTrainInfo) validateDirection(formats strfmt.Registry) error {

	if err := validate.Required("Direction", "body", m.Direction); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV3TRACommonTrainInfo) validateEndingStationName(formats strfmt.Registry) error {

	if swag.IsZero(m.EndingStationName) { // not required
		return nil
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV3TRACommonTrainInfo) validateExtraTrainFlag(formats strfmt.Registry) error {

	if err := validate.Required("ExtraTrainFlag", "body", m.ExtraTrainFlag); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV3TRACommonTrainInfo) validatePackageServiceFlag(formats strfmt.Registry) error {

	if err := validate.Required("PackageServiceFlag", "body", m.PackageServiceFlag); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV3TRACommonTrainInfo) validateStartingStationName(formats strfmt.Registry) error {

	if swag.IsZero(m.StartingStationName) { // not required
		return nil
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV3TRACommonTrainInfo) validateTrainNo(formats strfmt.Registry) error {

	if err := validate.Required("TrainNo", "body", m.TrainNo); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV3TRACommonTrainInfo) validateTrainTypeName(formats strfmt.Registry) error {

	if swag.IsZero(m.TrainTypeName) { // not required
		return nil
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV3TRACommonTrainInfo) validateWheelChairFlag(formats strfmt.Registry) error {

	if err := validate.Required("WheelChairFlag", "body", m.WheelChairFlag); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PTXServiceDTORailSpecificationV3TRACommonTrainInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PTXServiceDTORailSpecificationV3TRACommonTrainInfo) UnmarshalBinary(b []byte) error {
	var res PTXServiceDTORailSpecificationV3TRACommonTrainInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
