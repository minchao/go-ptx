// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PTXServiceDTORailSpecificationV3TRANetworkNetwork Network
//
// 臺鐵路網資料
//
// swagger:model PTX.Service.DTO.Rail.Specification.V3.TRA.Network.Network
type PTXServiceDTORailSpecificationV3TRANetworkNetwork struct {

	// Array
	//
	// 臺鐵路線資訊
	// Required: true
	Lines []*PTXServiceDTORailSpecificationV3TRANetworkLine `json:"Lines"`

	// String
	//
	// 臺鐵路網代碼
	// Required: true
	NetworkID *string `json:"NetworkID"`

	// MapNameType
	//
	// 臺鐵路網圖網址URL
	// Required: true
	NetworkMapURL struct {
		PTXServiceDTORailSpecificationV3TRANetworkMapNameType
	} `json:"NetworkMapURL"`

	// NameType
	//
	// 臺鐵路網名稱
	// Required: true
	NetworkName struct {
		PTXServiceDTOSharedSpecificationV3BaseNameType
	} `json:"NetworkName"`

	// String
	//
	// 營運業者代碼
	// Required: true
	OperatorCode *string `json:"OperatorCode"`

	// NameType
	//
	// 營運業者名稱
	// Required: true
	OperatorName struct {
		PTXServiceDTOSharedSpecificationV3BaseNameType
	} `json:"OperatorName"`
}

// Validate validates this p t x service d t o rail specification v3 t r a network network
func (m *PTXServiceDTORailSpecificationV3TRANetworkNetwork) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLines(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkMapURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperatorCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperatorName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTORailSpecificationV3TRANetworkNetwork) validateLines(formats strfmt.Registry) error {

	if err := validate.Required("Lines", "body", m.Lines); err != nil {
		return err
	}

	for i := 0; i < len(m.Lines); i++ {
		if swag.IsZero(m.Lines[i]) { // not required
			continue
		}

		if m.Lines[i] != nil {
			if err := m.Lines[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Lines" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV3TRANetworkNetwork) validateNetworkID(formats strfmt.Registry) error {

	if err := validate.Required("NetworkID", "body", m.NetworkID); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV3TRANetworkNetwork) validateNetworkMapURL(formats strfmt.Registry) error {

	return nil
}

func (m *PTXServiceDTORailSpecificationV3TRANetworkNetwork) validateNetworkName(formats strfmt.Registry) error {

	return nil
}

func (m *PTXServiceDTORailSpecificationV3TRANetworkNetwork) validateOperatorCode(formats strfmt.Registry) error {

	if err := validate.Required("OperatorCode", "body", m.OperatorCode); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV3TRANetworkNetwork) validateOperatorName(formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *PTXServiceDTORailSpecificationV3TRANetworkNetwork) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PTXServiceDTORailSpecificationV3TRANetworkNetwork) UnmarshalBinary(b []byte) error {
	var res PTXServiceDTORailSpecificationV3TRANetworkNetwork
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
