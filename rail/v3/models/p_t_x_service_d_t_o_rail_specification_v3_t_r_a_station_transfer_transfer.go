// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PTXServiceDTORailSpecificationV3TRAStationTransferTransfer Transfer
//
// 跨運具轉乘資訊
//
// swagger:model PTX.Service.DTO.Rail.Specification.V3.TRA.StationTransfer.Transfer
type PTXServiceDTORailSpecificationV3TRAStationTransferTransfer struct {

	// Array
	//
	// 航空運具轉乘資訊
	// Required: true
	AirportTransfers []*PTXServiceDTORailSpecificationV3TRAStationTransferAirportTransfer `json:"AirportTransfers"`

	// Array
	//
	// 公共自行車轉乘資訊
	// Required: true
	BikeTransfers []*PTXServiceDTORailSpecificationV3TRAStationTransferBikeTransfer `json:"BikeTransfers"`

	// Array
	//
	// 公車運具轉乘資訊
	// Required: true
	BusTransfers []*PTXServiceDTORailSpecificationV3TRAStationTransferBusTransfer `json:"BusTransfers"`

	// String
	//
	// 出口代碼
	// Required: true
	ExitID *string `json:"ExitID"`

	// String
	//
	// 出口名稱
	// Required: true
	ExitName *string `json:"ExitName"`

	// Array
	//
	// 航運轉乘資訊
	// Required: true
	FerryTransfers []*PTXServiceDTORailSpecificationV3TRAStationTransferFerryTransfer `json:"FerryTransfers"`

	// Array
	//
	// 停車場轉乘資訊
	// Required: true
	ParkingTransfers []*PTXServiceDTORailSpecificationV3TRAStationTransferParkingTransfer `json:"ParkingTransfers"`

	// Array
	//
	// 軌道轉乘資訊
	// Required: true
	RailTransfers []*PTXServiceDTORailSpecificationV3TRAStationTransferRailTransfer `json:"RailTransfers"`

	// Array
	//
	// 計程車轉乘資訊
	// Required: true
	TaxiTransfers []*PTXServiceDTORailSpecificationV3TRAStationTransferTaxiTransfer `json:"TaxiTransfers"`
}

// Validate validates this p t x service d t o rail specification v3 t r a station transfer transfer
func (m *PTXServiceDTORailSpecificationV3TRAStationTransferTransfer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAirportTransfers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBikeTransfers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBusTransfers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExitID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExitName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFerryTransfers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParkingTransfers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRailTransfers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaxiTransfers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTORailSpecificationV3TRAStationTransferTransfer) validateAirportTransfers(formats strfmt.Registry) error {

	if err := validate.Required("AirportTransfers", "body", m.AirportTransfers); err != nil {
		return err
	}

	for i := 0; i < len(m.AirportTransfers); i++ {
		if swag.IsZero(m.AirportTransfers[i]) { // not required
			continue
		}

		if m.AirportTransfers[i] != nil {
			if err := m.AirportTransfers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AirportTransfers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV3TRAStationTransferTransfer) validateBikeTransfers(formats strfmt.Registry) error {

	if err := validate.Required("BikeTransfers", "body", m.BikeTransfers); err != nil {
		return err
	}

	for i := 0; i < len(m.BikeTransfers); i++ {
		if swag.IsZero(m.BikeTransfers[i]) { // not required
			continue
		}

		if m.BikeTransfers[i] != nil {
			if err := m.BikeTransfers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("BikeTransfers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV3TRAStationTransferTransfer) validateBusTransfers(formats strfmt.Registry) error {

	if err := validate.Required("BusTransfers", "body", m.BusTransfers); err != nil {
		return err
	}

	for i := 0; i < len(m.BusTransfers); i++ {
		if swag.IsZero(m.BusTransfers[i]) { // not required
			continue
		}

		if m.BusTransfers[i] != nil {
			if err := m.BusTransfers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("BusTransfers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV3TRAStationTransferTransfer) validateExitID(formats strfmt.Registry) error {

	if err := validate.Required("ExitID", "body", m.ExitID); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV3TRAStationTransferTransfer) validateExitName(formats strfmt.Registry) error {

	if err := validate.Required("ExitName", "body", m.ExitName); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV3TRAStationTransferTransfer) validateFerryTransfers(formats strfmt.Registry) error {

	if err := validate.Required("FerryTransfers", "body", m.FerryTransfers); err != nil {
		return err
	}

	for i := 0; i < len(m.FerryTransfers); i++ {
		if swag.IsZero(m.FerryTransfers[i]) { // not required
			continue
		}

		if m.FerryTransfers[i] != nil {
			if err := m.FerryTransfers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("FerryTransfers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV3TRAStationTransferTransfer) validateParkingTransfers(formats strfmt.Registry) error {

	if err := validate.Required("ParkingTransfers", "body", m.ParkingTransfers); err != nil {
		return err
	}

	for i := 0; i < len(m.ParkingTransfers); i++ {
		if swag.IsZero(m.ParkingTransfers[i]) { // not required
			continue
		}

		if m.ParkingTransfers[i] != nil {
			if err := m.ParkingTransfers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ParkingTransfers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV3TRAStationTransferTransfer) validateRailTransfers(formats strfmt.Registry) error {

	if err := validate.Required("RailTransfers", "body", m.RailTransfers); err != nil {
		return err
	}

	for i := 0; i < len(m.RailTransfers); i++ {
		if swag.IsZero(m.RailTransfers[i]) { // not required
			continue
		}

		if m.RailTransfers[i] != nil {
			if err := m.RailTransfers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("RailTransfers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV3TRAStationTransferTransfer) validateTaxiTransfers(formats strfmt.Registry) error {

	if err := validate.Required("TaxiTransfers", "body", m.TaxiTransfers); err != nil {
		return err
	}

	for i := 0; i < len(m.TaxiTransfers); i++ {
		if swag.IsZero(m.TaxiTransfers[i]) { // not required
			continue
		}

		if m.TaxiTransfers[i] != nil {
			if err := m.TaxiTransfers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("TaxiTransfers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PTXServiceDTORailSpecificationV3TRAStationTransferTransfer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PTXServiceDTORailSpecificationV3TRAStationTransferTransfer) UnmarshalBinary(b []byte) error {
	var res PTXServiceDTORailSpecificationV3TRAStationTransferTransfer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
