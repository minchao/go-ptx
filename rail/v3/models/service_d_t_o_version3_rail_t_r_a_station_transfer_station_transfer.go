// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceDTOVersion3RailTRAStationTransferStationTransfer StationTransfer
//
// 車站跨運具轉乘資訊
//
// swagger:model Service.DTO.Version3.Rail.TRA.StationTransfer.StationTransfer
type ServiceDTOVersion3RailTRAStationTransferStationTransfer struct {

	// 外部轉乘地圖簡圖連結資訊
	// Required: true
	ExteriorMapURLs []*ServiceDTOVersion3RailTRAStationTransferMapURL `json:"ExteriorMapURLs"`

	// 車站內部地圖簡圖連結資訊
	// Required: true
	InteriorMapURLs []*ServiceDTOVersion3RailTRAStationTransferMapURL `json:"InteriorMapURLs"`

	// 車站代碼
	// Required: true
	StationID *string `json:"StationID"`

	// NameType
	//
	// 車站名稱
	// Required: true
	StationName *ServiceDTOVersion3BaseNameType `json:"StationName"`

	// 轉乘文字描述
	TransferDescription string `json:"TransferDescription,omitempty"`

	// 跨運具轉乘資訊
	// Required: true
	Transfers []*ServiceDTOVersion3RailTRAStationTransferTransfer `json:"Transfers"`
}

// Validate validates this service d t o version3 rail t r a station transfer station transfer
func (m *ServiceDTOVersion3RailTRAStationTransferStationTransfer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExteriorMapURLs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInteriorMapURLs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStationName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransfers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceDTOVersion3RailTRAStationTransferStationTransfer) validateExteriorMapURLs(formats strfmt.Registry) error {

	if err := validate.Required("ExteriorMapURLs", "body", m.ExteriorMapURLs); err != nil {
		return err
	}

	for i := 0; i < len(m.ExteriorMapURLs); i++ {
		if swag.IsZero(m.ExteriorMapURLs[i]) { // not required
			continue
		}

		if m.ExteriorMapURLs[i] != nil {
			if err := m.ExteriorMapURLs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ExteriorMapURLs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceDTOVersion3RailTRAStationTransferStationTransfer) validateInteriorMapURLs(formats strfmt.Registry) error {

	if err := validate.Required("InteriorMapURLs", "body", m.InteriorMapURLs); err != nil {
		return err
	}

	for i := 0; i < len(m.InteriorMapURLs); i++ {
		if swag.IsZero(m.InteriorMapURLs[i]) { // not required
			continue
		}

		if m.InteriorMapURLs[i] != nil {
			if err := m.InteriorMapURLs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("InteriorMapURLs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceDTOVersion3RailTRAStationTransferStationTransfer) validateStationID(formats strfmt.Registry) error {

	if err := validate.Required("StationID", "body", m.StationID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3RailTRAStationTransferStationTransfer) validateStationName(formats strfmt.Registry) error {

	if err := validate.Required("StationName", "body", m.StationName); err != nil {
		return err
	}

	if m.StationName != nil {
		if err := m.StationName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("StationName")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion3RailTRAStationTransferStationTransfer) validateTransfers(formats strfmt.Registry) error {

	if err := validate.Required("Transfers", "body", m.Transfers); err != nil {
		return err
	}

	for i := 0; i < len(m.Transfers); i++ {
		if swag.IsZero(m.Transfers[i]) { // not required
			continue
		}

		if m.Transfers[i] != nil {
			if err := m.Transfers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Transfers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceDTOVersion3RailTRAStationTransferStationTransfer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceDTOVersion3RailTRAStationTransferStationTransfer) UnmarshalBinary(b []byte) error {
	var res ServiceDTOVersion3RailTRAStationTransferStationTransfer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
