// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceDTOVersion3RailTRACommonServiceDay ServiceDay
//
// 台鐵服務日型態
// swagger:model Service.DTO.Version3.Rail.TRA.Common.ServiceDay
type ServiceDTOVersion3RailTRACommonServiceDay struct {

	// 假日後一日是否營運
	// Required: true
	// Enum: [0 1]
	DayAfterHoliday *int64 `json:"DayAfterHoliday"`

	// 假日前一日是否營運
	// Required: true
	// Enum: [0 1]
	DayBeforeHoliday *int64 `json:"DayBeforeHoliday"`

	// 星期五是否營運
	// Required: true
	// Enum: [0 1]
	Friday *int64 `json:"Friday"`

	// 星期一是否營運
	// Required: true
	// Enum: [0 1]
	Monday *int64 `json:"Monday"`

	// 國定假日是否營運
	// Required: true
	// Enum: [0 1]
	NationalHolidays *int64 `json:"NationalHolidays"`

	// 星期六是否營運
	// Required: true
	// Enum: [0 1]
	Saturday *int64 `json:"Saturday"`

	// 服務日標籤
	ServiceTag string `json:"ServiceTag,omitempty"`

	// 星期日是否營運
	// Required: true
	// Enum: [0 1]
	Sunday *int64 `json:"Sunday"`

	// 星期四是否營運
	// Required: true
	// Enum: [0 1]
	Thursday *int64 `json:"Thursday"`

	// 星期二是否營運
	// Required: true
	// Enum: [0 1]
	Tuesday *int64 `json:"Tuesday"`

	// 颱風停止上班上課期間營運營運
	// Required: true
	// Enum: [0 1]
	TyphoonDay *int64 `json:"TyphoonDay"`

	// 星期三是否營運
	// Required: true
	// Enum: [0 1]
	Wednesday *int64 `json:"Wednesday"`
}

// Validate validates this service d t o version3 rail t r a common service day
func (m *ServiceDTOVersion3RailTRACommonServiceDay) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDayAfterHoliday(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDayBeforeHoliday(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFriday(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMonday(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNationalHolidays(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSaturday(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSunday(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThursday(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTuesday(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTyphoonDay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWednesday(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var serviceDTOVersion3RailTRACommonServiceDayTypeDayAfterHolidayPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[0,1]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceDTOVersion3RailTRACommonServiceDayTypeDayAfterHolidayPropEnum = append(serviceDTOVersion3RailTRACommonServiceDayTypeDayAfterHolidayPropEnum, v)
	}
}

// prop value enum
func (m *ServiceDTOVersion3RailTRACommonServiceDay) validateDayAfterHolidayEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, serviceDTOVersion3RailTRACommonServiceDayTypeDayAfterHolidayPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceDTOVersion3RailTRACommonServiceDay) validateDayAfterHoliday(formats strfmt.Registry) error {

	if err := validate.Required("DayAfterHoliday", "body", m.DayAfterHoliday); err != nil {
		return err
	}

	// value enum
	if err := m.validateDayAfterHolidayEnum("DayAfterHoliday", "body", *m.DayAfterHoliday); err != nil {
		return err
	}

	return nil
}

var serviceDTOVersion3RailTRACommonServiceDayTypeDayBeforeHolidayPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[0,1]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceDTOVersion3RailTRACommonServiceDayTypeDayBeforeHolidayPropEnum = append(serviceDTOVersion3RailTRACommonServiceDayTypeDayBeforeHolidayPropEnum, v)
	}
}

// prop value enum
func (m *ServiceDTOVersion3RailTRACommonServiceDay) validateDayBeforeHolidayEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, serviceDTOVersion3RailTRACommonServiceDayTypeDayBeforeHolidayPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceDTOVersion3RailTRACommonServiceDay) validateDayBeforeHoliday(formats strfmt.Registry) error {

	if err := validate.Required("DayBeforeHoliday", "body", m.DayBeforeHoliday); err != nil {
		return err
	}

	// value enum
	if err := m.validateDayBeforeHolidayEnum("DayBeforeHoliday", "body", *m.DayBeforeHoliday); err != nil {
		return err
	}

	return nil
}

var serviceDTOVersion3RailTRACommonServiceDayTypeFridayPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[0,1]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceDTOVersion3RailTRACommonServiceDayTypeFridayPropEnum = append(serviceDTOVersion3RailTRACommonServiceDayTypeFridayPropEnum, v)
	}
}

// prop value enum
func (m *ServiceDTOVersion3RailTRACommonServiceDay) validateFridayEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, serviceDTOVersion3RailTRACommonServiceDayTypeFridayPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceDTOVersion3RailTRACommonServiceDay) validateFriday(formats strfmt.Registry) error {

	if err := validate.Required("Friday", "body", m.Friday); err != nil {
		return err
	}

	// value enum
	if err := m.validateFridayEnum("Friday", "body", *m.Friday); err != nil {
		return err
	}

	return nil
}

var serviceDTOVersion3RailTRACommonServiceDayTypeMondayPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[0,1]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceDTOVersion3RailTRACommonServiceDayTypeMondayPropEnum = append(serviceDTOVersion3RailTRACommonServiceDayTypeMondayPropEnum, v)
	}
}

// prop value enum
func (m *ServiceDTOVersion3RailTRACommonServiceDay) validateMondayEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, serviceDTOVersion3RailTRACommonServiceDayTypeMondayPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceDTOVersion3RailTRACommonServiceDay) validateMonday(formats strfmt.Registry) error {

	if err := validate.Required("Monday", "body", m.Monday); err != nil {
		return err
	}

	// value enum
	if err := m.validateMondayEnum("Monday", "body", *m.Monday); err != nil {
		return err
	}

	return nil
}

var serviceDTOVersion3RailTRACommonServiceDayTypeNationalHolidaysPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[0,1]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceDTOVersion3RailTRACommonServiceDayTypeNationalHolidaysPropEnum = append(serviceDTOVersion3RailTRACommonServiceDayTypeNationalHolidaysPropEnum, v)
	}
}

// prop value enum
func (m *ServiceDTOVersion3RailTRACommonServiceDay) validateNationalHolidaysEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, serviceDTOVersion3RailTRACommonServiceDayTypeNationalHolidaysPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceDTOVersion3RailTRACommonServiceDay) validateNationalHolidays(formats strfmt.Registry) error {

	if err := validate.Required("NationalHolidays", "body", m.NationalHolidays); err != nil {
		return err
	}

	// value enum
	if err := m.validateNationalHolidaysEnum("NationalHolidays", "body", *m.NationalHolidays); err != nil {
		return err
	}

	return nil
}

var serviceDTOVersion3RailTRACommonServiceDayTypeSaturdayPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[0,1]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceDTOVersion3RailTRACommonServiceDayTypeSaturdayPropEnum = append(serviceDTOVersion3RailTRACommonServiceDayTypeSaturdayPropEnum, v)
	}
}

// prop value enum
func (m *ServiceDTOVersion3RailTRACommonServiceDay) validateSaturdayEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, serviceDTOVersion3RailTRACommonServiceDayTypeSaturdayPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceDTOVersion3RailTRACommonServiceDay) validateSaturday(formats strfmt.Registry) error {

	if err := validate.Required("Saturday", "body", m.Saturday); err != nil {
		return err
	}

	// value enum
	if err := m.validateSaturdayEnum("Saturday", "body", *m.Saturday); err != nil {
		return err
	}

	return nil
}

var serviceDTOVersion3RailTRACommonServiceDayTypeSundayPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[0,1]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceDTOVersion3RailTRACommonServiceDayTypeSundayPropEnum = append(serviceDTOVersion3RailTRACommonServiceDayTypeSundayPropEnum, v)
	}
}

// prop value enum
func (m *ServiceDTOVersion3RailTRACommonServiceDay) validateSundayEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, serviceDTOVersion3RailTRACommonServiceDayTypeSundayPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceDTOVersion3RailTRACommonServiceDay) validateSunday(formats strfmt.Registry) error {

	if err := validate.Required("Sunday", "body", m.Sunday); err != nil {
		return err
	}

	// value enum
	if err := m.validateSundayEnum("Sunday", "body", *m.Sunday); err != nil {
		return err
	}

	return nil
}

var serviceDTOVersion3RailTRACommonServiceDayTypeThursdayPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[0,1]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceDTOVersion3RailTRACommonServiceDayTypeThursdayPropEnum = append(serviceDTOVersion3RailTRACommonServiceDayTypeThursdayPropEnum, v)
	}
}

// prop value enum
func (m *ServiceDTOVersion3RailTRACommonServiceDay) validateThursdayEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, serviceDTOVersion3RailTRACommonServiceDayTypeThursdayPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceDTOVersion3RailTRACommonServiceDay) validateThursday(formats strfmt.Registry) error {

	if err := validate.Required("Thursday", "body", m.Thursday); err != nil {
		return err
	}

	// value enum
	if err := m.validateThursdayEnum("Thursday", "body", *m.Thursday); err != nil {
		return err
	}

	return nil
}

var serviceDTOVersion3RailTRACommonServiceDayTypeTuesdayPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[0,1]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceDTOVersion3RailTRACommonServiceDayTypeTuesdayPropEnum = append(serviceDTOVersion3RailTRACommonServiceDayTypeTuesdayPropEnum, v)
	}
}

// prop value enum
func (m *ServiceDTOVersion3RailTRACommonServiceDay) validateTuesdayEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, serviceDTOVersion3RailTRACommonServiceDayTypeTuesdayPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceDTOVersion3RailTRACommonServiceDay) validateTuesday(formats strfmt.Registry) error {

	if err := validate.Required("Tuesday", "body", m.Tuesday); err != nil {
		return err
	}

	// value enum
	if err := m.validateTuesdayEnum("Tuesday", "body", *m.Tuesday); err != nil {
		return err
	}

	return nil
}

var serviceDTOVersion3RailTRACommonServiceDayTypeTyphoonDayPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[0,1]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceDTOVersion3RailTRACommonServiceDayTypeTyphoonDayPropEnum = append(serviceDTOVersion3RailTRACommonServiceDayTypeTyphoonDayPropEnum, v)
	}
}

// prop value enum
func (m *ServiceDTOVersion3RailTRACommonServiceDay) validateTyphoonDayEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, serviceDTOVersion3RailTRACommonServiceDayTypeTyphoonDayPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceDTOVersion3RailTRACommonServiceDay) validateTyphoonDay(formats strfmt.Registry) error {

	if err := validate.Required("TyphoonDay", "body", m.TyphoonDay); err != nil {
		return err
	}

	// value enum
	if err := m.validateTyphoonDayEnum("TyphoonDay", "body", *m.TyphoonDay); err != nil {
		return err
	}

	return nil
}

var serviceDTOVersion3RailTRACommonServiceDayTypeWednesdayPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[0,1]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceDTOVersion3RailTRACommonServiceDayTypeWednesdayPropEnum = append(serviceDTOVersion3RailTRACommonServiceDayTypeWednesdayPropEnum, v)
	}
}

// prop value enum
func (m *ServiceDTOVersion3RailTRACommonServiceDay) validateWednesdayEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, serviceDTOVersion3RailTRACommonServiceDayTypeWednesdayPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceDTOVersion3RailTRACommonServiceDay) validateWednesday(formats strfmt.Registry) error {

	if err := validate.Required("Wednesday", "body", m.Wednesday); err != nil {
		return err
	}

	// value enum
	if err := m.validateWednesdayEnum("Wednesday", "body", *m.Wednesday); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceDTOVersion3RailTRACommonServiceDay) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceDTOVersion3RailTRACommonServiceDay) UnmarshalBinary(b []byte) error {
	var res ServiceDTOVersion3RailTRACommonServiceDay
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
