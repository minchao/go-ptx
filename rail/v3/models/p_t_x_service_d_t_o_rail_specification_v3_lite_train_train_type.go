// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PTXServiceDTORailSpecificationV3LiteTrainTrainType TrainType
//
// 小火車列車車種資料
//
// swagger:model PTX.Service.DTO.Rail.Specification.V3.LiteTrain.TrainType
type PTXServiceDTORailSpecificationV3LiteTrainTrainType struct {

	// String
	//
	// 車種簡碼 = ['1: 中興號', '2: 區間', '3: 主題式列車', '5: 阿里山號', '6: 祝客', '7: 祝客(祝山線)', '8: 檜木車廂']
	// Required: true
	TrainTypeCode *string `json:"TrainTypeCode" xml:"TrainTypeCode"`

	// String
	//
	// 列車車種代碼
	// Required: true
	TrainTypeID *string `json:"TrainTypeID" xml:"TrainTypeID"`

	// NameType
	//
	// 列車車種名稱
	// Required: true
	TrainTypeName struct {
		PTXServiceDTOSharedSpecificationV3BaseNameType
	} `json:"TrainTypeName" xml:"NameType"`
}

// Validate validates this p t x service d t o rail specification v3 lite train train type
func (m *PTXServiceDTORailSpecificationV3LiteTrainTrainType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTrainTypeCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrainTypeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrainTypeName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTORailSpecificationV3LiteTrainTrainType) validateTrainTypeCode(formats strfmt.Registry) error {

	if err := validate.Required("TrainTypeCode", "body", m.TrainTypeCode); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV3LiteTrainTrainType) validateTrainTypeID(formats strfmt.Registry) error {

	if err := validate.Required("TrainTypeID", "body", m.TrainTypeID); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV3LiteTrainTrainType) validateTrainTypeName(formats strfmt.Registry) error {

	return nil
}

// ContextValidate validate this p t x service d t o rail specification v3 lite train train type based on the context it is used
func (m *PTXServiceDTORailSpecificationV3LiteTrainTrainType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTrainTypeName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTORailSpecificationV3LiteTrainTrainType) contextValidateTrainTypeName(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *PTXServiceDTORailSpecificationV3LiteTrainTrainType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PTXServiceDTORailSpecificationV3LiteTrainTrainType) UnmarshalBinary(b []byte) error {
	var res PTXServiceDTORailSpecificationV3LiteTrainTrainType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
