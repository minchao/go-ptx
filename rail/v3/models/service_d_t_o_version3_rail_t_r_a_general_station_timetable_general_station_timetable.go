// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceDTOVersion3RailTRAGeneralStationTimetableGeneralStationTimetable GeneralStationTimetable
//
// 台鐵車站站別時刻表資料型別
// swagger:model Service.DTO.Version3.Rail.TRA.GeneralStationTimetable.GeneralStationTimetable
type ServiceDTOVersion3RailTRAGeneralStationTimetableGeneralStationTimetable struct {

	// 目的站車站代號
	DestinationStationID string `json:"DestinationStationID,omitempty"`

	// NameType
	//
	// 目的站車站
	DestinationStationName *ServiceDTOVersion3BaseNameType `json:"DestinationStationName,omitempty"`

	// 行駛方向
	// Required: true
	// Enum: [0: 順行 1: 逆行]
	Direction *string `json:"Direction"`

	// 營運路線代碼
	RouteID string `json:"RouteID,omitempty"`

	// ServiceDay
	//
	// 服務日型態
	// Required: true
	ServiceDay *ServiceDTOVersion3RailTRAGeneralStationTimetableServiceDay `json:"ServiceDay"`

	// 車站代碼
	// Required: true
	StationID *string `json:"StationID"`

	// NameType
	//
	// 車站名稱
	StationName *ServiceDTOVersion3BaseNameType `json:"StationName,omitempty"`

	// 車次停靠站資料
	// Required: true
	Timetables []*ServiceDTOVersion3RailTRAGeneralStationTimetableTimetable `json:"Timetables"`
}

// Validate validates this service d t o version3 rail t r a general station timetable general station timetable
func (m *ServiceDTOVersion3RailTRAGeneralStationTimetableGeneralStationTimetable) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDestinationStationName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceDay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStationName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimetables(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceDTOVersion3RailTRAGeneralStationTimetableGeneralStationTimetable) validateDestinationStationName(formats strfmt.Registry) error {

	if swag.IsZero(m.DestinationStationName) { // not required
		return nil
	}

	if m.DestinationStationName != nil {
		if err := m.DestinationStationName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DestinationStationName")
			}
			return err
		}
	}

	return nil
}

var serviceDTOVersion3RailTRAGeneralStationTimetableGeneralStationTimetableTypeDirectionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["0: 順行","1: 逆行"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceDTOVersion3RailTRAGeneralStationTimetableGeneralStationTimetableTypeDirectionPropEnum = append(serviceDTOVersion3RailTRAGeneralStationTimetableGeneralStationTimetableTypeDirectionPropEnum, v)
	}
}

const (

	// ServiceDTOVersion3RailTRAGeneralStationTimetableGeneralStationTimetableDirectionNr0順行 captures enum value "0: 順行"
	ServiceDTOVersion3RailTRAGeneralStationTimetableGeneralStationTimetableDirectionNr0順行 string = "0: 順行"

	// ServiceDTOVersion3RailTRAGeneralStationTimetableGeneralStationTimetableDirectionNr1逆行 captures enum value "1: 逆行"
	ServiceDTOVersion3RailTRAGeneralStationTimetableGeneralStationTimetableDirectionNr1逆行 string = "1: 逆行"
)

// prop value enum
func (m *ServiceDTOVersion3RailTRAGeneralStationTimetableGeneralStationTimetable) validateDirectionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, serviceDTOVersion3RailTRAGeneralStationTimetableGeneralStationTimetableTypeDirectionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceDTOVersion3RailTRAGeneralStationTimetableGeneralStationTimetable) validateDirection(formats strfmt.Registry) error {

	if err := validate.Required("Direction", "body", m.Direction); err != nil {
		return err
	}

	// value enum
	if err := m.validateDirectionEnum("Direction", "body", *m.Direction); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3RailTRAGeneralStationTimetableGeneralStationTimetable) validateServiceDay(formats strfmt.Registry) error {

	if err := validate.Required("ServiceDay", "body", m.ServiceDay); err != nil {
		return err
	}

	if m.ServiceDay != nil {
		if err := m.ServiceDay.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ServiceDay")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion3RailTRAGeneralStationTimetableGeneralStationTimetable) validateStationID(formats strfmt.Registry) error {

	if err := validate.Required("StationID", "body", m.StationID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3RailTRAGeneralStationTimetableGeneralStationTimetable) validateStationName(formats strfmt.Registry) error {

	if swag.IsZero(m.StationName) { // not required
		return nil
	}

	if m.StationName != nil {
		if err := m.StationName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("StationName")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion3RailTRAGeneralStationTimetableGeneralStationTimetable) validateTimetables(formats strfmt.Registry) error {

	if err := validate.Required("Timetables", "body", m.Timetables); err != nil {
		return err
	}

	for i := 0; i < len(m.Timetables); i++ {
		if swag.IsZero(m.Timetables[i]) { // not required
			continue
		}

		if m.Timetables[i] != nil {
			if err := m.Timetables[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Timetables" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceDTOVersion3RailTRAGeneralStationTimetableGeneralStationTimetable) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceDTOVersion3RailTRAGeneralStationTimetableGeneralStationTimetable) UnmarshalBinary(b []byte) error {
	var res ServiceDTOVersion3RailTRAGeneralStationTimetableGeneralStationTimetable
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
