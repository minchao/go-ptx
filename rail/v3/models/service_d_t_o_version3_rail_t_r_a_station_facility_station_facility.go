// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceDTOVersion3RailTRAStationFacilityStationFacility StationFacility
//
// 車站設施資訊
//
// swagger:model Service.DTO.Version3.Rail.TRA.StationFacility.StationFacility
type ServiceDTOVersion3RailTRAStationFacilityStationFacility struct {

	// 飲水機位置資訊
	// Required: true
	DrinkingFountains []*ServiceDTOVersion3RailTRAStationFacilityFacilityInfo `json:"DrinkingFountains"`

	// 無障礙電梯位置資訊
	// Required: true
	Elevators []*ServiceDTOVersion3RailTRAStationFacilityFacilityInfo `json:"Elevators"`

	// 車站出入口
	// Required: true
	FacilityMapURLs []*ServiceDTOVersion3RailTRAStationFacilityFacilityMapURL `json:"FacilityMapURLs"`

	// 詢問處位置資訊
	// Required: true
	InformationSpots []*ServiceDTOVersion3RailTRAStationFacilityFacilityInfo `json:"InformationSpots"`

	// 車站代碼
	// Required: true
	StationID *string `json:"StationID"`

	// NameType
	//
	// 車站名稱
	// Required: true
	StationName *ServiceDTOVersion3BaseNameType `json:"StationName"`

	// 廁所位置資訊
	// Required: true
	Toilets []*ServiceDTOVersion3RailTRAStationFacilityFacilityInfo `json:"Toilets"`
}

// Validate validates this service d t o version3 rail t r a station facility station facility
func (m *ServiceDTOVersion3RailTRAStationFacilityStationFacility) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDrinkingFountains(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateElevators(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFacilityMapURLs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInformationSpots(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStationName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToilets(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceDTOVersion3RailTRAStationFacilityStationFacility) validateDrinkingFountains(formats strfmt.Registry) error {

	if err := validate.Required("DrinkingFountains", "body", m.DrinkingFountains); err != nil {
		return err
	}

	for i := 0; i < len(m.DrinkingFountains); i++ {
		if swag.IsZero(m.DrinkingFountains[i]) { // not required
			continue
		}

		if m.DrinkingFountains[i] != nil {
			if err := m.DrinkingFountains[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("DrinkingFountains" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceDTOVersion3RailTRAStationFacilityStationFacility) validateElevators(formats strfmt.Registry) error {

	if err := validate.Required("Elevators", "body", m.Elevators); err != nil {
		return err
	}

	for i := 0; i < len(m.Elevators); i++ {
		if swag.IsZero(m.Elevators[i]) { // not required
			continue
		}

		if m.Elevators[i] != nil {
			if err := m.Elevators[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Elevators" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceDTOVersion3RailTRAStationFacilityStationFacility) validateFacilityMapURLs(formats strfmt.Registry) error {

	if err := validate.Required("FacilityMapURLs", "body", m.FacilityMapURLs); err != nil {
		return err
	}

	for i := 0; i < len(m.FacilityMapURLs); i++ {
		if swag.IsZero(m.FacilityMapURLs[i]) { // not required
			continue
		}

		if m.FacilityMapURLs[i] != nil {
			if err := m.FacilityMapURLs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("FacilityMapURLs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceDTOVersion3RailTRAStationFacilityStationFacility) validateInformationSpots(formats strfmt.Registry) error {

	if err := validate.Required("InformationSpots", "body", m.InformationSpots); err != nil {
		return err
	}

	for i := 0; i < len(m.InformationSpots); i++ {
		if swag.IsZero(m.InformationSpots[i]) { // not required
			continue
		}

		if m.InformationSpots[i] != nil {
			if err := m.InformationSpots[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("InformationSpots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceDTOVersion3RailTRAStationFacilityStationFacility) validateStationID(formats strfmt.Registry) error {

	if err := validate.Required("StationID", "body", m.StationID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3RailTRAStationFacilityStationFacility) validateStationName(formats strfmt.Registry) error {

	if err := validate.Required("StationName", "body", m.StationName); err != nil {
		return err
	}

	if m.StationName != nil {
		if err := m.StationName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("StationName")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion3RailTRAStationFacilityStationFacility) validateToilets(formats strfmt.Registry) error {

	if err := validate.Required("Toilets", "body", m.Toilets); err != nil {
		return err
	}

	for i := 0; i < len(m.Toilets); i++ {
		if swag.IsZero(m.Toilets[i]) { // not required
			continue
		}

		if m.Toilets[i] != nil {
			if err := m.Toilets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Toilets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceDTOVersion3RailTRAStationFacilityStationFacility) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceDTOVersion3RailTRAStationFacilityStationFacility) UnmarshalBinary(b []byte) error {
	var res ServiceDTOVersion3RailTRAStationFacilityStationFacility
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
