// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceDTOVersion3RailTRATRAAlertListAlert Alert
// swagger:model Service.DTO.Version3.Rail.TRA.TRAAlertList.Alert
type ServiceDTOVersion3RailTRATRAAlertListAlert struct {

	// 通阻訊息代碼
	// Required: true
	AlertID *string `json:"AlertID"`

	// 通阻訊息網址連結
	AlertURL string `json:"AlertURL,omitempty"`

	// 通阻訊息說明
	// Required: true
	Description *string `json:"Description"`

	// 影響方向
	// Enum: [0 1 2]
	Direction int64 `json:"Direction,omitempty"`

	// 影響說明
	Effect string `json:"Effect,omitempty"`

	// DateTime
	//
	// 訊息結束日期時間
	EndTime string `json:"EndTime,omitempty"`

	// 影響等級程度
	// Enum: [1: 重度 2: 中度 3: 輕度]
	Level string `json:"Level,omitempty"`

	// DateTime
	//
	// 消息發佈日期時間
	PublishTime string `json:"PublishTime,omitempty"`

	// 影響原因
	Reason string `json:"Reason,omitempty"`

	// AlertScope
	//
	// 影響範圍
	// Required: true
	Scope *ServiceDTOVersion3RailTRATRAAlertListAlertScope `json:"Scope"`

	// DateTime
	//
	// 訊息起始日期時間
	StartTime string `json:"StartTime,omitempty"`

	// 營運狀況
	// Required: true
	// Enum: [0 1 2]
	Status *int64 `json:"Status"`

	// 通阻訊息標題
	// Required: true
	Title *string `json:"Title"`

	// DateTime
	//
	// 消息更新日期時間
	// Required: true
	UpdateTime *string `json:"UpdateTime"`
}

// Validate validates this service d t o version3 rail t r a t r a alert list alert
func (m *ServiceDTOVersion3RailTRATRAAlertListAlert) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlertID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceDTOVersion3RailTRATRAAlertListAlert) validateAlertID(formats strfmt.Registry) error {

	if err := validate.Required("AlertID", "body", m.AlertID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3RailTRATRAAlertListAlert) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("Description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

var serviceDTOVersion3RailTRATRAAlertListAlertTypeDirectionPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[0,1,2]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceDTOVersion3RailTRATRAAlertListAlertTypeDirectionPropEnum = append(serviceDTOVersion3RailTRATRAAlertListAlertTypeDirectionPropEnum, v)
	}
}

// prop value enum
func (m *ServiceDTOVersion3RailTRATRAAlertListAlert) validateDirectionEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, serviceDTOVersion3RailTRATRAAlertListAlertTypeDirectionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceDTOVersion3RailTRATRAAlertListAlert) validateDirection(formats strfmt.Registry) error {

	if swag.IsZero(m.Direction) { // not required
		return nil
	}

	// value enum
	if err := m.validateDirectionEnum("Direction", "body", m.Direction); err != nil {
		return err
	}

	return nil
}

var serviceDTOVersion3RailTRATRAAlertListAlertTypeLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["1: 重度","2: 中度","3: 輕度"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceDTOVersion3RailTRATRAAlertListAlertTypeLevelPropEnum = append(serviceDTOVersion3RailTRATRAAlertListAlertTypeLevelPropEnum, v)
	}
}

const (

	// ServiceDTOVersion3RailTRATRAAlertListAlertLevelNr1重度 captures enum value "1: 重度"
	ServiceDTOVersion3RailTRATRAAlertListAlertLevelNr1重度 string = "1: 重度"

	// ServiceDTOVersion3RailTRATRAAlertListAlertLevelNr2中度 captures enum value "2: 中度"
	ServiceDTOVersion3RailTRATRAAlertListAlertLevelNr2中度 string = "2: 中度"

	// ServiceDTOVersion3RailTRATRAAlertListAlertLevelNr3輕度 captures enum value "3: 輕度"
	ServiceDTOVersion3RailTRATRAAlertListAlertLevelNr3輕度 string = "3: 輕度"
)

// prop value enum
func (m *ServiceDTOVersion3RailTRATRAAlertListAlert) validateLevelEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, serviceDTOVersion3RailTRATRAAlertListAlertTypeLevelPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceDTOVersion3RailTRATRAAlertListAlert) validateLevel(formats strfmt.Registry) error {

	if swag.IsZero(m.Level) { // not required
		return nil
	}

	// value enum
	if err := m.validateLevelEnum("Level", "body", m.Level); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3RailTRATRAAlertListAlert) validateScope(formats strfmt.Registry) error {

	if err := validate.Required("Scope", "body", m.Scope); err != nil {
		return err
	}

	if m.Scope != nil {
		if err := m.Scope.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Scope")
			}
			return err
		}
	}

	return nil
}

var serviceDTOVersion3RailTRATRAAlertListAlertTypeStatusPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[0,1,2]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceDTOVersion3RailTRATRAAlertListAlertTypeStatusPropEnum = append(serviceDTOVersion3RailTRATRAAlertListAlertTypeStatusPropEnum, v)
	}
}

// prop value enum
func (m *ServiceDTOVersion3RailTRATRAAlertListAlert) validateStatusEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, serviceDTOVersion3RailTRATRAAlertListAlertTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceDTOVersion3RailTRATRAAlertListAlert) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("Status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("Status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3RailTRATRAAlertListAlert) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("Title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3RailTRATRAAlertListAlert) validateUpdateTime(formats strfmt.Registry) error {

	if err := validate.Required("UpdateTime", "body", m.UpdateTime); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceDTOVersion3RailTRATRAAlertListAlert) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceDTOVersion3RailTRATRAAlertListAlert) UnmarshalBinary(b []byte) error {
	var res ServiceDTOVersion3RailTRATRAAlertListAlert
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
