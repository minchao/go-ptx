// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PTXServiceDTORailSpecificationV3TRAStationTransferStationTransfer StationTransfer
//
// 車站跨運具轉乘資訊
//
// swagger:model PTX.Service.DTO.Rail.Specification.V3.TRA.StationTransfer.StationTransfer
type PTXServiceDTORailSpecificationV3TRAStationTransferStationTransfer struct {

	// Array
	//
	// 外部轉乘地圖簡圖連結資訊
	// Required: true
	ExteriorMapURLs []*PTXServiceDTORailSpecificationV3TRAStationTransferMapURL "json:\"ExteriorMapURLs\" xml:\"List`1\""

	// Array
	//
	// 車站內部地圖簡圖連結資訊
	// Required: true
	InteriorMapURLs []*PTXServiceDTORailSpecificationV3TRAStationTransferMapURL "json:\"InteriorMapURLs\" xml:\"List`1\""

	// String
	//
	// 車站代碼
	// Required: true
	StationID *string `json:"StationID" xml:"String"`

	// NameType
	//
	// 車站名稱
	// Required: true
	StationName struct {
		PTXServiceDTOSharedSpecificationV3BaseNameType
	} `json:"StationName" xml:"NameType"`

	// String
	//
	// 轉乘文字描述
	TransferDescription string `json:"TransferDescription,omitempty" xml:"String,omitempty"`

	// Array
	//
	// 跨運具轉乘資訊
	// Required: true
	Transfers []*PTXServiceDTORailSpecificationV3TRAStationTransferTransfer "json:\"Transfers\" xml:\"List`1\""
}

// Validate validates this p t x service d t o rail specification v3 t r a station transfer station transfer
func (m *PTXServiceDTORailSpecificationV3TRAStationTransferStationTransfer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExteriorMapURLs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInteriorMapURLs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStationName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransfers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTORailSpecificationV3TRAStationTransferStationTransfer) validateExteriorMapURLs(formats strfmt.Registry) error {

	if err := validate.Required("ExteriorMapURLs", "body", m.ExteriorMapURLs); err != nil {
		return err
	}

	for i := 0; i < len(m.ExteriorMapURLs); i++ {
		if swag.IsZero(m.ExteriorMapURLs[i]) { // not required
			continue
		}

		if m.ExteriorMapURLs[i] != nil {
			if err := m.ExteriorMapURLs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ExteriorMapURLs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV3TRAStationTransferStationTransfer) validateInteriorMapURLs(formats strfmt.Registry) error {

	if err := validate.Required("InteriorMapURLs", "body", m.InteriorMapURLs); err != nil {
		return err
	}

	for i := 0; i < len(m.InteriorMapURLs); i++ {
		if swag.IsZero(m.InteriorMapURLs[i]) { // not required
			continue
		}

		if m.InteriorMapURLs[i] != nil {
			if err := m.InteriorMapURLs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("InteriorMapURLs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV3TRAStationTransferStationTransfer) validateStationID(formats strfmt.Registry) error {

	if err := validate.Required("StationID", "body", m.StationID); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV3TRAStationTransferStationTransfer) validateStationName(formats strfmt.Registry) error {

	return nil
}

func (m *PTXServiceDTORailSpecificationV3TRAStationTransferStationTransfer) validateTransfers(formats strfmt.Registry) error {

	if err := validate.Required("Transfers", "body", m.Transfers); err != nil {
		return err
	}

	for i := 0; i < len(m.Transfers); i++ {
		if swag.IsZero(m.Transfers[i]) { // not required
			continue
		}

		if m.Transfers[i] != nil {
			if err := m.Transfers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Transfers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this p t x service d t o rail specification v3 t r a station transfer station transfer based on the context it is used
func (m *PTXServiceDTORailSpecificationV3TRAStationTransferStationTransfer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExteriorMapURLs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInteriorMapURLs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStationName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTransfers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTORailSpecificationV3TRAStationTransferStationTransfer) contextValidateExteriorMapURLs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExteriorMapURLs); i++ {

		if m.ExteriorMapURLs[i] != nil {
			if err := m.ExteriorMapURLs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ExteriorMapURLs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV3TRAStationTransferStationTransfer) contextValidateInteriorMapURLs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.InteriorMapURLs); i++ {

		if m.InteriorMapURLs[i] != nil {
			if err := m.InteriorMapURLs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("InteriorMapURLs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV3TRAStationTransferStationTransfer) contextValidateStationName(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *PTXServiceDTORailSpecificationV3TRAStationTransferStationTransfer) contextValidateTransfers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Transfers); i++ {

		if m.Transfers[i] != nil {
			if err := m.Transfers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Transfers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PTXServiceDTORailSpecificationV3TRAStationTransferStationTransfer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PTXServiceDTORailSpecificationV3TRAStationTransferStationTransfer) UnmarshalBinary(b []byte) error {
	var res PTXServiceDTORailSpecificationV3TRAStationTransferStationTransfer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
