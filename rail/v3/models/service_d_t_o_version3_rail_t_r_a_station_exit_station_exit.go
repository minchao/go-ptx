// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceDTOVersion3RailTRAStationExitStationExit StationExit
//
// 台鐵車站出入口資料
//
// swagger:model Service.DTO.Version3.Rail.TRA.StationExit.StationExit
type ServiceDTOVersion3RailTRAStationExitStationExit struct {

	// 車站出入口簡圖網址連結資訊
	ExitMapURLs []*ServiceDTOVersion3RailTRAStationExitExitMapURL `json:"ExitMapURLs"`

	// 車站出入口
	// Required: true
	Exits []*ServiceDTOVersion3RailTRAStationExitExit `json:"Exits"`

	// 出入口所屬車站代碼
	// Required: true
	StationID *string `json:"StationID"`

	// NameType
	//
	// 車站名稱
	// Required: true
	StationName *ServiceDTOVersion3BaseNameType `json:"StationName"`
}

// Validate validates this service d t o version3 rail t r a station exit station exit
func (m *ServiceDTOVersion3RailTRAStationExitStationExit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExitMapURLs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExits(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStationName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceDTOVersion3RailTRAStationExitStationExit) validateExitMapURLs(formats strfmt.Registry) error {

	if swag.IsZero(m.ExitMapURLs) { // not required
		return nil
	}

	for i := 0; i < len(m.ExitMapURLs); i++ {
		if swag.IsZero(m.ExitMapURLs[i]) { // not required
			continue
		}

		if m.ExitMapURLs[i] != nil {
			if err := m.ExitMapURLs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ExitMapURLs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceDTOVersion3RailTRAStationExitStationExit) validateExits(formats strfmt.Registry) error {

	if err := validate.Required("Exits", "body", m.Exits); err != nil {
		return err
	}

	for i := 0; i < len(m.Exits); i++ {
		if swag.IsZero(m.Exits[i]) { // not required
			continue
		}

		if m.Exits[i] != nil {
			if err := m.Exits[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Exits" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceDTOVersion3RailTRAStationExitStationExit) validateStationID(formats strfmt.Registry) error {

	if err := validate.Required("StationID", "body", m.StationID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3RailTRAStationExitStationExit) validateStationName(formats strfmt.Registry) error {

	if err := validate.Required("StationName", "body", m.StationName); err != nil {
		return err
	}

	if m.StationName != nil {
		if err := m.StationName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("StationName")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceDTOVersion3RailTRAStationExitStationExit) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceDTOVersion3RailTRAStationExitStationExit) UnmarshalBinary(b []byte) error {
	var res ServiceDTOVersion3RailTRAStationExitStationExit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
