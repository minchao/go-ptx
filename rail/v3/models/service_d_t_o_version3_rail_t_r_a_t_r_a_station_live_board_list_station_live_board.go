// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceDTOVersion3RailTRATRAStationLiveBoardListStationLiveBoard StationLiveBoard
// swagger:model Service.DTO.Version3.Rail.TRA.TRAStationLiveBoardList.StationLiveBoard
type ServiceDTOVersion3RailTRATRAStationLiveBoardListStationLiveBoard struct {

	// 延誤分鐘
	// Required: true
	DelayTime *int32 `json:"DelayTime"`

	// 行駛方向
	// Enum: [0: 順行 1: 逆行]
	Direction string `json:"Direction,omitempty"`

	// 終點站代碼
	EndingStationID string `json:"EndingStationID,omitempty"`

	// NameType
	//
	// 終點站名稱
	// Required: true
	EndingStationName *ServiceDTOVersion3BaseNameType `json:"EndingStationName"`

	// 停靠月台(00代表當時尚未確定停靠的月台，待確定好停靠的月台後，就會更新Platfrom。)
	Platform string `json:"Platform,omitempty"`

	// 列車狀態
	// Enum: [0: 準點 1: 誤點 2: 取消]
	RunningStatus string `json:"RunningStatus,omitempty"`

	// 表訂到站時刻
	ScheduleArrivalTime string `json:"ScheduleArrivalTime,omitempty"`

	// 表定離站時刻
	ScheduleDepartureTime string `json:"ScheduleDepartureTime,omitempty"`

	// 車站代號
	// Required: true
	StationID *string `json:"StationID"`

	// NameType
	//
	// 車站名稱
	// Required: true
	StationName *ServiceDTOVersion3BaseNameType `json:"StationName"`

	// 車次代碼
	// Required: true
	TrainNo *string `json:"TrainNo"`

	// 車種簡碼 = ['1: 太魯閣', '2: 普悠瑪', '3: 自強', '4: 莒光', '5: 復興', '6: 區間', '7: 普快', '10: 區間快']
	TrainTypeCode string `json:"TrainTypeCode,omitempty"`

	// 車種代嗎
	TrainTypeID string `json:"TrainTypeID,omitempty"`

	// NameType
	//
	// 車種名稱
	// Required: true
	TrainTypeName *ServiceDTOVersion3BaseNameType `json:"TrainTypeName"`

	// 山海線類型
	// Enum: [0: 不經山海線 1: 山線 2: 海線]
	TripLine string `json:"TripLine,omitempty"`

	// DateTime
	//
	// 本筆資料之更新日期時間
	// Required: true
	UpdateTime *string `json:"UpdateTime"`
}

// Validate validates this service d t o version3 rail t r a t r a station live board list station live board
func (m *ServiceDTOVersion3RailTRATRAStationLiveBoardListStationLiveBoard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDelayTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndingStationName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunningStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStationName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrainNo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrainTypeName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTripLine(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceDTOVersion3RailTRATRAStationLiveBoardListStationLiveBoard) validateDelayTime(formats strfmt.Registry) error {

	if err := validate.Required("DelayTime", "body", m.DelayTime); err != nil {
		return err
	}

	return nil
}

var serviceDTOVersion3RailTRATRAStationLiveBoardListStationLiveBoardTypeDirectionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["0: 順行","1: 逆行"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceDTOVersion3RailTRATRAStationLiveBoardListStationLiveBoardTypeDirectionPropEnum = append(serviceDTOVersion3RailTRATRAStationLiveBoardListStationLiveBoardTypeDirectionPropEnum, v)
	}
}

const (

	// ServiceDTOVersion3RailTRATRAStationLiveBoardListStationLiveBoardDirectionNr0順行 captures enum value "0: 順行"
	ServiceDTOVersion3RailTRATRAStationLiveBoardListStationLiveBoardDirectionNr0順行 string = "0: 順行"

	// ServiceDTOVersion3RailTRATRAStationLiveBoardListStationLiveBoardDirectionNr1逆行 captures enum value "1: 逆行"
	ServiceDTOVersion3RailTRATRAStationLiveBoardListStationLiveBoardDirectionNr1逆行 string = "1: 逆行"
)

// prop value enum
func (m *ServiceDTOVersion3RailTRATRAStationLiveBoardListStationLiveBoard) validateDirectionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, serviceDTOVersion3RailTRATRAStationLiveBoardListStationLiveBoardTypeDirectionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceDTOVersion3RailTRATRAStationLiveBoardListStationLiveBoard) validateDirection(formats strfmt.Registry) error {

	if swag.IsZero(m.Direction) { // not required
		return nil
	}

	// value enum
	if err := m.validateDirectionEnum("Direction", "body", m.Direction); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3RailTRATRAStationLiveBoardListStationLiveBoard) validateEndingStationName(formats strfmt.Registry) error {

	if err := validate.Required("EndingStationName", "body", m.EndingStationName); err != nil {
		return err
	}

	if m.EndingStationName != nil {
		if err := m.EndingStationName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EndingStationName")
			}
			return err
		}
	}

	return nil
}

var serviceDTOVersion3RailTRATRAStationLiveBoardListStationLiveBoardTypeRunningStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["0: 準點","1: 誤點","2: 取消"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceDTOVersion3RailTRATRAStationLiveBoardListStationLiveBoardTypeRunningStatusPropEnum = append(serviceDTOVersion3RailTRATRAStationLiveBoardListStationLiveBoardTypeRunningStatusPropEnum, v)
	}
}

const (

	// ServiceDTOVersion3RailTRATRAStationLiveBoardListStationLiveBoardRunningStatusNr0準點 captures enum value "0: 準點"
	ServiceDTOVersion3RailTRATRAStationLiveBoardListStationLiveBoardRunningStatusNr0準點 string = "0: 準點"

	// ServiceDTOVersion3RailTRATRAStationLiveBoardListStationLiveBoardRunningStatusNr1誤點 captures enum value "1: 誤點"
	ServiceDTOVersion3RailTRATRAStationLiveBoardListStationLiveBoardRunningStatusNr1誤點 string = "1: 誤點"

	// ServiceDTOVersion3RailTRATRAStationLiveBoardListStationLiveBoardRunningStatusNr2取消 captures enum value "2: 取消"
	ServiceDTOVersion3RailTRATRAStationLiveBoardListStationLiveBoardRunningStatusNr2取消 string = "2: 取消"
)

// prop value enum
func (m *ServiceDTOVersion3RailTRATRAStationLiveBoardListStationLiveBoard) validateRunningStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, serviceDTOVersion3RailTRATRAStationLiveBoardListStationLiveBoardTypeRunningStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceDTOVersion3RailTRATRAStationLiveBoardListStationLiveBoard) validateRunningStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.RunningStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateRunningStatusEnum("RunningStatus", "body", m.RunningStatus); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3RailTRATRAStationLiveBoardListStationLiveBoard) validateStationID(formats strfmt.Registry) error {

	if err := validate.Required("StationID", "body", m.StationID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3RailTRATRAStationLiveBoardListStationLiveBoard) validateStationName(formats strfmt.Registry) error {

	if err := validate.Required("StationName", "body", m.StationName); err != nil {
		return err
	}

	if m.StationName != nil {
		if err := m.StationName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("StationName")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion3RailTRATRAStationLiveBoardListStationLiveBoard) validateTrainNo(formats strfmt.Registry) error {

	if err := validate.Required("TrainNo", "body", m.TrainNo); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3RailTRATRAStationLiveBoardListStationLiveBoard) validateTrainTypeName(formats strfmt.Registry) error {

	if err := validate.Required("TrainTypeName", "body", m.TrainTypeName); err != nil {
		return err
	}

	if m.TrainTypeName != nil {
		if err := m.TrainTypeName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TrainTypeName")
			}
			return err
		}
	}

	return nil
}

var serviceDTOVersion3RailTRATRAStationLiveBoardListStationLiveBoardTypeTripLinePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["0: 不經山海線","1: 山線","2: 海線"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceDTOVersion3RailTRATRAStationLiveBoardListStationLiveBoardTypeTripLinePropEnum = append(serviceDTOVersion3RailTRATRAStationLiveBoardListStationLiveBoardTypeTripLinePropEnum, v)
	}
}

const (

	// ServiceDTOVersion3RailTRATRAStationLiveBoardListStationLiveBoardTripLineNr0不經山海線 captures enum value "0: 不經山海線"
	ServiceDTOVersion3RailTRATRAStationLiveBoardListStationLiveBoardTripLineNr0不經山海線 string = "0: 不經山海線"

	// ServiceDTOVersion3RailTRATRAStationLiveBoardListStationLiveBoardTripLineNr1山線 captures enum value "1: 山線"
	ServiceDTOVersion3RailTRATRAStationLiveBoardListStationLiveBoardTripLineNr1山線 string = "1: 山線"

	// ServiceDTOVersion3RailTRATRAStationLiveBoardListStationLiveBoardTripLineNr2海線 captures enum value "2: 海線"
	ServiceDTOVersion3RailTRATRAStationLiveBoardListStationLiveBoardTripLineNr2海線 string = "2: 海線"
)

// prop value enum
func (m *ServiceDTOVersion3RailTRATRAStationLiveBoardListStationLiveBoard) validateTripLineEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, serviceDTOVersion3RailTRATRAStationLiveBoardListStationLiveBoardTypeTripLinePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceDTOVersion3RailTRATRAStationLiveBoardListStationLiveBoard) validateTripLine(formats strfmt.Registry) error {

	if swag.IsZero(m.TripLine) { // not required
		return nil
	}

	// value enum
	if err := m.validateTripLineEnum("TripLine", "body", m.TripLine); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3RailTRATRAStationLiveBoardListStationLiveBoard) validateUpdateTime(formats strfmt.Registry) error {

	if err := validate.Required("UpdateTime", "body", m.UpdateTime); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceDTOVersion3RailTRATRAStationLiveBoardListStationLiveBoard) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceDTOVersion3RailTRATRAStationLiveBoardListStationLiveBoard) UnmarshalBinary(b []byte) error {
	var res ServiceDTOVersion3RailTRATRAStationLiveBoardListStationLiveBoard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
