// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceDTOVersion3RailTRAOperator Operator
//
// 台鐵者營運業者基本資料
// swagger:model Service.DTO.Version3.Rail.TRA.Operator
type ServiceDTOVersion3RailTRAOperator struct {

	// 營運業者票價查詢網站連結
	FareURL string `json:"FareURL,omitempty"`

	// 營運業者簡碼
	// Required: true
	OperatorCode *string `json:"OperatorCode"`

	// 營運業者電子信箱
	OperatorEmail string `json:"OperatorEmail,omitempty"`

	// 營運業者Logo網址
	OperatorLogoURL string `json:"OperatorLogoURL,omitempty"`

	// NameType
	//
	// 營運業者名稱
	// Required: true
	OperatorName *ServiceDTOVersion3BaseNameType `json:"OperatorName"`

	// 營運業者連絡電話
	OperatorPhone string `json:"OperatorPhone,omitempty"`

	// 營運業者網址連結
	OperatorURL string `json:"OperatorURL,omitempty"`

	// 營運業者訂票電話
	ReservationPhone string `json:"ReservationPhone,omitempty"`

	// 營運業者訂票網站
	ReservationURL string `json:"ReservationURL,omitempty"`
}

// Validate validates this service d t o version3 rail t r a operator
func (m *ServiceDTOVersion3RailTRAOperator) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOperatorCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperatorName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceDTOVersion3RailTRAOperator) validateOperatorCode(formats strfmt.Registry) error {

	if err := validate.Required("OperatorCode", "body", m.OperatorCode); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3RailTRAOperator) validateOperatorName(formats strfmt.Registry) error {

	if err := validate.Required("OperatorName", "body", m.OperatorName); err != nil {
		return err
	}

	if m.OperatorName != nil {
		if err := m.OperatorName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OperatorName")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceDTOVersion3RailTRAOperator) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceDTOVersion3RailTRAOperator) UnmarshalBinary(b []byte) error {
	var res ServiceDTOVersion3RailTRAOperator
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
