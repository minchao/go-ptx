// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceDTOVersion3RailTRACommonTrainInfo TrainInfo
//
// 臺鐵車次定期資料型別(時刻表用)
// swagger:model Service.DTO.Version3.Rail.TRA.Common.TrainInfo
type ServiceDTOVersion3RailTRACommonTrainInfo struct {

	// 是否人車同行班次(置於攜車袋之自行車各級列車均可乘車)
	// Required: true
	// Enum: [0 1]
	BikeFlag *int64 `json:"BikeFlag"`

	// 是否設有哺(集)乳室車廂
	// Required: true
	// Enum: [0 1]
	BreastFeedFlag *int64 `json:"BreastFeedFlag"`

	// 是否提供小客車
	// Required: true
	// Enum: [0 1]
	CarFlag *int64 `json:"CarFlag"`

	// 是否為每日行駛
	// Required: true
	// Enum: [0 1]
	DailyFlag *int64 `json:"DailyFlag"`

	// 是否提供餐車服務
	// Required: true
	// Enum: [0 1]
	DiningFlag *int64 `json:"DiningFlag"`

	// 行駛方向
	// Required: true
	// Enum: [0 1]
	Direction *int64 `json:"Direction"`

	// 列車終點車站代號
	EndingStationID string `json:"EndingStationID,omitempty"`

	// NameType
	//
	// 列車終點車站名稱
	EndingStationName *ServiceDTOVersion3BaseNameType `json:"EndingStationName,omitempty"`

	// 是否為加班車
	// Required: true
	// Enum: [0 1]
	ExtraTrainFlag *int64 `json:"ExtraTrainFlag"`

	// 附註說明
	Note string `json:"Note,omitempty"`

	// 跨夜車站代碼
	OverNightStationID string `json:"OverNightStationID,omitempty"`

	// 是否提供行李服務
	// Required: true
	// Enum: [0 1]
	PackageServiceFlag *int64 `json:"PackageServiceFlag"`

	// 營運路線代碼
	RouteID string `json:"RouteID,omitempty"`

	// 列車起點車站代號
	StartingStationID string `json:"StartingStationID,omitempty"`

	// NameType
	//
	// 列車起點車站名稱
	StartingStationName *ServiceDTOVersion3BaseNameType `json:"StartingStationName,omitempty"`

	// 車次代碼
	// Required: true
	TrainNo *string `json:"TrainNo"`

	// 車種簡碼 = ['1: 太魯閣', '2: 普悠瑪', '3: 自強', '4: 莒光', '5: 復興', '6: 區間', '7: 普快', '10: 區間快']
	TrainTypeCode string `json:"TrainTypeCode,omitempty"`

	// 車種代嗎
	TrainTypeID string `json:"TrainTypeID,omitempty"`

	// NameType
	//
	// 車種名稱
	TrainTypeName *ServiceDTOVersion3BaseNameType `json:"TrainTypeName,omitempty"`

	// 車次之目的地方向描述
	TripHeadSign string `json:"TripHeadSign,omitempty"`

	// 山海線類型
	// Enum: [0 1 2]
	TripLine int64 `json:"TripLine,omitempty"`

	// 是否設身障旅客專用座位車
	// Required: true
	// Enum: [0 1]
	WheelChairFlag *int64 `json:"WheelChairFlag"`
}

// Validate validates this service d t o version3 rail t r a common train info
func (m *ServiceDTOVersion3RailTRACommonTrainInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBikeFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBreastFeedFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCarFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDailyFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiningFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndingStationName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtraTrainFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageServiceFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartingStationName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrainNo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrainTypeName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTripLine(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWheelChairFlag(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var serviceDTOVersion3RailTRACommonTrainInfoTypeBikeFlagPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[0,1]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceDTOVersion3RailTRACommonTrainInfoTypeBikeFlagPropEnum = append(serviceDTOVersion3RailTRACommonTrainInfoTypeBikeFlagPropEnum, v)
	}
}

// prop value enum
func (m *ServiceDTOVersion3RailTRACommonTrainInfo) validateBikeFlagEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, serviceDTOVersion3RailTRACommonTrainInfoTypeBikeFlagPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceDTOVersion3RailTRACommonTrainInfo) validateBikeFlag(formats strfmt.Registry) error {

	if err := validate.Required("BikeFlag", "body", m.BikeFlag); err != nil {
		return err
	}

	// value enum
	if err := m.validateBikeFlagEnum("BikeFlag", "body", *m.BikeFlag); err != nil {
		return err
	}

	return nil
}

var serviceDTOVersion3RailTRACommonTrainInfoTypeBreastFeedFlagPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[0,1]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceDTOVersion3RailTRACommonTrainInfoTypeBreastFeedFlagPropEnum = append(serviceDTOVersion3RailTRACommonTrainInfoTypeBreastFeedFlagPropEnum, v)
	}
}

// prop value enum
func (m *ServiceDTOVersion3RailTRACommonTrainInfo) validateBreastFeedFlagEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, serviceDTOVersion3RailTRACommonTrainInfoTypeBreastFeedFlagPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceDTOVersion3RailTRACommonTrainInfo) validateBreastFeedFlag(formats strfmt.Registry) error {

	if err := validate.Required("BreastFeedFlag", "body", m.BreastFeedFlag); err != nil {
		return err
	}

	// value enum
	if err := m.validateBreastFeedFlagEnum("BreastFeedFlag", "body", *m.BreastFeedFlag); err != nil {
		return err
	}

	return nil
}

var serviceDTOVersion3RailTRACommonTrainInfoTypeCarFlagPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[0,1]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceDTOVersion3RailTRACommonTrainInfoTypeCarFlagPropEnum = append(serviceDTOVersion3RailTRACommonTrainInfoTypeCarFlagPropEnum, v)
	}
}

// prop value enum
func (m *ServiceDTOVersion3RailTRACommonTrainInfo) validateCarFlagEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, serviceDTOVersion3RailTRACommonTrainInfoTypeCarFlagPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceDTOVersion3RailTRACommonTrainInfo) validateCarFlag(formats strfmt.Registry) error {

	if err := validate.Required("CarFlag", "body", m.CarFlag); err != nil {
		return err
	}

	// value enum
	if err := m.validateCarFlagEnum("CarFlag", "body", *m.CarFlag); err != nil {
		return err
	}

	return nil
}

var serviceDTOVersion3RailTRACommonTrainInfoTypeDailyFlagPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[0,1]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceDTOVersion3RailTRACommonTrainInfoTypeDailyFlagPropEnum = append(serviceDTOVersion3RailTRACommonTrainInfoTypeDailyFlagPropEnum, v)
	}
}

// prop value enum
func (m *ServiceDTOVersion3RailTRACommonTrainInfo) validateDailyFlagEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, serviceDTOVersion3RailTRACommonTrainInfoTypeDailyFlagPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceDTOVersion3RailTRACommonTrainInfo) validateDailyFlag(formats strfmt.Registry) error {

	if err := validate.Required("DailyFlag", "body", m.DailyFlag); err != nil {
		return err
	}

	// value enum
	if err := m.validateDailyFlagEnum("DailyFlag", "body", *m.DailyFlag); err != nil {
		return err
	}

	return nil
}

var serviceDTOVersion3RailTRACommonTrainInfoTypeDiningFlagPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[0,1]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceDTOVersion3RailTRACommonTrainInfoTypeDiningFlagPropEnum = append(serviceDTOVersion3RailTRACommonTrainInfoTypeDiningFlagPropEnum, v)
	}
}

// prop value enum
func (m *ServiceDTOVersion3RailTRACommonTrainInfo) validateDiningFlagEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, serviceDTOVersion3RailTRACommonTrainInfoTypeDiningFlagPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceDTOVersion3RailTRACommonTrainInfo) validateDiningFlag(formats strfmt.Registry) error {

	if err := validate.Required("DiningFlag", "body", m.DiningFlag); err != nil {
		return err
	}

	// value enum
	if err := m.validateDiningFlagEnum("DiningFlag", "body", *m.DiningFlag); err != nil {
		return err
	}

	return nil
}

var serviceDTOVersion3RailTRACommonTrainInfoTypeDirectionPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[0,1]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceDTOVersion3RailTRACommonTrainInfoTypeDirectionPropEnum = append(serviceDTOVersion3RailTRACommonTrainInfoTypeDirectionPropEnum, v)
	}
}

// prop value enum
func (m *ServiceDTOVersion3RailTRACommonTrainInfo) validateDirectionEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, serviceDTOVersion3RailTRACommonTrainInfoTypeDirectionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceDTOVersion3RailTRACommonTrainInfo) validateDirection(formats strfmt.Registry) error {

	if err := validate.Required("Direction", "body", m.Direction); err != nil {
		return err
	}

	// value enum
	if err := m.validateDirectionEnum("Direction", "body", *m.Direction); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3RailTRACommonTrainInfo) validateEndingStationName(formats strfmt.Registry) error {

	if swag.IsZero(m.EndingStationName) { // not required
		return nil
	}

	if m.EndingStationName != nil {
		if err := m.EndingStationName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EndingStationName")
			}
			return err
		}
	}

	return nil
}

var serviceDTOVersion3RailTRACommonTrainInfoTypeExtraTrainFlagPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[0,1]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceDTOVersion3RailTRACommonTrainInfoTypeExtraTrainFlagPropEnum = append(serviceDTOVersion3RailTRACommonTrainInfoTypeExtraTrainFlagPropEnum, v)
	}
}

// prop value enum
func (m *ServiceDTOVersion3RailTRACommonTrainInfo) validateExtraTrainFlagEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, serviceDTOVersion3RailTRACommonTrainInfoTypeExtraTrainFlagPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceDTOVersion3RailTRACommonTrainInfo) validateExtraTrainFlag(formats strfmt.Registry) error {

	if err := validate.Required("ExtraTrainFlag", "body", m.ExtraTrainFlag); err != nil {
		return err
	}

	// value enum
	if err := m.validateExtraTrainFlagEnum("ExtraTrainFlag", "body", *m.ExtraTrainFlag); err != nil {
		return err
	}

	return nil
}

var serviceDTOVersion3RailTRACommonTrainInfoTypePackageServiceFlagPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[0,1]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceDTOVersion3RailTRACommonTrainInfoTypePackageServiceFlagPropEnum = append(serviceDTOVersion3RailTRACommonTrainInfoTypePackageServiceFlagPropEnum, v)
	}
}

// prop value enum
func (m *ServiceDTOVersion3RailTRACommonTrainInfo) validatePackageServiceFlagEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, serviceDTOVersion3RailTRACommonTrainInfoTypePackageServiceFlagPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceDTOVersion3RailTRACommonTrainInfo) validatePackageServiceFlag(formats strfmt.Registry) error {

	if err := validate.Required("PackageServiceFlag", "body", m.PackageServiceFlag); err != nil {
		return err
	}

	// value enum
	if err := m.validatePackageServiceFlagEnum("PackageServiceFlag", "body", *m.PackageServiceFlag); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3RailTRACommonTrainInfo) validateStartingStationName(formats strfmt.Registry) error {

	if swag.IsZero(m.StartingStationName) { // not required
		return nil
	}

	if m.StartingStationName != nil {
		if err := m.StartingStationName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("StartingStationName")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion3RailTRACommonTrainInfo) validateTrainNo(formats strfmt.Registry) error {

	if err := validate.Required("TrainNo", "body", m.TrainNo); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion3RailTRACommonTrainInfo) validateTrainTypeName(formats strfmt.Registry) error {

	if swag.IsZero(m.TrainTypeName) { // not required
		return nil
	}

	if m.TrainTypeName != nil {
		if err := m.TrainTypeName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TrainTypeName")
			}
			return err
		}
	}

	return nil
}

var serviceDTOVersion3RailTRACommonTrainInfoTypeTripLinePropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[0,1,2]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceDTOVersion3RailTRACommonTrainInfoTypeTripLinePropEnum = append(serviceDTOVersion3RailTRACommonTrainInfoTypeTripLinePropEnum, v)
	}
}

// prop value enum
func (m *ServiceDTOVersion3RailTRACommonTrainInfo) validateTripLineEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, serviceDTOVersion3RailTRACommonTrainInfoTypeTripLinePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceDTOVersion3RailTRACommonTrainInfo) validateTripLine(formats strfmt.Registry) error {

	if swag.IsZero(m.TripLine) { // not required
		return nil
	}

	// value enum
	if err := m.validateTripLineEnum("TripLine", "body", m.TripLine); err != nil {
		return err
	}

	return nil
}

var serviceDTOVersion3RailTRACommonTrainInfoTypeWheelChairFlagPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[0,1]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceDTOVersion3RailTRACommonTrainInfoTypeWheelChairFlagPropEnum = append(serviceDTOVersion3RailTRACommonTrainInfoTypeWheelChairFlagPropEnum, v)
	}
}

// prop value enum
func (m *ServiceDTOVersion3RailTRACommonTrainInfo) validateWheelChairFlagEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, serviceDTOVersion3RailTRACommonTrainInfoTypeWheelChairFlagPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceDTOVersion3RailTRACommonTrainInfo) validateWheelChairFlag(formats strfmt.Registry) error {

	if err := validate.Required("WheelChairFlag", "body", m.WheelChairFlag); err != nil {
		return err
	}

	// value enum
	if err := m.validateWheelChairFlagEnum("WheelChairFlag", "body", *m.WheelChairFlag); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceDTOVersion3RailTRACommonTrainInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceDTOVersion3RailTRACommonTrainInfo) UnmarshalBinary(b []byte) error {
	var res ServiceDTOVersion3RailTRACommonTrainInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
