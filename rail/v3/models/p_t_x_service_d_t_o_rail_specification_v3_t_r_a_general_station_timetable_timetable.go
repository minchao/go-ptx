// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PTXServiceDTORailSpecificationV3TRAGeneralStationTimetableTimetable Timetable
//
// 車次停靠站資料
//
// swagger:model PTX.Service.DTO.Rail.Specification.V3.TRA.GeneralStationTimetable.Timetable
type PTXServiceDTORailSpecificationV3TRAGeneralStationTimetableTimetable struct {

	// String
	//
	// 到站時刻
	ArrivalTime string `json:"ArrivalTime,omitempty" xml:"ArrivalTime,omitempty"`

	// String
	//
	// 發車時刻
	DepartureTime string `json:"DepartureTime,omitempty" xml:"DepartureTime,omitempty"`

	// String
	//
	// 目的站車站代號
	DestinationStationID string `json:"DestinationStationID,omitempty" xml:"DestinationStationID,omitempty"`

	// NameType
	//
	// 目的站車站
	DestinationStationName struct {
		PTXServiceDTOSharedSpecificationV3BaseNameType
	} `json:"DestinationStationName,omitempty" xml:"NameType,omitempty"`

	// Int32
	//
	// 發車順序
	Sequence int32 `json:"Sequence,omitempty"`

	// String
	//
	// 車次代碼
	TrainNo string `json:"TrainNo,omitempty" xml:"TrainNo,omitempty"`

	// String
	//
	// 車種簡碼 = ['1: 太魯閣', '2: 普悠瑪', '3: 自強', '4: 莒光', '5: 復興', '6: 區間', '7: 普快', '10: 區間快']
	TrainTypeCode string `json:"TrainTypeCode,omitempty" xml:"TrainTypeCode,omitempty"`

	// String
	//
	// 車種代嗎
	TrainTypeID string `json:"TrainTypeID,omitempty" xml:"TrainTypeID,omitempty"`

	// NameType
	//
	// 車種名稱
	TrainTypeName struct {
		PTXServiceDTOSharedSpecificationV3BaseNameType
	} `json:"TrainTypeName,omitempty" xml:"NameType,omitempty"`
}

// Validate validates this p t x service d t o rail specification v3 t r a general station timetable timetable
func (m *PTXServiceDTORailSpecificationV3TRAGeneralStationTimetableTimetable) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDestinationStationName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrainTypeName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTORailSpecificationV3TRAGeneralStationTimetableTimetable) validateDestinationStationName(formats strfmt.Registry) error {
	if swag.IsZero(m.DestinationStationName) { // not required
		return nil
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV3TRAGeneralStationTimetableTimetable) validateTrainTypeName(formats strfmt.Registry) error {
	if swag.IsZero(m.TrainTypeName) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this p t x service d t o rail specification v3 t r a general station timetable timetable based on the context it is used
func (m *PTXServiceDTORailSpecificationV3TRAGeneralStationTimetableTimetable) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDestinationStationName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTrainTypeName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTORailSpecificationV3TRAGeneralStationTimetableTimetable) contextValidateDestinationStationName(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *PTXServiceDTORailSpecificationV3TRAGeneralStationTimetableTimetable) contextValidateTrainTypeName(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *PTXServiceDTORailSpecificationV3TRAGeneralStationTimetableTimetable) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PTXServiceDTORailSpecificationV3TRAGeneralStationTimetableTimetable) UnmarshalBinary(b []byte) error {
	var res PTXServiceDTORailSpecificationV3TRAGeneralStationTimetableTimetable
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
