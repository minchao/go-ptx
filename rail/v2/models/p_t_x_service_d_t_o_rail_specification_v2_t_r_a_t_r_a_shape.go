// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PTXServiceDTORailSpecificationV2TRATRAShape TRAShape
//
// 臺鐵線型資料
//
// swagger:model PTX.Service.DTO.Rail.Specification.V2.TRA.TRAShape
type PTXServiceDTORailSpecificationV2TRATRAShape struct {

	// String
	//
	// 路線軌跡編碼(encoded polyline)
	// Required: true
	EncodedPolyline *string `json:"EncodedPolyline" xml:"EncodedPolyline"`

	// String
	//
	// well-known text，為路線軌跡資料
	// Required: true
	Geometry *string `json:"Geometry" xml:"Geometry"`

	// String
	//
	// 路線代碼
	// Required: true
	LineID *string `json:"LineID" xml:"LineID"`

	// NameType
	//
	// 路線名稱
	// Required: true
	LineName struct {
		PTXServiceDTOSharedSpecificationV2BaseNameType
	} `json:"LineName" xml:"NameType"`

	// String
	//
	// 路線編號
	// Required: true
	LineNo *string `json:"LineNo" xml:"LineNo"`

	// DateTime
	//
	// 資料更新日期時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)
	// Required: true
	// Format: date-time
	UpdateTime *strfmt.DateTime `json:"UpdateTime"`
}

// Validate validates this p t x service d t o rail specification v2 t r a t r a shape
func (m *PTXServiceDTORailSpecificationV2TRATRAShape) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEncodedPolyline(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGeometry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLineID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLineName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLineNo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTORailSpecificationV2TRATRAShape) validateEncodedPolyline(formats strfmt.Registry) error {

	if err := validate.Required("EncodedPolyline", "body", m.EncodedPolyline); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV2TRATRAShape) validateGeometry(formats strfmt.Registry) error {

	if err := validate.Required("Geometry", "body", m.Geometry); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV2TRATRAShape) validateLineID(formats strfmt.Registry) error {

	if err := validate.Required("LineID", "body", m.LineID); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV2TRATRAShape) validateLineName(formats strfmt.Registry) error {

	return nil
}

func (m *PTXServiceDTORailSpecificationV2TRATRAShape) validateLineNo(formats strfmt.Registry) error {

	if err := validate.Required("LineNo", "body", m.LineNo); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV2TRATRAShape) validateUpdateTime(formats strfmt.Registry) error {

	if err := validate.Required("UpdateTime", "body", m.UpdateTime); err != nil {
		return err
	}

	if err := validate.FormatOf("UpdateTime", "body", "date-time", m.UpdateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this p t x service d t o rail specification v2 t r a t r a shape based on the context it is used
func (m *PTXServiceDTORailSpecificationV2TRATRAShape) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLineName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTORailSpecificationV2TRATRAShape) contextValidateLineName(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *PTXServiceDTORailSpecificationV2TRATRAShape) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PTXServiceDTORailSpecificationV2TRATRAShape) UnmarshalBinary(b []byte) error {
	var res PTXServiceDTORailSpecificationV2TRATRAShape
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
