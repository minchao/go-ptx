// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PTXServiceDTORailSpecificationV2MetroRoute Route
//
// 營運路線基本資料
//
// swagger:model PTX.Service.DTO.Rail.Specification.V2.Metro.Route
type PTXServiceDTORailSpecificationV2MetroRoute struct {

	// String
	//
	// 營運路線迄站代號
	// Required: true
	EndStationID *string `json:"EndStationID"`

	// NameType
	//
	// 營運路線迄站名稱
	// Required: true
	EndStationName struct {
		PTXServiceDTOSharedSpecificationV2BaseNameType
	} `json:"EndStationName"`

	// String
	//
	// 營運路線所屬之路線代碼
	// Required: true
	LineID *string `json:"LineID"`

	// String
	//
	// 營運路線所屬之路線編號
	LineNo string `json:"LineNo,omitempty"`

	// String
	//
	// 營運業者代碼
	// Required: true
	OperatorCode *string `json:"OperatorCode"`

	// Int32
	//
	// 軌道路線類別(33:都市捷運;34:機場捷運)
	// Required: true
	RailRouteType *int32 `json:"RailRouteType"`

	// String
	//
	// 營運路線代碼
	// Required: true
	RouteID *string `json:"RouteID"`

	// Single
	//
	// 營運路線長度距離
	// Required: true
	RouteLength *float32 `json:"RouteLength"`

	// NameType
	//
	// 營運路線名稱
	// Required: true
	RouteName struct {
		PTXServiceDTOSharedSpecificationV2BaseNameType
	} `json:"RouteName"`

	// DateTime
	//
	// 來源端平台資料更新時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)
	// Required: true
	SrcUpdateTime *string `json:"SrcUpdateTime"`

	// String
	//
	// 營運路線起站代號
	// Required: true
	StartStationID *string `json:"StartStationID"`

	// NameType
	//
	// 營運路線起站名稱
	// Required: true
	StartStationName struct {
		PTXServiceDTOSharedSpecificationV2BaseNameType
	} `json:"StartStationName"`

	// Int32
	//
	// 營運路線運行時間
	// Required: true
	TravelTime *int32 `json:"TravelTime"`

	// DateTime
	//
	// 本平台資料更新時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)
	// Required: true
	UpdateTime *string `json:"UpdateTime"`

	// Int32
	//
	// 資料版本編號
	// Required: true
	VersionID *int32 `json:"VersionID"`
}

// Validate validates this p t x service d t o rail specification v2 metro route
func (m *PTXServiceDTORailSpecificationV2MetroRoute) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndStationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndStationName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLineID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperatorCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRailRouteType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouteID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouteLength(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouteName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSrcUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartStationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartStationName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTravelTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTORailSpecificationV2MetroRoute) validateEndStationID(formats strfmt.Registry) error {

	if err := validate.Required("EndStationID", "body", m.EndStationID); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV2MetroRoute) validateEndStationName(formats strfmt.Registry) error {

	return nil
}

func (m *PTXServiceDTORailSpecificationV2MetroRoute) validateLineID(formats strfmt.Registry) error {

	if err := validate.Required("LineID", "body", m.LineID); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV2MetroRoute) validateOperatorCode(formats strfmt.Registry) error {

	if err := validate.Required("OperatorCode", "body", m.OperatorCode); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV2MetroRoute) validateRailRouteType(formats strfmt.Registry) error {

	if err := validate.Required("RailRouteType", "body", m.RailRouteType); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV2MetroRoute) validateRouteID(formats strfmt.Registry) error {

	if err := validate.Required("RouteID", "body", m.RouteID); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV2MetroRoute) validateRouteLength(formats strfmt.Registry) error {

	if err := validate.Required("RouteLength", "body", m.RouteLength); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV2MetroRoute) validateRouteName(formats strfmt.Registry) error {

	return nil
}

func (m *PTXServiceDTORailSpecificationV2MetroRoute) validateSrcUpdateTime(formats strfmt.Registry) error {

	if err := validate.Required("SrcUpdateTime", "body", m.SrcUpdateTime); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV2MetroRoute) validateStartStationID(formats strfmt.Registry) error {

	if err := validate.Required("StartStationID", "body", m.StartStationID); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV2MetroRoute) validateStartStationName(formats strfmt.Registry) error {

	return nil
}

func (m *PTXServiceDTORailSpecificationV2MetroRoute) validateTravelTime(formats strfmt.Registry) error {

	if err := validate.Required("TravelTime", "body", m.TravelTime); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV2MetroRoute) validateUpdateTime(formats strfmt.Registry) error {

	if err := validate.Required("UpdateTime", "body", m.UpdateTime); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV2MetroRoute) validateVersionID(formats strfmt.Registry) error {

	if err := validate.Required("VersionID", "body", m.VersionID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PTXServiceDTORailSpecificationV2MetroRoute) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PTXServiceDTORailSpecificationV2MetroRoute) UnmarshalBinary(b []byte) error {
	var res PTXServiceDTORailSpecificationV2MetroRoute
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
