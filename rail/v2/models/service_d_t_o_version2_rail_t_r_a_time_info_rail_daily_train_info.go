// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceDTOVersion2RailTRATimeInfoRailDailyTrainInfo RailDailyTrainInfo
//
// 臺鐵車次資料型別
// swagger:model Service.DTO.Version2.Rail.TRA.TimeInfo.RailDailyTrainInfo
type ServiceDTOVersion2RailTRATimeInfoRailDailyTrainInfo struct {

	// 是否人車同行班次(置於攜車袋之自行車各級列車均可乘車)
	// Required: true
	// Enum: [0 1]
	BikeFlag *int64 `json:"BikeFlag"`

	// 是否設有哺(集)乳室車廂
	// Required: true
	// Enum: [0 1]
	BreastFeedingFlag *int64 `json:"BreastFeedingFlag"`

	// 是否為每日行駛
	// Required: true
	// Enum: [0 1]
	DailyFlag *int64 `json:"DailyFlag"`

	// 是否提供餐車服務
	// Required: true
	// Enum: [0 1]
	DiningFlag *int64 `json:"DiningFlag"`

	// 順逆行
	// Required: true
	// Enum: [0 1]
	Direction *int64 `json:"Direction"`

	// 列車終點車站代號
	EndingStationID string `json:"EndingStationID,omitempty"`

	// NameType
	//
	// 列車終點車站名稱
	EndingStationName *ServiceDTOVersion2BaseNameType `json:"EndingStationName,omitempty"`

	// NameType
	//
	// 附註說明
	Note *ServiceDTOVersion2BaseNameType `json:"Note,omitempty"`

	// 跨夜車站代碼
	OverNightStationID string `json:"OverNightStationID,omitempty"`

	// 是否提供行李服務
	// Required: true
	// Enum: [0 1]
	PackageServiceFlag *int64 `json:"PackageServiceFlag"`

	// 是否為加班車
	// Required: true
	ServiceAddedFlag *bool `json:"ServiceAddedFlag"`

	// 列車起點車站代號
	StartingStationID string `json:"StartingStationID,omitempty"`

	// NameType
	//
	// 列車起點車站名稱
	StartingStationName *ServiceDTOVersion2BaseNameType `json:"StartingStationName,omitempty"`

	// 車次代碼
	// Required: true
	TrainNo *string `json:"TrainNo"`

	// 列車車種簡碼
	// Required: true
	TrainTypeCode *string `json:"TrainTypeCode"`

	// 列車車種代碼
	// Required: true
	TrainTypeID *string `json:"TrainTypeID"`

	// NameType
	//
	// 列車車種名稱
	// Required: true
	TrainTypeName *ServiceDTOVersion2BaseNameType `json:"TrainTypeName"`

	// 車次車頭文字描述(通用以"往"+ 迄站中文站名")
	TripHeadsign string `json:"TripHeadsign,omitempty"`

	// 山海線類型
	// Enum: [0 1 2]
	TripLine int64 `json:"TripLine,omitempty"`

	// 是否設身障旅客專用座位車
	// Required: true
	// Enum: [0 1]
	WheelchairFlag *int64 `json:"WheelchairFlag"`
}

// Validate validates this service d t o version2 rail t r a time info rail daily train info
func (m *ServiceDTOVersion2RailTRATimeInfoRailDailyTrainInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBikeFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBreastFeedingFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDailyFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiningFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndingStationName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNote(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageServiceFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceAddedFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartingStationName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrainNo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrainTypeCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrainTypeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrainTypeName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTripLine(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWheelchairFlag(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var serviceDTOVersion2RailTRATimeInfoRailDailyTrainInfoTypeBikeFlagPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[0,1]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceDTOVersion2RailTRATimeInfoRailDailyTrainInfoTypeBikeFlagPropEnum = append(serviceDTOVersion2RailTRATimeInfoRailDailyTrainInfoTypeBikeFlagPropEnum, v)
	}
}

// prop value enum
func (m *ServiceDTOVersion2RailTRATimeInfoRailDailyTrainInfo) validateBikeFlagEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, serviceDTOVersion2RailTRATimeInfoRailDailyTrainInfoTypeBikeFlagPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceDTOVersion2RailTRATimeInfoRailDailyTrainInfo) validateBikeFlag(formats strfmt.Registry) error {

	if err := validate.Required("BikeFlag", "body", m.BikeFlag); err != nil {
		return err
	}

	// value enum
	if err := m.validateBikeFlagEnum("BikeFlag", "body", *m.BikeFlag); err != nil {
		return err
	}

	return nil
}

var serviceDTOVersion2RailTRATimeInfoRailDailyTrainInfoTypeBreastFeedingFlagPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[0,1]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceDTOVersion2RailTRATimeInfoRailDailyTrainInfoTypeBreastFeedingFlagPropEnum = append(serviceDTOVersion2RailTRATimeInfoRailDailyTrainInfoTypeBreastFeedingFlagPropEnum, v)
	}
}

// prop value enum
func (m *ServiceDTOVersion2RailTRATimeInfoRailDailyTrainInfo) validateBreastFeedingFlagEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, serviceDTOVersion2RailTRATimeInfoRailDailyTrainInfoTypeBreastFeedingFlagPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceDTOVersion2RailTRATimeInfoRailDailyTrainInfo) validateBreastFeedingFlag(formats strfmt.Registry) error {

	if err := validate.Required("BreastFeedingFlag", "body", m.BreastFeedingFlag); err != nil {
		return err
	}

	// value enum
	if err := m.validateBreastFeedingFlagEnum("BreastFeedingFlag", "body", *m.BreastFeedingFlag); err != nil {
		return err
	}

	return nil
}

var serviceDTOVersion2RailTRATimeInfoRailDailyTrainInfoTypeDailyFlagPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[0,1]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceDTOVersion2RailTRATimeInfoRailDailyTrainInfoTypeDailyFlagPropEnum = append(serviceDTOVersion2RailTRATimeInfoRailDailyTrainInfoTypeDailyFlagPropEnum, v)
	}
}

// prop value enum
func (m *ServiceDTOVersion2RailTRATimeInfoRailDailyTrainInfo) validateDailyFlagEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, serviceDTOVersion2RailTRATimeInfoRailDailyTrainInfoTypeDailyFlagPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceDTOVersion2RailTRATimeInfoRailDailyTrainInfo) validateDailyFlag(formats strfmt.Registry) error {

	if err := validate.Required("DailyFlag", "body", m.DailyFlag); err != nil {
		return err
	}

	// value enum
	if err := m.validateDailyFlagEnum("DailyFlag", "body", *m.DailyFlag); err != nil {
		return err
	}

	return nil
}

var serviceDTOVersion2RailTRATimeInfoRailDailyTrainInfoTypeDiningFlagPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[0,1]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceDTOVersion2RailTRATimeInfoRailDailyTrainInfoTypeDiningFlagPropEnum = append(serviceDTOVersion2RailTRATimeInfoRailDailyTrainInfoTypeDiningFlagPropEnum, v)
	}
}

// prop value enum
func (m *ServiceDTOVersion2RailTRATimeInfoRailDailyTrainInfo) validateDiningFlagEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, serviceDTOVersion2RailTRATimeInfoRailDailyTrainInfoTypeDiningFlagPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceDTOVersion2RailTRATimeInfoRailDailyTrainInfo) validateDiningFlag(formats strfmt.Registry) error {

	if err := validate.Required("DiningFlag", "body", m.DiningFlag); err != nil {
		return err
	}

	// value enum
	if err := m.validateDiningFlagEnum("DiningFlag", "body", *m.DiningFlag); err != nil {
		return err
	}

	return nil
}

var serviceDTOVersion2RailTRATimeInfoRailDailyTrainInfoTypeDirectionPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[0,1]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceDTOVersion2RailTRATimeInfoRailDailyTrainInfoTypeDirectionPropEnum = append(serviceDTOVersion2RailTRATimeInfoRailDailyTrainInfoTypeDirectionPropEnum, v)
	}
}

// prop value enum
func (m *ServiceDTOVersion2RailTRATimeInfoRailDailyTrainInfo) validateDirectionEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, serviceDTOVersion2RailTRATimeInfoRailDailyTrainInfoTypeDirectionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceDTOVersion2RailTRATimeInfoRailDailyTrainInfo) validateDirection(formats strfmt.Registry) error {

	if err := validate.Required("Direction", "body", m.Direction); err != nil {
		return err
	}

	// value enum
	if err := m.validateDirectionEnum("Direction", "body", *m.Direction); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2RailTRATimeInfoRailDailyTrainInfo) validateEndingStationName(formats strfmt.Registry) error {

	if swag.IsZero(m.EndingStationName) { // not required
		return nil
	}

	if m.EndingStationName != nil {
		if err := m.EndingStationName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EndingStationName")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion2RailTRATimeInfoRailDailyTrainInfo) validateNote(formats strfmt.Registry) error {

	if swag.IsZero(m.Note) { // not required
		return nil
	}

	if m.Note != nil {
		if err := m.Note.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Note")
			}
			return err
		}
	}

	return nil
}

var serviceDTOVersion2RailTRATimeInfoRailDailyTrainInfoTypePackageServiceFlagPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[0,1]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceDTOVersion2RailTRATimeInfoRailDailyTrainInfoTypePackageServiceFlagPropEnum = append(serviceDTOVersion2RailTRATimeInfoRailDailyTrainInfoTypePackageServiceFlagPropEnum, v)
	}
}

// prop value enum
func (m *ServiceDTOVersion2RailTRATimeInfoRailDailyTrainInfo) validatePackageServiceFlagEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, serviceDTOVersion2RailTRATimeInfoRailDailyTrainInfoTypePackageServiceFlagPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceDTOVersion2RailTRATimeInfoRailDailyTrainInfo) validatePackageServiceFlag(formats strfmt.Registry) error {

	if err := validate.Required("PackageServiceFlag", "body", m.PackageServiceFlag); err != nil {
		return err
	}

	// value enum
	if err := m.validatePackageServiceFlagEnum("PackageServiceFlag", "body", *m.PackageServiceFlag); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2RailTRATimeInfoRailDailyTrainInfo) validateServiceAddedFlag(formats strfmt.Registry) error {

	if err := validate.Required("ServiceAddedFlag", "body", m.ServiceAddedFlag); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2RailTRATimeInfoRailDailyTrainInfo) validateStartingStationName(formats strfmt.Registry) error {

	if swag.IsZero(m.StartingStationName) { // not required
		return nil
	}

	if m.StartingStationName != nil {
		if err := m.StartingStationName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("StartingStationName")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion2RailTRATimeInfoRailDailyTrainInfo) validateTrainNo(formats strfmt.Registry) error {

	if err := validate.Required("TrainNo", "body", m.TrainNo); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2RailTRATimeInfoRailDailyTrainInfo) validateTrainTypeCode(formats strfmt.Registry) error {

	if err := validate.Required("TrainTypeCode", "body", m.TrainTypeCode); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2RailTRATimeInfoRailDailyTrainInfo) validateTrainTypeID(formats strfmt.Registry) error {

	if err := validate.Required("TrainTypeID", "body", m.TrainTypeID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2RailTRATimeInfoRailDailyTrainInfo) validateTrainTypeName(formats strfmt.Registry) error {

	if err := validate.Required("TrainTypeName", "body", m.TrainTypeName); err != nil {
		return err
	}

	if m.TrainTypeName != nil {
		if err := m.TrainTypeName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TrainTypeName")
			}
			return err
		}
	}

	return nil
}

var serviceDTOVersion2RailTRATimeInfoRailDailyTrainInfoTypeTripLinePropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[0,1,2]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceDTOVersion2RailTRATimeInfoRailDailyTrainInfoTypeTripLinePropEnum = append(serviceDTOVersion2RailTRATimeInfoRailDailyTrainInfoTypeTripLinePropEnum, v)
	}
}

// prop value enum
func (m *ServiceDTOVersion2RailTRATimeInfoRailDailyTrainInfo) validateTripLineEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, serviceDTOVersion2RailTRATimeInfoRailDailyTrainInfoTypeTripLinePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceDTOVersion2RailTRATimeInfoRailDailyTrainInfo) validateTripLine(formats strfmt.Registry) error {

	if swag.IsZero(m.TripLine) { // not required
		return nil
	}

	// value enum
	if err := m.validateTripLineEnum("TripLine", "body", m.TripLine); err != nil {
		return err
	}

	return nil
}

var serviceDTOVersion2RailTRATimeInfoRailDailyTrainInfoTypeWheelchairFlagPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[0,1]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceDTOVersion2RailTRATimeInfoRailDailyTrainInfoTypeWheelchairFlagPropEnum = append(serviceDTOVersion2RailTRATimeInfoRailDailyTrainInfoTypeWheelchairFlagPropEnum, v)
	}
}

// prop value enum
func (m *ServiceDTOVersion2RailTRATimeInfoRailDailyTrainInfo) validateWheelchairFlagEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, serviceDTOVersion2RailTRATimeInfoRailDailyTrainInfoTypeWheelchairFlagPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceDTOVersion2RailTRATimeInfoRailDailyTrainInfo) validateWheelchairFlag(formats strfmt.Registry) error {

	if err := validate.Required("WheelchairFlag", "body", m.WheelchairFlag); err != nil {
		return err
	}

	// value enum
	if err := m.validateWheelchairFlagEnum("WheelchairFlag", "body", *m.WheelchairFlag); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceDTOVersion2RailTRATimeInfoRailDailyTrainInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceDTOVersion2RailTRATimeInfoRailDailyTrainInfo) UnmarshalBinary(b []byte) error {
	var res ServiceDTOVersion2RailTRATimeInfoRailDailyTrainInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
