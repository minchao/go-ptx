// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PTXServiceDTORailSpecificationV2THSRRailDailyTrainInfo RailDailyTrainInfo
//
// 高鐵車次資料型別
//
// swagger:model PTX.Service.DTO.Rail.Specification.V2.THSR.RailDailyTrainInfo
type PTXServiceDTORailSpecificationV2THSRRailDailyTrainInfo struct {

	// Int32
	//
	// 行駛方向 : [0:'南下',1:'北上']
	// Required: true
	Direction *int64 `json:"Direction"`

	// String
	//
	// 列車終點車站代號
	EndingStationID string `json:"EndingStationID,omitempty" xml:"EndingStationID,omitempty"`

	// NameType
	//
	// 列車終點車站名稱
	EndingStationName struct {
		PTXServiceDTOSharedSpecificationV2BaseNameType
	} `json:"EndingStationName,omitempty" xml:"NameType,omitempty"`

	// NameType
	//
	// 附註說明
	Note struct {
		PTXServiceDTOSharedSpecificationV2BaseNameType
	} `json:"Note,omitempty" xml:"NameType,omitempty"`

	// String
	//
	// 列車起點車站代號
	StartingStationID string `json:"StartingStationID,omitempty" xml:"StartingStationID,omitempty"`

	// NameType
	//
	// 列車起點車站名稱
	StartingStationName struct {
		PTXServiceDTOSharedSpecificationV2BaseNameType
	} `json:"StartingStationName,omitempty" xml:"NameType,omitempty"`

	// String
	//
	// 車次代碼
	// Required: true
	TrainNo *string `json:"TrainNo" xml:"TrainNo"`

	// DateTime
	//
	// 資料更新日期時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)
	// Required: true
	// Format: date-time
	UpdateTime *strfmt.DateTime `json:"UpdateTime"`

	// Int32
	//
	// 資料版本編號
	// Required: true
	VersionID *int32 `json:"VersionID"`
}

// Validate validates this p t x service d t o rail specification v2 t h s r rail daily train info
func (m *PTXServiceDTORailSpecificationV2THSRRailDailyTrainInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndingStationName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNote(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartingStationName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrainNo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTORailSpecificationV2THSRRailDailyTrainInfo) validateDirection(formats strfmt.Registry) error {

	if err := validate.Required("Direction", "body", m.Direction); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV2THSRRailDailyTrainInfo) validateEndingStationName(formats strfmt.Registry) error {
	if swag.IsZero(m.EndingStationName) { // not required
		return nil
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV2THSRRailDailyTrainInfo) validateNote(formats strfmt.Registry) error {
	if swag.IsZero(m.Note) { // not required
		return nil
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV2THSRRailDailyTrainInfo) validateStartingStationName(formats strfmt.Registry) error {
	if swag.IsZero(m.StartingStationName) { // not required
		return nil
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV2THSRRailDailyTrainInfo) validateTrainNo(formats strfmt.Registry) error {

	if err := validate.Required("TrainNo", "body", m.TrainNo); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV2THSRRailDailyTrainInfo) validateUpdateTime(formats strfmt.Registry) error {

	if err := validate.Required("UpdateTime", "body", m.UpdateTime); err != nil {
		return err
	}

	if err := validate.FormatOf("UpdateTime", "body", "date-time", m.UpdateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV2THSRRailDailyTrainInfo) validateVersionID(formats strfmt.Registry) error {

	if err := validate.Required("VersionID", "body", m.VersionID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this p t x service d t o rail specification v2 t h s r rail daily train info based on the context it is used
func (m *PTXServiceDTORailSpecificationV2THSRRailDailyTrainInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEndingStationName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNote(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStartingStationName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTORailSpecificationV2THSRRailDailyTrainInfo) contextValidateEndingStationName(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *PTXServiceDTORailSpecificationV2THSRRailDailyTrainInfo) contextValidateNote(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *PTXServiceDTORailSpecificationV2THSRRailDailyTrainInfo) contextValidateStartingStationName(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *PTXServiceDTORailSpecificationV2THSRRailDailyTrainInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PTXServiceDTORailSpecificationV2THSRRailDailyTrainInfo) UnmarshalBinary(b []byte) error {
	var res PTXServiceDTORailSpecificationV2THSRRailDailyTrainInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
