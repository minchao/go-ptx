// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PTXServiceDTORailSpecificationV2TRAGeneralTimetable GeneralTimetable
//
// 台鐵定期時刻表資料型別
//
// swagger:model PTX.Service.DTO.Rail.Specification.V2.TRA.GeneralTimetable
type PTXServiceDTORailSpecificationV2TRAGeneralTimetable struct {

	// RailGeneralTrainInfo
	//
	// 定期車次資料
	// Required: true
	GeneralTrainInfo struct {
		PTXServiceDTORailSpecificationV2TRATimeInfoRailGeneralTrainInfo
	} `json:"GeneralTrainInfo" xml:"RailGeneralTrainInfo"`

	// ServiceDay
	//
	// 營運日型態
	// Required: true
	ServiceDay struct {
		PTXServiceDTORailSpecificationV2TRAServiceDay
	} `json:"ServiceDay" xml:"ServiceDay"`

	// 來源端平台資料更新時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)
	// Format: date-time
	SrcUpdateTime strfmt.DateTime `json:"SrcUpdateTime,omitempty"`

	// Array
	//
	// 停靠時間資料
	// Required: true
	StopTimes []*PTXServiceDTORailSpecificationV2TRARailStopTime "json:\"StopTimes\" xml:\"List`1\""
}

// Validate validates this p t x service d t o rail specification v2 t r a general timetable
func (m *PTXServiceDTORailSpecificationV2TRAGeneralTimetable) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGeneralTrainInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceDay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSrcUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStopTimes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTORailSpecificationV2TRAGeneralTimetable) validateGeneralTrainInfo(formats strfmt.Registry) error {

	return nil
}

func (m *PTXServiceDTORailSpecificationV2TRAGeneralTimetable) validateServiceDay(formats strfmt.Registry) error {

	return nil
}

func (m *PTXServiceDTORailSpecificationV2TRAGeneralTimetable) validateSrcUpdateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.SrcUpdateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("SrcUpdateTime", "body", "date-time", m.SrcUpdateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV2TRAGeneralTimetable) validateStopTimes(formats strfmt.Registry) error {

	if err := validate.Required("StopTimes", "body", m.StopTimes); err != nil {
		return err
	}

	for i := 0; i < len(m.StopTimes); i++ {
		if swag.IsZero(m.StopTimes[i]) { // not required
			continue
		}

		if m.StopTimes[i] != nil {
			if err := m.StopTimes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("StopTimes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this p t x service d t o rail specification v2 t r a general timetable based on the context it is used
func (m *PTXServiceDTORailSpecificationV2TRAGeneralTimetable) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGeneralTrainInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServiceDay(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStopTimes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTORailSpecificationV2TRAGeneralTimetable) contextValidateGeneralTrainInfo(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *PTXServiceDTORailSpecificationV2TRAGeneralTimetable) contextValidateServiceDay(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *PTXServiceDTORailSpecificationV2TRAGeneralTimetable) contextValidateStopTimes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StopTimes); i++ {

		if m.StopTimes[i] != nil {
			if err := m.StopTimes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("StopTimes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PTXServiceDTORailSpecificationV2TRAGeneralTimetable) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PTXServiceDTORailSpecificationV2TRAGeneralTimetable) UnmarshalBinary(b []byte) error {
	var res PTXServiceDTORailSpecificationV2TRAGeneralTimetable
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
