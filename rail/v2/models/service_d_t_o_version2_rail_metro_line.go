// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceDTOVersion2RailMetroLine Line
//
// 捷運路線資料
// swagger:model Service.DTO.Version2.Rail.Metro.Line
type ServiceDTOVersion2RailMetroLine struct {

	// 是否位於支線
	// Required: true
	IsBranch *bool `json:"IsBranch"`

	// 路線顏色
	// Required: true
	LineColor *string `json:"LineColor"`

	// 路線代碼
	// Required: true
	LineID *string `json:"LineID"`

	// NameType
	//
	// 路線名稱
	// Required: true
	LineName *ServiceDTOVersion2BaseNameType `json:"LineName"`

	// 路線編號
	LineNo string `json:"LineNo,omitempty"`

	// NameType
	//
	// 路線區間名稱
	// Required: true
	LineSectionName *ServiceDTOVersion2BaseNameType `json:"LineSectionName"`

	// DateTime
	//
	// 來源端平台資料更新時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)
	// Required: true
	SrcUpdateTime *string `json:"SrcUpdateTime"`

	// DateTime
	//
	// 本平台資料更新時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)
	// Required: true
	UpdateTime *string `json:"UpdateTime"`

	// 資料版本編號
	// Required: true
	VersionID *int32 `json:"VersionID"`
}

// Validate validates this service d t o version2 rail metro line
func (m *ServiceDTOVersion2RailMetroLine) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIsBranch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLineColor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLineID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLineName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLineSectionName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSrcUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceDTOVersion2RailMetroLine) validateIsBranch(formats strfmt.Registry) error {

	if err := validate.Required("IsBranch", "body", m.IsBranch); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2RailMetroLine) validateLineColor(formats strfmt.Registry) error {

	if err := validate.Required("LineColor", "body", m.LineColor); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2RailMetroLine) validateLineID(formats strfmt.Registry) error {

	if err := validate.Required("LineID", "body", m.LineID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2RailMetroLine) validateLineName(formats strfmt.Registry) error {

	if err := validate.Required("LineName", "body", m.LineName); err != nil {
		return err
	}

	if m.LineName != nil {
		if err := m.LineName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("LineName")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion2RailMetroLine) validateLineSectionName(formats strfmt.Registry) error {

	if err := validate.Required("LineSectionName", "body", m.LineSectionName); err != nil {
		return err
	}

	if m.LineSectionName != nil {
		if err := m.LineSectionName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("LineSectionName")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion2RailMetroLine) validateSrcUpdateTime(formats strfmt.Registry) error {

	if err := validate.Required("SrcUpdateTime", "body", m.SrcUpdateTime); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2RailMetroLine) validateUpdateTime(formats strfmt.Registry) error {

	if err := validate.Required("UpdateTime", "body", m.UpdateTime); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2RailMetroLine) validateVersionID(formats strfmt.Registry) error {

	if err := validate.Required("VersionID", "body", m.VersionID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceDTOVersion2RailMetroLine) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceDTOVersion2RailMetroLine) UnmarshalBinary(b []byte) error {
	var res ServiceDTOVersion2RailMetroLine
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
