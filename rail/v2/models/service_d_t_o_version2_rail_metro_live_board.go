// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceDTOVersion2RailMetroLiveBoard LiveBoard
//
// 捷運列車到離站動態資料
//
// swagger:model Service.DTO.Version2.Rail.Metro.LiveBoard
type ServiceDTOVersion2RailMetroLiveBoard struct {

	// 目的地車站代號
	// Required: true
	DestinationStaionID *string `json:"DestinationStaionID"`

	// 目的地車站代號
	// Required: true
	DestinationStationID *string `json:"DestinationStationID"`

	// NameType
	//
	// 目的地車站名稱
	// Required: true
	DestinationStationName *ServiceDTOVersion2BaseNameType `json:"DestinationStationName"`

	// 下班車次抵達時間預估(分)
	// Required: true
	EstimateTime *int32 `json:"EstimateTime"`

	// 路線代碼
	// Required: true
	LineID *string `json:"LineID"`

	// 路線編號
	LineNO string `json:"LineNO,omitempty"`

	// NameType
	//
	// 路線名稱
	// Required: true
	LineName *ServiceDTOVersion2BaseNameType `json:"LineName"`

	// DateTime
	//
	// 來源端平台資料更新時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)
	// Required: true
	SrcUpdateTime *string `json:"SrcUpdateTime"`

	// 所在車站代號
	// Required: true
	StationID *string `json:"StationID"`

	// NameType
	//
	// 所在車站名稱
	// Required: true
	StationName *ServiceDTOVersion2BaseNameType `json:"StationName"`

	// 下班車次方向描述
	// Required: true
	TripHeadSign *string `json:"TripHeadSign"`

	// DateTime
	//
	// 本平台資料更新時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)
	// Required: true
	UpdateTime *string `json:"UpdateTime"`
}

// Validate validates this service d t o version2 rail metro live board
func (m *ServiceDTOVersion2RailMetroLiveBoard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDestinationStaionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestinationStationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestinationStationName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEstimateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLineID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLineName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSrcUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStationName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTripHeadSign(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceDTOVersion2RailMetroLiveBoard) validateDestinationStaionID(formats strfmt.Registry) error {

	if err := validate.Required("DestinationStaionID", "body", m.DestinationStaionID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2RailMetroLiveBoard) validateDestinationStationID(formats strfmt.Registry) error {

	if err := validate.Required("DestinationStationID", "body", m.DestinationStationID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2RailMetroLiveBoard) validateDestinationStationName(formats strfmt.Registry) error {

	if err := validate.Required("DestinationStationName", "body", m.DestinationStationName); err != nil {
		return err
	}

	if m.DestinationStationName != nil {
		if err := m.DestinationStationName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DestinationStationName")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion2RailMetroLiveBoard) validateEstimateTime(formats strfmt.Registry) error {

	if err := validate.Required("EstimateTime", "body", m.EstimateTime); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2RailMetroLiveBoard) validateLineID(formats strfmt.Registry) error {

	if err := validate.Required("LineID", "body", m.LineID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2RailMetroLiveBoard) validateLineName(formats strfmt.Registry) error {

	if err := validate.Required("LineName", "body", m.LineName); err != nil {
		return err
	}

	if m.LineName != nil {
		if err := m.LineName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("LineName")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion2RailMetroLiveBoard) validateSrcUpdateTime(formats strfmt.Registry) error {

	if err := validate.Required("SrcUpdateTime", "body", m.SrcUpdateTime); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2RailMetroLiveBoard) validateStationID(formats strfmt.Registry) error {

	if err := validate.Required("StationID", "body", m.StationID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2RailMetroLiveBoard) validateStationName(formats strfmt.Registry) error {

	if err := validate.Required("StationName", "body", m.StationName); err != nil {
		return err
	}

	if m.StationName != nil {
		if err := m.StationName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("StationName")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion2RailMetroLiveBoard) validateTripHeadSign(formats strfmt.Registry) error {

	if err := validate.Required("TripHeadSign", "body", m.TripHeadSign); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2RailMetroLiveBoard) validateUpdateTime(formats strfmt.Registry) error {

	if err := validate.Required("UpdateTime", "body", m.UpdateTime); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceDTOVersion2RailMetroLiveBoard) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceDTOVersion2RailMetroLiveBoard) UnmarshalBinary(b []byte) error {
	var res ServiceDTOVersion2RailMetroLiveBoard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
