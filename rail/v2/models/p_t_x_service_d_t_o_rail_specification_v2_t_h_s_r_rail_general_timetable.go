// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PTXServiceDTORailSpecificationV2THSRRailGeneralTimetable RailGeneralTimetable
//
// 高鐵到離站時刻資料型別
//
// swagger:model PTX.Service.DTO.Rail.Specification.V2.THSR.RailGeneralTimetable
type PTXServiceDTORailSpecificationV2THSRRailGeneralTimetable struct {

	// String
	//
	// 有效日期(格式: yyyy:MM:dd)
	// Required: true
	EffectiveDate *string `json:"EffectiveDate" xml:"String"`

	// String
	//
	// 結束日期(格式: yyyy:MM:dd)
	// Required: true
	ExpiringDate *string `json:"ExpiringDate" xml:"String"`

	// GeneralTimetable
	//
	// 定期時刻表資料
	// Required: true
	GeneralTimetable struct {
		PTXServiceDTORailSpecificationV2THSRGeneralTimetable
	} `json:"GeneralTimetable" xml:"GeneralTimetable"`

	// DateTime
	//
	// 發布時間(格式: yyyy-MM-dd)
	UpdateTime string `json:"UpdateTime,omitempty"`

	// Int32
	//
	// 資料版本編號
	// Required: true
	VersionID *int32 `json:"VersionID"`
}

// Validate validates this p t x service d t o rail specification v2 t h s r rail general timetable
func (m *PTXServiceDTORailSpecificationV2THSRRailGeneralTimetable) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEffectiveDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpiringDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGeneralTimetable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTORailSpecificationV2THSRRailGeneralTimetable) validateEffectiveDate(formats strfmt.Registry) error {

	if err := validate.Required("EffectiveDate", "body", m.EffectiveDate); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV2THSRRailGeneralTimetable) validateExpiringDate(formats strfmt.Registry) error {

	if err := validate.Required("ExpiringDate", "body", m.ExpiringDate); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV2THSRRailGeneralTimetable) validateGeneralTimetable(formats strfmt.Registry) error {

	return nil
}

func (m *PTXServiceDTORailSpecificationV2THSRRailGeneralTimetable) validateVersionID(formats strfmt.Registry) error {

	if err := validate.Required("VersionID", "body", m.VersionID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this p t x service d t o rail specification v2 t h s r rail general timetable based on the context it is used
func (m *PTXServiceDTORailSpecificationV2THSRRailGeneralTimetable) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGeneralTimetable(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTORailSpecificationV2THSRRailGeneralTimetable) contextValidateGeneralTimetable(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *PTXServiceDTORailSpecificationV2THSRRailGeneralTimetable) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PTXServiceDTORailSpecificationV2THSRRailGeneralTimetable) UnmarshalBinary(b []byte) error {
	var res PTXServiceDTORailSpecificationV2THSRRailGeneralTimetable
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
