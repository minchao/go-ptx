// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PTXServiceDTORailSpecificationV2MetroAlert Alert
//
// swagger:model PTX.Service.DTO.Rail.Specification.V2.Metro.Alert
type PTXServiceDTORailSpecificationV2MetroAlert struct {

	// String
	//
	// 通阻訊息代碼
	// Required: true
	AlertID *string `json:"AlertID"`

	// String
	//
	// 通阻訊息網址連結
	AlertURL string `json:"AlertURL,omitempty"`

	// String
	//
	// 通阻訊息說明
	// Required: true
	Description *string `json:"Description"`

	// integer
	//
	// 影響方向 : [0:'去程',1:'返程']
	Direction int32 `json:"Direction,omitempty"`

	// String
	//
	// 影響說明
	Effect string `json:"Effect,omitempty"`

	// DateTime
	//
	// 訊息結束日期時間
	EndTime string `json:"EndTime,omitempty"`

	// integer
	//
	// 影響等級程度 : [1:'重度',2:'中度',3:'輕度']
	Level int32 `json:"Level,omitempty"`

	// DateTime
	//
	// 消息發佈日期時間
	PublishTime string `json:"PublishTime,omitempty"`

	// String
	//
	// 影響原因
	Reason string `json:"Reason,omitempty"`

	// AlertScope
	//
	// 影響範圍
	// Required: true
	Scope struct {
		PTXServiceDTORailSpecificationV2MetroMRTAlertListAlertScope
	} `json:"Scope"`

	// DateTime
	//
	// 訊息起始日期時間
	StartTime string `json:"StartTime,omitempty"`

	// integer
	//
	// 營運狀況 : [0:'全線營運停止',1:'全線營運正常',2:'有異常狀況']
	// Required: true
	Status *int32 `json:"Status"`

	// String
	//
	// 通阻訊息標題
	// Required: true
	Title *string `json:"Title"`

	// DateTime
	//
	// 消息更新日期時間
	// Required: true
	UpdateTime *string `json:"UpdateTime"`
}

// Validate validates this p t x service d t o rail specification v2 metro alert
func (m *PTXServiceDTORailSpecificationV2MetroAlert) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlertID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTORailSpecificationV2MetroAlert) validateAlertID(formats strfmt.Registry) error {

	if err := validate.Required("AlertID", "body", m.AlertID); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV2MetroAlert) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("Description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV2MetroAlert) validateScope(formats strfmt.Registry) error {

	return nil
}

func (m *PTXServiceDTORailSpecificationV2MetroAlert) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("Status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV2MetroAlert) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("Title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV2MetroAlert) validateUpdateTime(formats strfmt.Registry) error {

	if err := validate.Required("UpdateTime", "body", m.UpdateTime); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this p t x service d t o rail specification v2 metro alert based on the context it is used
func (m *PTXServiceDTORailSpecificationV2MetroAlert) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateScope(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTORailSpecificationV2MetroAlert) contextValidateScope(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *PTXServiceDTORailSpecificationV2MetroAlert) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PTXServiceDTORailSpecificationV2MetroAlert) UnmarshalBinary(b []byte) error {
	var res PTXServiceDTORailSpecificationV2MetroAlert
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
