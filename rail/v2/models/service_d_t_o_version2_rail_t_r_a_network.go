// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceDTOVersion2RailTRANetwork Network
//
// 臺鐵路網資料
// swagger:model Service.DTO.Version2.Rail.TRA.Network
type ServiceDTOVersion2RailTRANetwork struct {

	// 臺鐵路線資訊
	// Required: true
	Lines []*ServiceDTOVersion2RailTRALineSimple `json:"Lines"`

	// 臺鐵路網代碼
	// Required: true
	NetworkID *string `json:"NetworkID"`

	// 臺鐵路網圖網址URL
	// Required: true
	NetworkMapURL *string `json:"NetworkMapUrl"`

	// 臺鐵路網英文名稱
	// Required: true
	NetworkNameEn *string `json:"NetworkNameEn"`

	// 臺鐵路網中文名稱
	// Required: true
	NetworkNameZh *string `json:"NetworkNameZh"`

	// 營運業者代碼
	// Required: true
	OperatorID *string `json:"OperatorID"`

	// 臺鐵路網英文名稱
	// Required: true
	OperatorNameEn *string `json:"OperatorNameEn"`

	// 臺鐵路網中文名稱
	// Required: true
	OperatorNameZh *string `json:"OperatorNameZh"`

	// DateTime
	//
	// 資料更新日期時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)
	// Required: true
	UpdateTime *string `json:"UpdateTime"`
}

// Validate validates this service d t o version2 rail t r a network
func (m *ServiceDTOVersion2RailTRANetwork) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLines(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkMapURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkNameEn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkNameZh(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperatorID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperatorNameEn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperatorNameZh(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceDTOVersion2RailTRANetwork) validateLines(formats strfmt.Registry) error {

	if err := validate.Required("Lines", "body", m.Lines); err != nil {
		return err
	}

	for i := 0; i < len(m.Lines); i++ {
		if swag.IsZero(m.Lines[i]) { // not required
			continue
		}

		if m.Lines[i] != nil {
			if err := m.Lines[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Lines" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceDTOVersion2RailTRANetwork) validateNetworkID(formats strfmt.Registry) error {

	if err := validate.Required("NetworkID", "body", m.NetworkID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2RailTRANetwork) validateNetworkMapURL(formats strfmt.Registry) error {

	if err := validate.Required("NetworkMapUrl", "body", m.NetworkMapURL); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2RailTRANetwork) validateNetworkNameEn(formats strfmt.Registry) error {

	if err := validate.Required("NetworkNameEn", "body", m.NetworkNameEn); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2RailTRANetwork) validateNetworkNameZh(formats strfmt.Registry) error {

	if err := validate.Required("NetworkNameZh", "body", m.NetworkNameZh); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2RailTRANetwork) validateOperatorID(formats strfmt.Registry) error {

	if err := validate.Required("OperatorID", "body", m.OperatorID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2RailTRANetwork) validateOperatorNameEn(formats strfmt.Registry) error {

	if err := validate.Required("OperatorNameEn", "body", m.OperatorNameEn); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2RailTRANetwork) validateOperatorNameZh(formats strfmt.Registry) error {

	if err := validate.Required("OperatorNameZh", "body", m.OperatorNameZh); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2RailTRANetwork) validateUpdateTime(formats strfmt.Registry) error {

	if err := validate.Required("UpdateTime", "body", m.UpdateTime); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceDTOVersion2RailTRANetwork) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceDTOVersion2RailTRANetwork) UnmarshalBinary(b []byte) error {
	var res ServiceDTOVersion2RailTRANetwork
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
