// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceDTOVersion2RailTHSRRailStationTimetable RailStationTimetable
//
// 高鐵車站站別時刻表資料型別
//
// swagger:model Service.DTO.Version2.Rail.THSR.RailStationTimetable
type ServiceDTOVersion2RailTHSRRailStationTimetable struct {

	// 到站時間(格式: HH:mm:ss)
	// Required: true
	ArrivalTime *string `json:"ArrivalTime"`

	// 離站時間(格式: HH:mm:ss)
	// Required: true
	DepartureTime *string `json:"DepartureTime"`

	// integer
	//
	// 順逆行 : [0:'南下',1:'北上']
	// Required: true
	Direction *int32 `json:"Direction"`

	// 終點車站代號
	// Required: true
	EndingStationID *string `json:"EndingStationID"`

	// 終點車站名稱
	// Required: true
	EndingStationName *string `json:"EndingStationName"`

	// 起點車站代號
	// Required: true
	StartingStationID *string `json:"StartingStationID"`

	// 起點車站名稱
	// Required: true
	StartingStationName *string `json:"StartingStationName"`

	// 車站代號
	// Required: true
	StationID *string `json:"StationID"`

	// NameType
	//
	// 車站名稱
	// Required: true
	StationName *ServiceDTOVersion2BaseNameType `json:"StationName"`

	// 時刻表日期(格式: yyyy-MM-dd)
	// Required: true
	TrainDate *string `json:"TrainDate"`

	// 車次代號
	// Required: true
	TrainNo *string `json:"TrainNo"`

	// DateTime
	//
	// 本平台資料更新時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)
	// Required: true
	UpdateTime *string `json:"UpdateTime"`

	// 資料版本編號
	// Required: true
	VersionID *int32 `json:"VersionID"`
}

// Validate validates this service d t o version2 rail t h s r rail station timetable
func (m *ServiceDTOVersion2RailTHSRRailStationTimetable) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArrivalTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDepartureTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndingStationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndingStationName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartingStationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartingStationName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStationName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrainDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrainNo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceDTOVersion2RailTHSRRailStationTimetable) validateArrivalTime(formats strfmt.Registry) error {

	if err := validate.Required("ArrivalTime", "body", m.ArrivalTime); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2RailTHSRRailStationTimetable) validateDepartureTime(formats strfmt.Registry) error {

	if err := validate.Required("DepartureTime", "body", m.DepartureTime); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2RailTHSRRailStationTimetable) validateDirection(formats strfmt.Registry) error {

	if err := validate.Required("Direction", "body", m.Direction); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2RailTHSRRailStationTimetable) validateEndingStationID(formats strfmt.Registry) error {

	if err := validate.Required("EndingStationID", "body", m.EndingStationID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2RailTHSRRailStationTimetable) validateEndingStationName(formats strfmt.Registry) error {

	if err := validate.Required("EndingStationName", "body", m.EndingStationName); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2RailTHSRRailStationTimetable) validateStartingStationID(formats strfmt.Registry) error {

	if err := validate.Required("StartingStationID", "body", m.StartingStationID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2RailTHSRRailStationTimetable) validateStartingStationName(formats strfmt.Registry) error {

	if err := validate.Required("StartingStationName", "body", m.StartingStationName); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2RailTHSRRailStationTimetable) validateStationID(formats strfmt.Registry) error {

	if err := validate.Required("StationID", "body", m.StationID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2RailTHSRRailStationTimetable) validateStationName(formats strfmt.Registry) error {

	if err := validate.Required("StationName", "body", m.StationName); err != nil {
		return err
	}

	if m.StationName != nil {
		if err := m.StationName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("StationName")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion2RailTHSRRailStationTimetable) validateTrainDate(formats strfmt.Registry) error {

	if err := validate.Required("TrainDate", "body", m.TrainDate); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2RailTHSRRailStationTimetable) validateTrainNo(formats strfmt.Registry) error {

	if err := validate.Required("TrainNo", "body", m.TrainNo); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2RailTHSRRailStationTimetable) validateUpdateTime(formats strfmt.Registry) error {

	if err := validate.Required("UpdateTime", "body", m.UpdateTime); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2RailTHSRRailStationTimetable) validateVersionID(formats strfmt.Registry) error {

	if err := validate.Required("VersionID", "body", m.VersionID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceDTOVersion2RailTHSRRailStationTimetable) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceDTOVersion2RailTHSRRailStationTimetable) UnmarshalBinary(b []byte) error {
	var res ServiceDTOVersion2RailTHSRRailStationTimetable
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
