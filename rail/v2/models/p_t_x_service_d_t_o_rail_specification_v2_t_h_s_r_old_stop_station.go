// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PTXServiceDTORailSpecificationV2THSROldStopStation StopStation
//
// 車次停靠站點組合
//
// swagger:model PTX.Service.DTO.Rail.Specification.V2.THSR.Old.StopStation
type PTXServiceDTORailSpecificationV2THSROldStopStation struct {

	// String
	//
	// 商務席剩餘座位狀態 =  ['O: 尚有座位' or 'L: 座位有限' or 'X: 已無座位']
	// Required: true
	BusinessSeatStatus *string `json:"BusinessSeatStatus" xml:"BusinessSeatStatus"`

	// String
	//
	// 標準席剩餘座位狀態 = ['O: 尚有座位' or 'L: 座位有限' or 'X: 已無座位']
	// Required: true
	StandardSeatStatus *string `json:"StandardSeatStatus" xml:"StandardSeatStatus"`

	// String
	//
	// 車站簡碼(訂票系統用)
	// Required: true
	StationCode *string `json:"StationCode" xml:"StationCode"`

	// String
	//
	// 車站代碼
	// Required: true
	StationID *string `json:"StationID" xml:"StationID"`

	// NameType
	//
	// 車站名稱
	// Required: true
	StationName struct {
		PTXServiceDTOSharedSpecificationV2BaseNameType
	} `json:"StationName" xml:"NameType"`

	// Int32
	//
	// 跑法站序
	// Required: true
	StopSequence *int32 `json:"StopSequence"`
}

// Validate validates this p t x service d t o rail specification v2 t h s r old stop station
func (m *PTXServiceDTORailSpecificationV2THSROldStopStation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBusinessSeatStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStandardSeatStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStationCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStationName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStopSequence(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTORailSpecificationV2THSROldStopStation) validateBusinessSeatStatus(formats strfmt.Registry) error {

	if err := validate.Required("BusinessSeatStatus", "body", m.BusinessSeatStatus); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV2THSROldStopStation) validateStandardSeatStatus(formats strfmt.Registry) error {

	if err := validate.Required("StandardSeatStatus", "body", m.StandardSeatStatus); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV2THSROldStopStation) validateStationCode(formats strfmt.Registry) error {

	if err := validate.Required("StationCode", "body", m.StationCode); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV2THSROldStopStation) validateStationID(formats strfmt.Registry) error {

	if err := validate.Required("StationID", "body", m.StationID); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV2THSROldStopStation) validateStationName(formats strfmt.Registry) error {

	return nil
}

func (m *PTXServiceDTORailSpecificationV2THSROldStopStation) validateStopSequence(formats strfmt.Registry) error {

	if err := validate.Required("StopSequence", "body", m.StopSequence); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this p t x service d t o rail specification v2 t h s r old stop station based on the context it is used
func (m *PTXServiceDTORailSpecificationV2THSROldStopStation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStationName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTORailSpecificationV2THSROldStopStation) contextValidateStationName(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *PTXServiceDTORailSpecificationV2THSROldStopStation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PTXServiceDTORailSpecificationV2THSROldStopStation) UnmarshalBinary(b []byte) error {
	var res PTXServiceDTORailSpecificationV2THSROldStopStation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
