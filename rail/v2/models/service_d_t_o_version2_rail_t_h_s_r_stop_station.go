// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceDTOVersion2RailTHSRStopStation StopStation
//
// 車次停靠站點組合
//
// swagger:model Service.DTO.Version2.Rail.THSR.StopStation
type ServiceDTOVersion2RailTHSRStopStation struct {

	// 商務席剩餘座位狀態 =  ['O: 尚有座位' or 'L: 座位有限' or 'X: 已無座位']
	// Required: true
	BusinessSeatStatus *string `json:"BusinessSeatStatus"`

	// 下一停靠站車站簡碼(訂票系統用)
	// Required: true
	NextStationCode *string `json:"NextStationCode"`

	// 下一停靠站車站代碼
	// Required: true
	NextStationID *string `json:"NextStationID"`

	// NameType
	//
	// 下一停靠站車站名稱
	// Required: true
	NextStationName *ServiceDTOVersion2BaseNameType `json:"NextStationName"`

	// 標準席剩餘座位狀態 = ['O: 尚有座位' or 'L: 座位有限' or 'X: 已無座位']
	// Required: true
	StandardSeatStatus *string `json:"StandardSeatStatus"`

	// 車站簡碼(訂票系統用)
	// Required: true
	StationCode *string `json:"StationCode"`

	// 車站代碼
	// Required: true
	StationID *string `json:"StationID"`

	// NameType
	//
	// 車站名稱
	// Required: true
	StationName *ServiceDTOVersion2BaseNameType `json:"StationName"`

	// 跑法站序
	// Required: true
	StopSequence *int32 `json:"StopSequence"`
}

// Validate validates this service d t o version2 rail t h s r stop station
func (m *ServiceDTOVersion2RailTHSRStopStation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBusinessSeatStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNextStationCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNextStationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNextStationName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStandardSeatStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStationCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStationName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStopSequence(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceDTOVersion2RailTHSRStopStation) validateBusinessSeatStatus(formats strfmt.Registry) error {

	if err := validate.Required("BusinessSeatStatus", "body", m.BusinessSeatStatus); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2RailTHSRStopStation) validateNextStationCode(formats strfmt.Registry) error {

	if err := validate.Required("NextStationCode", "body", m.NextStationCode); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2RailTHSRStopStation) validateNextStationID(formats strfmt.Registry) error {

	if err := validate.Required("NextStationID", "body", m.NextStationID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2RailTHSRStopStation) validateNextStationName(formats strfmt.Registry) error {

	if err := validate.Required("NextStationName", "body", m.NextStationName); err != nil {
		return err
	}

	if m.NextStationName != nil {
		if err := m.NextStationName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("NextStationName")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion2RailTHSRStopStation) validateStandardSeatStatus(formats strfmt.Registry) error {

	if err := validate.Required("StandardSeatStatus", "body", m.StandardSeatStatus); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2RailTHSRStopStation) validateStationCode(formats strfmt.Registry) error {

	if err := validate.Required("StationCode", "body", m.StationCode); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2RailTHSRStopStation) validateStationID(formats strfmt.Registry) error {

	if err := validate.Required("StationID", "body", m.StationID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2RailTHSRStopStation) validateStationName(formats strfmt.Registry) error {

	if err := validate.Required("StationName", "body", m.StationName); err != nil {
		return err
	}

	if m.StationName != nil {
		if err := m.StationName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("StationName")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion2RailTHSRStopStation) validateStopSequence(formats strfmt.Registry) error {

	if err := validate.Required("StopSequence", "body", m.StopSequence); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceDTOVersion2RailTHSRStopStation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceDTOVersion2RailTHSRStopStation) UnmarshalBinary(b []byte) error {
	var res ServiceDTOVersion2RailTHSRStopStation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
