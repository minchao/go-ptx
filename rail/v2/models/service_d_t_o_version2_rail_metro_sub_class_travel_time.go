// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceDTOVersion2RailMetroSubClassTravelTime TravelTime
//
// 站間運行時間資訊
//
// swagger:model Service.DTO.Version2.Rail.Metro.SubClass.TravelTime
type ServiceDTOVersion2RailMetroSubClassTravelTime struct {

	// 起站車站代號
	// Required: true
	FromStationID *string `json:"FromStationID"`

	// NameType
	//
	// 起站車站名稱
	// Required: true
	FromStationName *ServiceDTOVersion2BaseNameType `json:"FromStationName"`

	// 站間行駛時間(秒)
	// Required: true
	RunTime *int32 `json:"RunTime"`

	// 站間序號
	// Required: true
	Sequence *int32 `json:"Sequence"`

	// 起站停靠時間(秒)
	StopTime int32 `json:"StopTime,omitempty"`

	// 迄站車站代號
	// Required: true
	ToStationID *string `json:"ToStationID"`

	// NameType
	//
	// 迄站車站名稱
	// Required: true
	ToStationName *ServiceDTOVersion2BaseNameType `json:"ToStationName"`
}

// Validate validates this service d t o version2 rail metro sub class travel time
func (m *ServiceDTOVersion2RailMetroSubClassTravelTime) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFromStationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFromStationName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSequence(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToStationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToStationName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceDTOVersion2RailMetroSubClassTravelTime) validateFromStationID(formats strfmt.Registry) error {

	if err := validate.Required("FromStationID", "body", m.FromStationID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2RailMetroSubClassTravelTime) validateFromStationName(formats strfmt.Registry) error {

	if err := validate.Required("FromStationName", "body", m.FromStationName); err != nil {
		return err
	}

	if m.FromStationName != nil {
		if err := m.FromStationName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FromStationName")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion2RailMetroSubClassTravelTime) validateRunTime(formats strfmt.Registry) error {

	if err := validate.Required("RunTime", "body", m.RunTime); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2RailMetroSubClassTravelTime) validateSequence(formats strfmt.Registry) error {

	if err := validate.Required("Sequence", "body", m.Sequence); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2RailMetroSubClassTravelTime) validateToStationID(formats strfmt.Registry) error {

	if err := validate.Required("ToStationID", "body", m.ToStationID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2RailMetroSubClassTravelTime) validateToStationName(formats strfmt.Registry) error {

	if err := validate.Required("ToStationName", "body", m.ToStationName); err != nil {
		return err
	}

	if m.ToStationName != nil {
		if err := m.ToStationName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ToStationName")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceDTOVersion2RailMetroSubClassTravelTime) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceDTOVersion2RailMetroSubClassTravelTime) UnmarshalBinary(b []byte) error {
	var res ServiceDTOVersion2RailMetroSubClassTravelTime
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
