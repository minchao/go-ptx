// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PTXServiceDTORailSpecificationV2TRARailODDailyTimetable RailODDailyTimetable
//
// 台鐵起迄站間到離站時刻資料型別
//
// swagger:model PTX.Service.DTO.Rail.Specification.V2.TRA.RailODDailyTimetable
type PTXServiceDTORailSpecificationV2TRARailODDailyTimetable struct {

	// RailDailyTrainInfo
	//
	// 車次資料
	// Required: true
	DailyTrainInfo struct {
		PTXServiceDTORailSpecificationV2TRATimeInfoRailDailyTrainInfo
	} `json:"DailyTrainInfo" xml:"RailDailyTrainInfo"`

	// RailStopTime
	//
	// 迄站停靠時間資料
	// Required: true
	DestinationStopTime struct {
		PTXServiceDTORailSpecificationV2TRATimeInfoRailStopTime
	} `json:"DestinationStopTime" xml:"RailStopTime"`

	// RailStopTime
	//
	// 起站停靠時間資料
	// Required: true
	OriginStopTime struct {
		PTXServiceDTORailSpecificationV2TRATimeInfoRailStopTime
	} `json:"OriginStopTime" xml:"RailStopTime"`

	// String
	//
	// 行駛日期(格式: yyyy:MM:dd)
	// Required: true
	TrainDate *string `json:"TrainDate" xml:"TrainDate"`

	// DateTime
	//
	// 資料更新日期時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)
	// Required: true
	// Format: date-time
	UpdateTime *strfmt.DateTime `json:"UpdateTime"`

	// Int32
	//
	// 資料版本編號
	// Required: true
	VersionID *int32 `json:"VersionID"`
}

// Validate validates this p t x service d t o rail specification v2 t r a rail o d daily timetable
func (m *PTXServiceDTORailSpecificationV2TRARailODDailyTimetable) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDailyTrainInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestinationStopTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOriginStopTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrainDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTORailSpecificationV2TRARailODDailyTimetable) validateDailyTrainInfo(formats strfmt.Registry) error {

	return nil
}

func (m *PTXServiceDTORailSpecificationV2TRARailODDailyTimetable) validateDestinationStopTime(formats strfmt.Registry) error {

	return nil
}

func (m *PTXServiceDTORailSpecificationV2TRARailODDailyTimetable) validateOriginStopTime(formats strfmt.Registry) error {

	return nil
}

func (m *PTXServiceDTORailSpecificationV2TRARailODDailyTimetable) validateTrainDate(formats strfmt.Registry) error {

	if err := validate.Required("TrainDate", "body", m.TrainDate); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV2TRARailODDailyTimetable) validateUpdateTime(formats strfmt.Registry) error {

	if err := validate.Required("UpdateTime", "body", m.UpdateTime); err != nil {
		return err
	}

	if err := validate.FormatOf("UpdateTime", "body", "date-time", m.UpdateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV2TRARailODDailyTimetable) validateVersionID(formats strfmt.Registry) error {

	if err := validate.Required("VersionID", "body", m.VersionID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this p t x service d t o rail specification v2 t r a rail o d daily timetable based on the context it is used
func (m *PTXServiceDTORailSpecificationV2TRARailODDailyTimetable) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDailyTrainInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDestinationStopTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOriginStopTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTORailSpecificationV2TRARailODDailyTimetable) contextValidateDailyTrainInfo(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *PTXServiceDTORailSpecificationV2TRARailODDailyTimetable) contextValidateDestinationStopTime(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *PTXServiceDTORailSpecificationV2TRARailODDailyTimetable) contextValidateOriginStopTime(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *PTXServiceDTORailSpecificationV2TRARailODDailyTimetable) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PTXServiceDTORailSpecificationV2TRARailODDailyTimetable) UnmarshalBinary(b []byte) error {
	var res PTXServiceDTORailSpecificationV2TRARailODDailyTimetable
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
