// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PTXServiceDTORailSpecificationV2MetroLineTransfer LineTransfer
//
// 捷運路線站間轉乘基本資料
//
// swagger:model PTX.Service.DTO.Rail.Specification.V2.Metro.LineTransfer
type PTXServiceDTORailSpecificationV2MetroLineTransfer struct {

	// String
	//
	// 路線間轉乘(起)之路線代碼
	// Required: true
	FromLineID *string `json:"FromLineID" xml:"String"`

	// NameType
	//
	// 路線間轉乘(起)之路線名稱
	// Required: true
	FromLineName struct {
		PTXServiceDTOSharedSpecificationV2BaseNameType
	} `json:"FromLineName" xml:"NameType"`

	// String
	//
	// 路線間轉乘(起)之路線編號
	FromLineNo string `json:"FromLineNo,omitempty" xml:"String,omitempty"`

	// String
	//
	// 路線間轉乘(起)之車站代碼
	// Required: true
	FromStationID *string `json:"FromStationID" xml:"String"`

	// NameType
	//
	// 路線間轉乘(起)之車站名稱
	// Required: true
	FromStationName struct {
		PTXServiceDTOSharedSpecificationV2BaseNameType
	} `json:"FromStationName" xml:"NameType"`

	// integer
	//
	// 是否為站內或站外轉乘 : [0:'站外',1:'站內']
	IsOnSiteTransfer string `json:"IsOnSiteTransfer,omitempty"`

	// DateTime
	//
	// 來源端平台資料更新時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)
	// Required: true
	SrcUpdateTime *string `json:"SrcUpdateTime"`

	// String
	//
	// 路線間轉乘(迄)之路線代碼
	// Required: true
	ToLineID *string `json:"ToLineID" xml:"String"`

	// NameType
	//
	// 路線間轉乘(迄)之路線名稱
	// Required: true
	ToLineName struct {
		PTXServiceDTOSharedSpecificationV2BaseNameType
	} `json:"ToLineName" xml:"NameType"`

	// String
	//
	// 路線間轉乘(迄)之路線編號
	// Required: true
	ToLineNo *string `json:"ToLineNo" xml:"String"`

	// String
	//
	// 路線間轉乘(迄)之車站代碼
	// Required: true
	ToStationID *string `json:"ToStationID" xml:"String"`

	// NameType
	//
	// 路線間轉乘(迄)之車站名稱
	// Required: true
	ToStationName struct {
		PTXServiceDTOSharedSpecificationV2BaseNameType
	} `json:"ToStationName" xml:"NameType"`

	// String
	//
	// 轉乘方式文字描述
	// Required: true
	TransferDescription *string `json:"TransferDescription" xml:"String"`

	// Int32
	//
	// 轉乘耗時參考時間(分)
	// Required: true
	TransferTime *int32 `json:"TransferTime"`

	// DateTime
	//
	// 本平台資料更新時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)
	// Required: true
	UpdateTime *string `json:"UpdateTime"`

	// Int32
	//
	// 資料版本編號
	// Required: true
	VersionID *int32 `json:"VersionID"`
}

// Validate validates this p t x service d t o rail specification v2 metro line transfer
func (m *PTXServiceDTORailSpecificationV2MetroLineTransfer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFromLineID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFromLineName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFromStationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFromStationName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSrcUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToLineID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToLineName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToLineNo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToStationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToStationName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransferDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransferTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTORailSpecificationV2MetroLineTransfer) validateFromLineID(formats strfmt.Registry) error {

	if err := validate.Required("FromLineID", "body", m.FromLineID); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV2MetroLineTransfer) validateFromLineName(formats strfmt.Registry) error {

	return nil
}

func (m *PTXServiceDTORailSpecificationV2MetroLineTransfer) validateFromStationID(formats strfmt.Registry) error {

	if err := validate.Required("FromStationID", "body", m.FromStationID); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV2MetroLineTransfer) validateFromStationName(formats strfmt.Registry) error {

	return nil
}

func (m *PTXServiceDTORailSpecificationV2MetroLineTransfer) validateSrcUpdateTime(formats strfmt.Registry) error {

	if err := validate.Required("SrcUpdateTime", "body", m.SrcUpdateTime); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV2MetroLineTransfer) validateToLineID(formats strfmt.Registry) error {

	if err := validate.Required("ToLineID", "body", m.ToLineID); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV2MetroLineTransfer) validateToLineName(formats strfmt.Registry) error {

	return nil
}

func (m *PTXServiceDTORailSpecificationV2MetroLineTransfer) validateToLineNo(formats strfmt.Registry) error {

	if err := validate.Required("ToLineNo", "body", m.ToLineNo); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV2MetroLineTransfer) validateToStationID(formats strfmt.Registry) error {

	if err := validate.Required("ToStationID", "body", m.ToStationID); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV2MetroLineTransfer) validateToStationName(formats strfmt.Registry) error {

	return nil
}

func (m *PTXServiceDTORailSpecificationV2MetroLineTransfer) validateTransferDescription(formats strfmt.Registry) error {

	if err := validate.Required("TransferDescription", "body", m.TransferDescription); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV2MetroLineTransfer) validateTransferTime(formats strfmt.Registry) error {

	if err := validate.Required("TransferTime", "body", m.TransferTime); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV2MetroLineTransfer) validateUpdateTime(formats strfmt.Registry) error {

	if err := validate.Required("UpdateTime", "body", m.UpdateTime); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV2MetroLineTransfer) validateVersionID(formats strfmt.Registry) error {

	if err := validate.Required("VersionID", "body", m.VersionID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this p t x service d t o rail specification v2 metro line transfer based on the context it is used
func (m *PTXServiceDTORailSpecificationV2MetroLineTransfer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFromLineName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFromStationName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateToLineName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateToStationName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTORailSpecificationV2MetroLineTransfer) contextValidateFromLineName(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *PTXServiceDTORailSpecificationV2MetroLineTransfer) contextValidateFromStationName(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *PTXServiceDTORailSpecificationV2MetroLineTransfer) contextValidateToLineName(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *PTXServiceDTORailSpecificationV2MetroLineTransfer) contextValidateToStationName(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *PTXServiceDTORailSpecificationV2MetroLineTransfer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PTXServiceDTORailSpecificationV2MetroLineTransfer) UnmarshalBinary(b []byte) error {
	var res PTXServiceDTORailSpecificationV2MetroLineTransfer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
