// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PTXServiceDTORailSpecificationV2THSRAlertInfo AlertInfo
//
// 高鐵即時通阻事件資料
//
// swagger:model PTX.Service.DTO.Rail.Specification.V2.THSR.AlertInfo
type PTXServiceDTORailSpecificationV2THSRAlertInfo struct {

	// String
	//
	// 事件簡易描述
	// Required: true
	Description *string `json:"Description" xml:"String"`

	// String
	//
	// 運行方向
	// Required: true
	Direction *string `json:"Direction" xml:"String"`

	// String
	//
	// 影響區間
	// Required: true
	EffectedSection *string `json:"EffectedSection" xml:"String"`

	// String
	//
	// 影響狀態
	// Required: true
	Effects *string `json:"Effects" xml:"String"`

	// integer
	//
	// 動態事件影響等級(本資料僅作參考，實際資料請參考高鐵http://www.thsrc.com.tw/tw/Operation) : [1:'全線正常運行',2:'有異常狀況']
	// Required: true
	Level *string `json:"Level"`

	// DateTime
	//
	// 發生日期時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)
	OccuredTime string `json:"OccuredTime,omitempty"`

	// DateTime
	//
	// 訊息發布日期時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)
	PublishTime string `json:"PublishTime,omitempty"`

	// DateTime
	//
	// 來源端平台資料更新時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)
	// Required: true
	SrcUpdateTime *string `json:"SrcUpdateTime"`

	// String
	//
	// 營運狀態 = ['空白: 正常' or '▲: 其他的異常狀態' or 'X: 全線停止運行']
	// Required: true
	Status *string `json:"Status" xml:"String"`

	// String
	//
	// 標題
	// Required: true
	Title *string `json:"Title" xml:"String"`

	// DateTime
	//
	// 本平台資料更新時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)
	// Required: true
	UpdateTime *string `json:"UpdateTime"`
}

// Validate validates this p t x service d t o rail specification v2 t h s r alert info
func (m *PTXServiceDTORailSpecificationV2THSRAlertInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEffectedSection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEffects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSrcUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTORailSpecificationV2THSRAlertInfo) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("Description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV2THSRAlertInfo) validateDirection(formats strfmt.Registry) error {

	if err := validate.Required("Direction", "body", m.Direction); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV2THSRAlertInfo) validateEffectedSection(formats strfmt.Registry) error {

	if err := validate.Required("EffectedSection", "body", m.EffectedSection); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV2THSRAlertInfo) validateEffects(formats strfmt.Registry) error {

	if err := validate.Required("Effects", "body", m.Effects); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV2THSRAlertInfo) validateLevel(formats strfmt.Registry) error {

	if err := validate.Required("Level", "body", m.Level); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV2THSRAlertInfo) validateSrcUpdateTime(formats strfmt.Registry) error {

	if err := validate.Required("SrcUpdateTime", "body", m.SrcUpdateTime); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV2THSRAlertInfo) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("Status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV2THSRAlertInfo) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("Title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTORailSpecificationV2THSRAlertInfo) validateUpdateTime(formats strfmt.Registry) error {

	if err := validate.Required("UpdateTime", "body", m.UpdateTime); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this p t x service d t o rail specification v2 t h s r alert info based on context it is used
func (m *PTXServiceDTORailSpecificationV2THSRAlertInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PTXServiceDTORailSpecificationV2THSRAlertInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PTXServiceDTORailSpecificationV2THSRAlertInfo) UnmarshalBinary(b []byte) error {
	var res PTXServiceDTORailSpecificationV2THSRAlertInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
