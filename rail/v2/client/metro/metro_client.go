// Code generated by go-swagger; DO NOT EDIT.

package metro

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new metro API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for metro API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
MetroAPIFirstLastTimetable 取得捷運首末班車時刻表資料s

取得捷運首末班車時刻表資料
*/
func (a *Client) MetroAPIFirstLastTimetable(params *MetroAPIFirstLastTimetableParams) (*MetroAPIFirstLastTimetableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMetroAPIFirstLastTimetableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MetroApi_FirstLastTimetable",
		Method:             "GET",
		PathPattern:        "/v2/Rail/Metro/FirstLastTimetable/{Operator}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MetroAPIFirstLastTimetableReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MetroAPIFirstLastTimetableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MetroApi_FirstLastTimetable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MetroAPIFrequency 取得捷運路線發車班距頻率資料s

取得捷運路線發車班距頻率資料
*/
func (a *Client) MetroAPIFrequency(params *MetroAPIFrequencyParams) (*MetroAPIFrequencyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMetroAPIFrequencyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MetroApi_Frequency",
		Method:             "GET",
		PathPattern:        "/v2/Rail/Metro/Frequency/{Operator}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MetroAPIFrequencyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MetroAPIFrequencyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MetroApi_Frequency: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MetroAPILine 取得捷運路線基本資料s

取得捷運路線基本資料
*/
func (a *Client) MetroAPILine(params *MetroAPILineParams) (*MetroAPILineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMetroAPILineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MetroApi_Line",
		Method:             "GET",
		PathPattern:        "/v2/Rail/Metro/Line/{Operator}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MetroAPILineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MetroAPILineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MetroApi_Line: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MetroAPILineTransfer 取得捷運路線站間轉乘基本資料s

取得捷運路線站間轉乘基本資料
*/
func (a *Client) MetroAPILineTransfer(params *MetroAPILineTransferParams) (*MetroAPILineTransferOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMetroAPILineTransferParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MetroApi_LineTransfer",
		Method:             "GET",
		PathPattern:        "/v2/Rail/Metro/LineTransfer/{Operator}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MetroAPILineTransferReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MetroAPILineTransferOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MetroApi_LineTransfer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MetroAPILiveBoard 取得捷運車站別列車即時到離站電子看板資訊s

取得捷運車站別列車即時到離站電子看板資訊
*/
func (a *Client) MetroAPILiveBoard(params *MetroAPILiveBoardParams) (*MetroAPILiveBoardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMetroAPILiveBoardParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MetroApi_LiveBoard",
		Method:             "GET",
		PathPattern:        "/v2/Rail/Metro/LiveBoard/{Operator}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MetroAPILiveBoardReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MetroAPILiveBoardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MetroApi_LiveBoard: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MetroAPINetwork 取得捷運路網資料s

取得捷運路網資料
*/
func (a *Client) MetroAPINetwork(params *MetroAPINetworkParams) (*MetroAPINetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMetroAPINetworkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MetroApi_Network",
		Method:             "GET",
		PathPattern:        "/v2/Rail/Metro/Network/{Operator}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MetroAPINetworkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MetroAPINetworkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MetroApi_Network: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MetroAPIODFare 取得捷運起迄站間票價資料s

取得捷運起迄站間票價資料
*/
func (a *Client) MetroAPIODFare(params *MetroAPIODFareParams) (*MetroAPIODFareOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMetroAPIODFareParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MetroApi_ODFare",
		Method:             "GET",
		PathPattern:        "/v2/Rail/Metro/ODFare/{Operator}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MetroAPIODFareReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MetroAPIODFareOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MetroApi_ODFare: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MetroAPIRoute 取得捷運營運路線基本資料s

取得捷運營運路線基本資料
*/
func (a *Client) MetroAPIRoute(params *MetroAPIRouteParams) (*MetroAPIRouteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMetroAPIRouteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MetroApi_Route",
		Method:             "GET",
		PathPattern:        "/v2/Rail/Metro/Route/{Operator}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MetroAPIRouteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MetroAPIRouteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MetroApi_Route: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MetroAPIS2STravelTime 取得捷運列車站間運行時間資料s

取得捷運列車站間運行時間資料
*/
func (a *Client) MetroAPIS2STravelTime(params *MetroAPIS2STravelTimeParams) (*MetroAPIS2STravelTimeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMetroAPIS2STravelTimeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MetroApi_S2STravelTime",
		Method:             "GET",
		PathPattern:        "/v2/Rail/Metro/S2STravelTime/{Operator}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MetroAPIS2STravelTimeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MetroAPIS2STravelTimeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MetroApi_S2STravelTime: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MetroAPIShape 取得指定營運業者之軌道路網實體路線圖資資料s

取得指定營運業者之軌道路網實體路線圖資資料
*/
func (a *Client) MetroAPIShape(params *MetroAPIShapeParams) (*MetroAPIShapeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMetroAPIShapeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MetroApi_Shape",
		Method:             "GET",
		PathPattern:        "/v2/Rail/Metro/Shape/{Operator}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MetroAPIShapeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MetroAPIShapeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MetroApi_Shape: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MetroAPIStation 取得捷運車站基本資料s

取得捷運車站基本資料
*/
func (a *Client) MetroAPIStation(params *MetroAPIStationParams) (*MetroAPIStationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMetroAPIStationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MetroApi_Station",
		Method:             "GET",
		PathPattern:        "/v2/Rail/Metro/Station/{Operator}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MetroAPIStationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MetroAPIStationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MetroApi_Station: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MetroAPIStationExit 取得捷運車站出入口基本資料s

取得捷運車站出入口基本資料
*/
func (a *Client) MetroAPIStationExit(params *MetroAPIStationExitParams) (*MetroAPIStationExitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMetroAPIStationExitParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MetroApi_StationExit",
		Method:             "GET",
		PathPattern:        "/v2/Rail/Metro/StationExit/{Operator}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MetroAPIStationExitReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MetroAPIStationExitOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MetroApi_StationExit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MetroAPIStationFacility 取得捷運車站設施資料s

取得捷運車站設施資料
*/
func (a *Client) MetroAPIStationFacility(params *MetroAPIStationFacilityParams) (*MetroAPIStationFacilityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMetroAPIStationFacilityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MetroApi_StationFacility",
		Method:             "GET",
		PathPattern:        "/v2/Rail/Metro/StationFacility/{Operator}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MetroAPIStationFacilityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MetroAPIStationFacilityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MetroApi_StationFacility: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MetroAPIStationOfLine 取得捷運路線車站基本資料s

取得捷運路線車站基本資料
*/
func (a *Client) MetroAPIStationOfLine(params *MetroAPIStationOfLineParams) (*MetroAPIStationOfLineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMetroAPIStationOfLineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MetroApi_StationOfLine",
		Method:             "GET",
		PathPattern:        "/v2/Rail/Metro/StationOfLine/{Operator}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MetroAPIStationOfLineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MetroAPIStationOfLineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MetroApi_StationOfLine: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MetroAPIStationOfRoute 取得捷運營運路線車站基本資料s

取得捷運營運路線車站基本資料
*/
func (a *Client) MetroAPIStationOfRoute(params *MetroAPIStationOfRouteParams) (*MetroAPIStationOfRouteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMetroAPIStationOfRouteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MetroApi_StationOfRoute",
		Method:             "GET",
		PathPattern:        "/v2/Rail/Metro/StationOfRoute/{Operator}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MetroAPIStationOfRouteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MetroAPIStationOfRouteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MetroApi_StationOfRoute: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MetroAPIStationTimeTable 取得捷運站別時刻表資料s

取得捷運站別時刻表資料
*/
func (a *Client) MetroAPIStationTimeTable(params *MetroAPIStationTimeTableParams) (*MetroAPIStationTimeTableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMetroAPIStationTimeTableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MetroApi_StationTimeTable",
		Method:             "GET",
		PathPattern:        "/v2/Rail/Metro/StationTimeTable/{Operator}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MetroAPIStationTimeTableReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MetroAPIStationTimeTableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MetroApi_StationTimeTable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
