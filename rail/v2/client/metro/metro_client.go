// Code generated by go-swagger; DO NOT EDIT.

package metro

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new metro API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for metro API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	MetroAPIAlert(params *MetroAPIAlertParams, opts ...ClientOption) (*MetroAPIAlertOK, *MetroAPIAlertStatus299, error)

	MetroAPIFirstLastTimetable(params *MetroAPIFirstLastTimetableParams, opts ...ClientOption) (*MetroAPIFirstLastTimetableOK, *MetroAPIFirstLastTimetableStatus299, error)

	MetroAPIFrequency(params *MetroAPIFrequencyParams, opts ...ClientOption) (*MetroAPIFrequencyOK, *MetroAPIFrequencyStatus299, error)

	MetroAPILine(params *MetroAPILineParams, opts ...ClientOption) (*MetroAPILineOK, *MetroAPILineStatus299, error)

	MetroAPILineTransfer(params *MetroAPILineTransferParams, opts ...ClientOption) (*MetroAPILineTransferOK, *MetroAPILineTransferStatus299, error)

	MetroAPILiveBoard(params *MetroAPILiveBoardParams, opts ...ClientOption) (*MetroAPILiveBoardOK, *MetroAPILiveBoardStatus299, error)

	MetroAPINetwork(params *MetroAPINetworkParams, opts ...ClientOption) (*MetroAPINetworkOK, *MetroAPINetworkStatus299, error)

	MetroAPINews(params *MetroAPINewsParams, opts ...ClientOption) (*MetroAPINewsOK, *MetroAPINewsStatus299, error)

	MetroAPIODFare(params *MetroAPIODFareParams, opts ...ClientOption) (*MetroAPIODFareOK, *MetroAPIODFareStatus299, error)

	MetroAPIRoute(params *MetroAPIRouteParams, opts ...ClientOption) (*MetroAPIRouteOK, *MetroAPIRouteStatus299, error)

	MetroAPIS2STravelTime(params *MetroAPIS2STravelTimeParams, opts ...ClientOption) (*MetroAPIS2STravelTimeOK, *MetroAPIS2STravelTimeStatus299, error)

	MetroAPIShape(params *MetroAPIShapeParams, opts ...ClientOption) (*MetroAPIShapeOK, *MetroAPIShapeStatus299, error)

	MetroAPIStation(params *MetroAPIStationParams, opts ...ClientOption) (*MetroAPIStationOK, *MetroAPIStationStatus299, error)

	MetroAPIStationExit(params *MetroAPIStationExitParams, opts ...ClientOption) (*MetroAPIStationExitOK, *MetroAPIStationExitStatus299, error)

	MetroAPIStationFacility(params *MetroAPIStationFacilityParams, opts ...ClientOption) (*MetroAPIStationFacilityOK, *MetroAPIStationFacilityStatus299, error)

	MetroAPIStationOfLine(params *MetroAPIStationOfLineParams, opts ...ClientOption) (*MetroAPIStationOfLineOK, *MetroAPIStationOfLineStatus299, error)

	MetroAPIStationOfRoute(params *MetroAPIStationOfRouteParams, opts ...ClientOption) (*MetroAPIStationOfRouteOK, *MetroAPIStationOfRouteStatus299, error)

	MetroAPIStationTimeTable(params *MetroAPIStationTimeTableParams, opts ...ClientOption) (*MetroAPIStationTimeTableOK, *MetroAPIStationTimeTableStatus299, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  MetroAPIAlert 取得營運通阻資料s

  取得營運通阻資料
*/
func (a *Client) MetroAPIAlert(params *MetroAPIAlertParams, opts ...ClientOption) (*MetroAPIAlertOK, *MetroAPIAlertStatus299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMetroAPIAlertParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MetroApi_Alert",
		Method:             "GET",
		PathPattern:        "/v2/Rail/Metro/Alert/{Operator}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MetroAPIAlertReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *MetroAPIAlertOK:
		return value, nil, nil
	case *MetroAPIAlertStatus299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for metro: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MetroAPIFirstLastTimetable 取得捷運首末班車時刻表資料s

  取得捷運首末班車時刻表資料
*/
func (a *Client) MetroAPIFirstLastTimetable(params *MetroAPIFirstLastTimetableParams, opts ...ClientOption) (*MetroAPIFirstLastTimetableOK, *MetroAPIFirstLastTimetableStatus299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMetroAPIFirstLastTimetableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MetroApi_FirstLastTimetable",
		Method:             "GET",
		PathPattern:        "/v2/Rail/Metro/FirstLastTimetable/{Operator}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MetroAPIFirstLastTimetableReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *MetroAPIFirstLastTimetableOK:
		return value, nil, nil
	case *MetroAPIFirstLastTimetableStatus299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for metro: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MetroAPIFrequency 取得捷運路線發車班距頻率資料s

  取得捷運路線發車班距頻率資料
*/
func (a *Client) MetroAPIFrequency(params *MetroAPIFrequencyParams, opts ...ClientOption) (*MetroAPIFrequencyOK, *MetroAPIFrequencyStatus299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMetroAPIFrequencyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MetroApi_Frequency",
		Method:             "GET",
		PathPattern:        "/v2/Rail/Metro/Frequency/{Operator}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MetroAPIFrequencyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *MetroAPIFrequencyOK:
		return value, nil, nil
	case *MetroAPIFrequencyStatus299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for metro: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MetroAPILine 取得捷運路線基本資料s

  取得捷運路線基本資料
*/
func (a *Client) MetroAPILine(params *MetroAPILineParams, opts ...ClientOption) (*MetroAPILineOK, *MetroAPILineStatus299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMetroAPILineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MetroApi_Line",
		Method:             "GET",
		PathPattern:        "/v2/Rail/Metro/Line/{Operator}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MetroAPILineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *MetroAPILineOK:
		return value, nil, nil
	case *MetroAPILineStatus299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for metro: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MetroAPILineTransfer 取得捷運路線站間轉乘基本資料s

  取得捷運路線站間轉乘基本資料
*/
func (a *Client) MetroAPILineTransfer(params *MetroAPILineTransferParams, opts ...ClientOption) (*MetroAPILineTransferOK, *MetroAPILineTransferStatus299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMetroAPILineTransferParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MetroApi_LineTransfer",
		Method:             "GET",
		PathPattern:        "/v2/Rail/Metro/LineTransfer/{Operator}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MetroAPILineTransferReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *MetroAPILineTransferOK:
		return value, nil, nil
	case *MetroAPILineTransferStatus299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for metro: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MetroAPILiveBoard 取得捷運車站別列車即時到離站電子看板資訊s

  取得捷運車站別列車即時到離站電子看板資訊
*/
func (a *Client) MetroAPILiveBoard(params *MetroAPILiveBoardParams, opts ...ClientOption) (*MetroAPILiveBoardOK, *MetroAPILiveBoardStatus299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMetroAPILiveBoardParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MetroApi_LiveBoard",
		Method:             "GET",
		PathPattern:        "/v2/Rail/Metro/LiveBoard/{Operator}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MetroAPILiveBoardReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *MetroAPILiveBoardOK:
		return value, nil, nil
	case *MetroAPILiveBoardStatus299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for metro: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MetroAPINetwork 取得捷運路網資料s

  取得捷運路網資料
*/
func (a *Client) MetroAPINetwork(params *MetroAPINetworkParams, opts ...ClientOption) (*MetroAPINetworkOK, *MetroAPINetworkStatus299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMetroAPINetworkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MetroApi_Network",
		Method:             "GET",
		PathPattern:        "/v2/Rail/Metro/Network/{Operator}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MetroAPINetworkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *MetroAPINetworkOK:
		return value, nil, nil
	case *MetroAPINetworkStatus299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for metro: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MetroAPINews 取得最新消息s

  取得最新消息
*/
func (a *Client) MetroAPINews(params *MetroAPINewsParams, opts ...ClientOption) (*MetroAPINewsOK, *MetroAPINewsStatus299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMetroAPINewsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MetroApi_News",
		Method:             "GET",
		PathPattern:        "/v2/Rail/Metro/News/{Operator}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MetroAPINewsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *MetroAPINewsOK:
		return value, nil, nil
	case *MetroAPINewsStatus299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for metro: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MetroAPIODFare 取得捷運起迄站間票價資料s

  取得捷運起迄站間票價資料
*/
func (a *Client) MetroAPIODFare(params *MetroAPIODFareParams, opts ...ClientOption) (*MetroAPIODFareOK, *MetroAPIODFareStatus299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMetroAPIODFareParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MetroApi_ODFare",
		Method:             "GET",
		PathPattern:        "/v2/Rail/Metro/ODFare/{Operator}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MetroAPIODFareReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *MetroAPIODFareOK:
		return value, nil, nil
	case *MetroAPIODFareStatus299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for metro: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MetroAPIRoute 取得捷運營運路線基本資料s

  取得捷運營運路線基本資料
*/
func (a *Client) MetroAPIRoute(params *MetroAPIRouteParams, opts ...ClientOption) (*MetroAPIRouteOK, *MetroAPIRouteStatus299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMetroAPIRouteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MetroApi_Route",
		Method:             "GET",
		PathPattern:        "/v2/Rail/Metro/Route/{Operator}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MetroAPIRouteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *MetroAPIRouteOK:
		return value, nil, nil
	case *MetroAPIRouteStatus299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for metro: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MetroAPIS2STravelTime 取得捷運列車站間運行時間資料s

  取得捷運列車站間運行時間資料
*/
func (a *Client) MetroAPIS2STravelTime(params *MetroAPIS2STravelTimeParams, opts ...ClientOption) (*MetroAPIS2STravelTimeOK, *MetroAPIS2STravelTimeStatus299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMetroAPIS2STravelTimeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MetroApi_S2STravelTime",
		Method:             "GET",
		PathPattern:        "/v2/Rail/Metro/S2STravelTime/{Operator}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MetroAPIS2STravelTimeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *MetroAPIS2STravelTimeOK:
		return value, nil, nil
	case *MetroAPIS2STravelTimeStatus299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for metro: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MetroAPIShape 取得指定營運業者之軌道路網實體路線圖資資料s

  取得指定營運業者之軌道路網實體路線圖資資料
*/
func (a *Client) MetroAPIShape(params *MetroAPIShapeParams, opts ...ClientOption) (*MetroAPIShapeOK, *MetroAPIShapeStatus299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMetroAPIShapeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MetroApi_Shape",
		Method:             "GET",
		PathPattern:        "/v2/Rail/Metro/Shape/{Operator}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MetroAPIShapeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *MetroAPIShapeOK:
		return value, nil, nil
	case *MetroAPIShapeStatus299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for metro: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MetroAPIStation 取得捷運車站基本資料s

  取得捷運車站基本資料
*/
func (a *Client) MetroAPIStation(params *MetroAPIStationParams, opts ...ClientOption) (*MetroAPIStationOK, *MetroAPIStationStatus299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMetroAPIStationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MetroApi_Station",
		Method:             "GET",
		PathPattern:        "/v2/Rail/Metro/Station/{Operator}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MetroAPIStationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *MetroAPIStationOK:
		return value, nil, nil
	case *MetroAPIStationStatus299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for metro: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MetroAPIStationExit 取得捷運車站出入口基本資料s

  取得捷運車站出入口基本資料
*/
func (a *Client) MetroAPIStationExit(params *MetroAPIStationExitParams, opts ...ClientOption) (*MetroAPIStationExitOK, *MetroAPIStationExitStatus299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMetroAPIStationExitParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MetroApi_StationExit",
		Method:             "GET",
		PathPattern:        "/v2/Rail/Metro/StationExit/{Operator}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MetroAPIStationExitReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *MetroAPIStationExitOK:
		return value, nil, nil
	case *MetroAPIStationExitStatus299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for metro: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MetroAPIStationFacility 取得捷運車站設施資料s

  取得捷運車站設施資料
*/
func (a *Client) MetroAPIStationFacility(params *MetroAPIStationFacilityParams, opts ...ClientOption) (*MetroAPIStationFacilityOK, *MetroAPIStationFacilityStatus299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMetroAPIStationFacilityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MetroApi_StationFacility",
		Method:             "GET",
		PathPattern:        "/v2/Rail/Metro/StationFacility/{Operator}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MetroAPIStationFacilityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *MetroAPIStationFacilityOK:
		return value, nil, nil
	case *MetroAPIStationFacilityStatus299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for metro: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MetroAPIStationOfLine 取得捷運路線車站基本資料s

  取得捷運路線車站基本資料
*/
func (a *Client) MetroAPIStationOfLine(params *MetroAPIStationOfLineParams, opts ...ClientOption) (*MetroAPIStationOfLineOK, *MetroAPIStationOfLineStatus299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMetroAPIStationOfLineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MetroApi_StationOfLine",
		Method:             "GET",
		PathPattern:        "/v2/Rail/Metro/StationOfLine/{Operator}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MetroAPIStationOfLineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *MetroAPIStationOfLineOK:
		return value, nil, nil
	case *MetroAPIStationOfLineStatus299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for metro: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MetroAPIStationOfRoute 取得捷運營運路線車站基本資料s

  取得捷運營運路線車站基本資料
*/
func (a *Client) MetroAPIStationOfRoute(params *MetroAPIStationOfRouteParams, opts ...ClientOption) (*MetroAPIStationOfRouteOK, *MetroAPIStationOfRouteStatus299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMetroAPIStationOfRouteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MetroApi_StationOfRoute",
		Method:             "GET",
		PathPattern:        "/v2/Rail/Metro/StationOfRoute/{Operator}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MetroAPIStationOfRouteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *MetroAPIStationOfRouteOK:
		return value, nil, nil
	case *MetroAPIStationOfRouteStatus299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for metro: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MetroAPIStationTimeTable 取得捷運站別時刻表資料s

  取得捷運站別時刻表資料

## 使用注意事項
臺北捷運目前無提供文湖線站別時刻表，建議您可使用［取得捷運路線發車班距頻率資料］取得文湖線列車相關資訊。
*/
func (a *Client) MetroAPIStationTimeTable(params *MetroAPIStationTimeTableParams, opts ...ClientOption) (*MetroAPIStationTimeTableOK, *MetroAPIStationTimeTableStatus299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMetroAPIStationTimeTableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MetroApi_StationTimeTable",
		Method:             "GET",
		PathPattern:        "/v2/Rail/Metro/StationTimeTable/{Operator}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MetroAPIStationTimeTableReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *MetroAPIStationTimeTableOK:
		return value, nil, nil
	case *MetroAPIStationTimeTableStatus299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for metro: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
