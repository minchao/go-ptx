// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PTXServiceDTOShipSpecificationV3Operator Operator
//
// swagger:model PTX.Service.DTO.Ship.Specification.V3.Operator
type PTXServiceDTOShipSpecificationV3Operator struct {

	// String
	//
	// 統一編號
	BAN string `json:"BAN,omitempty"`

	// String
	//
	// 營運業者票價網址連結
	FareURL string `json:"FareURL,omitempty"`

	// String
	//
	// 營運業者地址
	OperatorAddress string `json:"OperatorAddress,omitempty"`

	// String
	//
	// 營運業者電子信箱
	OperatorEmail string `json:"OperatorEmail,omitempty"`

	// String
	//
	// 營運業者代碼
	OperatorID string `json:"OperatorID,omitempty"`

	// String
	//
	// 營運業者Logo網址
	OperatorLogoURL string `json:"OperatorLogoURL,omitempty"`

	// NameType
	//
	// 營運業者名稱
	OperatorName struct {
		PTXServiceDTOSharedSpecificationV3BaseNameType
	} `json:"OperatorName,omitempty"`

	// String
	//
	// 營運業者連絡電話
	OperatorPhone string `json:"OperatorPhone,omitempty"`

	// String
	//
	// 營運業者網址連結
	OperatorURL string `json:"OperatorURL,omitempty"`

	// String
	//
	// 營運業者訂票電話
	ReservationPhone string `json:"ReservationPhone,omitempty"`

	// String
	//
	// 營運業者訂票網站
	ReservationURL string `json:"ReservationURL,omitempty"`
}

// Validate validates this p t x service d t o ship specification v3 operator
func (m *PTXServiceDTOShipSpecificationV3Operator) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOperatorName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTOShipSpecificationV3Operator) validateOperatorName(formats strfmt.Registry) error {
	if swag.IsZero(m.OperatorName) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this p t x service d t o ship specification v3 operator based on the context it is used
func (m *PTXServiceDTOShipSpecificationV3Operator) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOperatorName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTOShipSpecificationV3Operator) contextValidateOperatorName(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *PTXServiceDTOShipSpecificationV3Operator) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PTXServiceDTOShipSpecificationV3Operator) UnmarshalBinary(b []byte) error {
	var res PTXServiceDTOShipSpecificationV3Operator
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
