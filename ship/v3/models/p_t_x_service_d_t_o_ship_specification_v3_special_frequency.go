// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PTXServiceDTOShipSpecificationV3SpecialFrequency SpecialFrequency
//
// swagger:model PTX.Service.DTO.Ship.Specification.V3.SpecialFrequency
type PTXServiceDTOShipSpecificationV3SpecialFrequency struct {

	// String
	//
	// 結束時間
	// Required: true
	EndTime *string `json:"EndTime" xml:"EndTime"`

	// Int32
	//
	// 最大班距時間
	// Required: true
	MaxHeadwayMins *int32 `json:"MaxHeadwayMins"`

	// Int32
	//
	// 最小班距時間
	// Required: true
	MinHeadwayMins *int32 `json:"MinHeadwayMins"`

	// String
	//
	// 尖離峰狀態[0:'離峰',1:'尖峰']
	PeakFlag string `json:"PeakFlag,omitempty" xml:"PeakFlag,omitempty"`

	// ServiceDay
	//
	// 服務日型態
	ServiceDay struct {
		PTXServiceDTOShipSpecificationV3ServiceDay
	} `json:"ServiceDay,omitempty" xml:"ServiceDay,omitempty"`

	// SpecialDays
	//
	// 特殊營運日
	SpecialDays struct {
		PTXServiceDTOShipSpecificationV3SpecialDays
	} `json:"SpecialDays,omitempty" xml:"SpecialDays,omitempty"`

	// String
	//
	// 開始時間
	// Required: true
	StartTime *string `json:"StartTime" xml:"StartTime"`
}

// Validate validates this p t x service d t o ship specification v3 special frequency
func (m *PTXServiceDTOShipSpecificationV3SpecialFrequency) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxHeadwayMins(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinHeadwayMins(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceDay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpecialDays(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTOShipSpecificationV3SpecialFrequency) validateEndTime(formats strfmt.Registry) error {

	if err := validate.Required("EndTime", "body", m.EndTime); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTOShipSpecificationV3SpecialFrequency) validateMaxHeadwayMins(formats strfmt.Registry) error {

	if err := validate.Required("MaxHeadwayMins", "body", m.MaxHeadwayMins); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTOShipSpecificationV3SpecialFrequency) validateMinHeadwayMins(formats strfmt.Registry) error {

	if err := validate.Required("MinHeadwayMins", "body", m.MinHeadwayMins); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTOShipSpecificationV3SpecialFrequency) validateServiceDay(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceDay) { // not required
		return nil
	}

	return nil
}

func (m *PTXServiceDTOShipSpecificationV3SpecialFrequency) validateSpecialDays(formats strfmt.Registry) error {
	if swag.IsZero(m.SpecialDays) { // not required
		return nil
	}

	return nil
}

func (m *PTXServiceDTOShipSpecificationV3SpecialFrequency) validateStartTime(formats strfmt.Registry) error {

	if err := validate.Required("StartTime", "body", m.StartTime); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this p t x service d t o ship specification v3 special frequency based on the context it is used
func (m *PTXServiceDTOShipSpecificationV3SpecialFrequency) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateServiceDay(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSpecialDays(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTOShipSpecificationV3SpecialFrequency) contextValidateServiceDay(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *PTXServiceDTOShipSpecificationV3SpecialFrequency) contextValidateSpecialDays(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *PTXServiceDTOShipSpecificationV3SpecialFrequency) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PTXServiceDTOShipSpecificationV3SpecialFrequency) UnmarshalBinary(b []byte) error {
	var res PTXServiceDTOShipSpecificationV3SpecialFrequency
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
