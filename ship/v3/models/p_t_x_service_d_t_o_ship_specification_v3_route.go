// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PTXServiceDTOShipSpecificationV3Route Route
//
// swagger:model PTX.Service.DTO.Ship.Specification.V3.Route
type PTXServiceDTOShipSpecificationV3Route struct {

	// String
	//
	// 航線描述
	Description string `json:"Description,omitempty"`

	// String
	//
	// 航線迄點港口代碼
	EndPortID string `json:"EndPortID,omitempty"`

	// String
	//
	// 航線迄點港口名稱
	EndPortName string `json:"EndPortName,omitempty"`

	// Array
	//
	// 營運業者
	Operators []*PTXServiceDTOShipSpecificationV3Operators `json:"Operators"`

	// Single
	//
	// 航線哩程
	RouteDistance float32 `json:"RouteDistance,omitempty"`

	// String
	//
	// 航線代碼
	RouteID string `json:"RouteID,omitempty"`

	// String
	//
	// 航運路線簡圖網址
	RouteMapURL string `json:"RouteMapURL,omitempty"`

	// NameType
	//
	// 航線名稱
	RouteName struct {
		PTXServiceDTOSharedSpecificationV3BaseNameType
	} `json:"RouteName,omitempty"`

	// integer
	//
	// 航線種類 : [1:'國內航線',2:'離島航線',3:'兩岸航線',4:'其他']
	RouteType int32 `json:"RouteType,omitempty"`

	// String
	//
	// 航線起點港口代碼
	StartPortID string `json:"StartPortID,omitempty"`

	// String
	//
	// 航線起點港口名稱
	StartPortName string `json:"StartPortName,omitempty"`

	// NameType
	//
	// 票價描述
	TicketPriceDescription struct {
		PTXServiceDTOSharedSpecificationV3BaseNameType
	} `json:"TicketPriceDescription,omitempty"`

	// String
	//
	// 氣象預報連結
	WeatherURL string `json:"WeatherURL,omitempty"`
}

// Validate validates this p t x service d t o ship specification v3 route
func (m *PTXServiceDTOShipSpecificationV3Route) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOperators(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouteName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTicketPriceDescription(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTOShipSpecificationV3Route) validateOperators(formats strfmt.Registry) error {

	if swag.IsZero(m.Operators) { // not required
		return nil
	}

	for i := 0; i < len(m.Operators); i++ {
		if swag.IsZero(m.Operators[i]) { // not required
			continue
		}

		if m.Operators[i] != nil {
			if err := m.Operators[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Operators" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PTXServiceDTOShipSpecificationV3Route) validateRouteName(formats strfmt.Registry) error {

	if swag.IsZero(m.RouteName) { // not required
		return nil
	}

	return nil
}

func (m *PTXServiceDTOShipSpecificationV3Route) validateTicketPriceDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.TicketPriceDescription) { // not required
		return nil
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PTXServiceDTOShipSpecificationV3Route) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PTXServiceDTOShipSpecificationV3Route) UnmarshalBinary(b []byte) error {
	var res PTXServiceDTOShipSpecificationV3Route
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
