// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PTXServiceDTOShipSpecificationV3Port Port
//
// swagger:model PTX.Service.DTO.Ship.Specification.V3.Port
type PTXServiceDTOShipSpecificationV3Port struct {

	// String
	//
	// 港口所屬城市
	// Required: true
	City *string `json:"City" xml:"City"`

	// String
	//
	// 城市簡碼
	// Required: true
	CityCode *string `json:"CityCode" xml:"CityCode"`

	// String
	//
	// 港口所屬國家
	// Required: true
	Country *string `json:"Country" xml:"Country"`

	// String
	//
	// 國家簡碼
	// Required: true
	CountryCode *string `json:"CountryCode" xml:"CountryCode"`

	// String
	//
	// 港口地址
	PortAddress string `json:"PortAddress,omitempty" xml:"PortAddress,omitempty"`

	// String
	//
	// 港口簡碼
	PortCode string `json:"PortCode,omitempty" xml:"PortCode,omitempty"`

	// String
	//
	// 港口代碼
	// Required: true
	PortID *string `json:"PortID" xml:"PortID"`

	// NameType
	//
	// 港口名稱
	// Required: true
	PortName struct {
		PTXServiceDTOSharedSpecificationV3BaseNameType
	} `json:"PortName" xml:"NameType"`

	// String
	//
	// 港口聯繫電話
	PortPhone string `json:"PortPhone,omitempty" xml:"PortPhone,omitempty"`

	// PointType
	//
	// 港口位置座標
	// Required: true
	PortPosition struct {
		PTXServiceDTOShipSpecificationV3PointType
	} `json:"PortPosition" xml:"PointType"`

	// String
	//
	// 港口官網網址
	PortURL string `json:"PortURL,omitempty" xml:"PortURL,omitempty"`
}

// Validate validates this p t x service d t o ship specification v3 port
func (m *PTXServiceDTOShipSpecificationV3Port) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCityCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountryCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePortID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePortName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePortPosition(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTOShipSpecificationV3Port) validateCity(formats strfmt.Registry) error {

	if err := validate.Required("City", "body", m.City); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTOShipSpecificationV3Port) validateCityCode(formats strfmt.Registry) error {

	if err := validate.Required("CityCode", "body", m.CityCode); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTOShipSpecificationV3Port) validateCountry(formats strfmt.Registry) error {

	if err := validate.Required("Country", "body", m.Country); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTOShipSpecificationV3Port) validateCountryCode(formats strfmt.Registry) error {

	if err := validate.Required("CountryCode", "body", m.CountryCode); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTOShipSpecificationV3Port) validatePortID(formats strfmt.Registry) error {

	if err := validate.Required("PortID", "body", m.PortID); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTOShipSpecificationV3Port) validatePortName(formats strfmt.Registry) error {

	return nil
}

func (m *PTXServiceDTOShipSpecificationV3Port) validatePortPosition(formats strfmt.Registry) error {

	return nil
}

// ContextValidate validate this p t x service d t o ship specification v3 port based on the context it is used
func (m *PTXServiceDTOShipSpecificationV3Port) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePortName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePortPosition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTOShipSpecificationV3Port) contextValidatePortName(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *PTXServiceDTOShipSpecificationV3Port) contextValidatePortPosition(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *PTXServiceDTOShipSpecificationV3Port) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PTXServiceDTOShipSpecificationV3Port) UnmarshalBinary(b []byte) error {
	var res PTXServiceDTOShipSpecificationV3Port
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
