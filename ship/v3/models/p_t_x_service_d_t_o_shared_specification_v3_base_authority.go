// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PTXServiceDTOSharedSpecificationV3BaseAuthority Authority
//
// 業管機關
//
// swagger:model PTX.Service.DTO.Shared.Specification.V3.Base.Authority
type PTXServiceDTOSharedSpecificationV3BaseAuthority struct {

	// String
	//
	// 業管機關地址
	// Required: true
	AuthorityAddress *string `json:"AuthorityAddress"`

	// String
	//
	// 業管機關簡碼
	// Required: true
	AuthorityCode *string `json:"AuthorityCode"`

	// String
	//
	// 業管機關電子信箱
	// Required: true
	AuthorityEmail *string `json:"AuthorityEmail"`

	// String
	//
	// 業管機關代號
	AuthorityID string `json:"AuthorityID,omitempty"`

	// NameType
	//
	// 業管機關名稱
	// Required: true
	AuthorityName struct {
		PTXServiceDTOSharedSpecificationV3BaseNameType
	} `json:"AuthorityName"`

	// String
	//
	// 業管機關識別代碼(可參閱: https://oid.nat.gov.tw/OIDWeb/)
	// Required: true
	AuthorityOID *string `json:"AuthorityOID"`

	// String
	//
	// 業管機關連絡電話
	// Required: true
	AuthorityPhone *string `json:"AuthorityPhone"`

	// String
	//
	// 業管機關官網網址
	AuthorityURL string `json:"AuthorityUrl,omitempty"`

	// Int32
	//
	// 對應至程式所定義之Enum
	EnumID int32 `json:"EnumID,omitempty"`

	// Boolean
	//
	// 是否為航空資料之權責單位
	IsAirDataAuth bool `json:"IsAirDataAuth,omitempty"`

	// Boolean
	//
	// 是否為自行車資料之權責單位
	IsBikeDataAuth bool `json:"IsBikeDataAuth,omitempty"`

	// Boolean
	//
	// 是否為公車資料之權責單位
	IsBusDataAuth bool `json:"IsBusDataAuth,omitempty"`

	// Boolean
	//
	// 是否為軌道資料之權責單位
	IsRailDataAuth bool `json:"IsRailDataAuth,omitempty"`

	// Boolean
	//
	// 是否為航運資料之權責單位
	IsShipDataAuth bool `json:"IsShipDataAuth,omitempty"`

	// Boolean
	//
	// 是否為觀光資料之權責單位
	IsTourismDataAuth bool `json:"IsTourismDataAuth,omitempty"`

	// String
	//
	// 業管機關Logo網址
	LogoURL string `json:"LogoURL,omitempty"`

	// Guid
	//
	// 資料唯一碼
	// Format: uuid
	PKBaseAuthority strfmt.UUID `json:"PK_BaseAuthority,omitempty"`

	// DateTime
	//
	// 資料更新日期時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)
	// Required: true
	UpdateTime *string `json:"UpdateTime"`
}

// Validate validates this p t x service d t o shared specification v3 base authority
func (m *PTXServiceDTOSharedSpecificationV3BaseAuthority) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthorityAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthorityCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthorityEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthorityName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthorityOID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthorityPhone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePKBaseAuthority(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTOSharedSpecificationV3BaseAuthority) validateAuthorityAddress(formats strfmt.Registry) error {

	if err := validate.Required("AuthorityAddress", "body", m.AuthorityAddress); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTOSharedSpecificationV3BaseAuthority) validateAuthorityCode(formats strfmt.Registry) error {

	if err := validate.Required("AuthorityCode", "body", m.AuthorityCode); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTOSharedSpecificationV3BaseAuthority) validateAuthorityEmail(formats strfmt.Registry) error {

	if err := validate.Required("AuthorityEmail", "body", m.AuthorityEmail); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTOSharedSpecificationV3BaseAuthority) validateAuthorityName(formats strfmt.Registry) error {

	return nil
}

func (m *PTXServiceDTOSharedSpecificationV3BaseAuthority) validateAuthorityOID(formats strfmt.Registry) error {

	if err := validate.Required("AuthorityOID", "body", m.AuthorityOID); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTOSharedSpecificationV3BaseAuthority) validateAuthorityPhone(formats strfmt.Registry) error {

	if err := validate.Required("AuthorityPhone", "body", m.AuthorityPhone); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTOSharedSpecificationV3BaseAuthority) validatePKBaseAuthority(formats strfmt.Registry) error {

	if swag.IsZero(m.PKBaseAuthority) { // not required
		return nil
	}

	if err := validate.FormatOf("PK_BaseAuthority", "body", "uuid", m.PKBaseAuthority.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTOSharedSpecificationV3BaseAuthority) validateUpdateTime(formats strfmt.Registry) error {

	if err := validate.Required("UpdateTime", "body", m.UpdateTime); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PTXServiceDTOSharedSpecificationV3BaseAuthority) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PTXServiceDTOSharedSpecificationV3BaseAuthority) UnmarshalBinary(b []byte) error {
	var res PTXServiceDTOSharedSpecificationV3BaseAuthority
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
