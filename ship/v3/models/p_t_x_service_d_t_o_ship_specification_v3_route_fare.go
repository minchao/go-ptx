// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PTXServiceDTOShipSpecificationV3RouteFare RouteFare
//
// swagger:model PTX.Service.DTO.Ship.Specification.V3.RouteFare
type PTXServiceDTOShipSpecificationV3RouteFare struct {

	// String
	//
	// 票價代碼
	FareID string `json:"FareID,omitempty" xml:"FareID,omitempty"`

	// Array
	//
	// 起迄站間票價資訊
	// Required: true
	ODFares []*PTXServiceDTOShipSpecificationV3ODFare "json:\"ODFares\" xml:\"List`1\""

	// String
	//
	// 營運業者代碼
	// Required: true
	OperatorID *string `json:"OperatorID" xml:"OperatorID"`

	// String
	//
	// 航線代碼
	// Required: true
	RouteID *string `json:"RouteID" xml:"RouteID"`

	// NameType
	//
	// 航線名稱
	// Required: true
	RouteName struct {
		PTXServiceDTOSharedSpecificationV3BaseNameType
	} `json:"RouteName" xml:"NameType"`
}

// Validate validates this p t x service d t o ship specification v3 route fare
func (m *PTXServiceDTOShipSpecificationV3RouteFare) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateODFares(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperatorID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouteID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouteName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTOShipSpecificationV3RouteFare) validateODFares(formats strfmt.Registry) error {

	if err := validate.Required("ODFares", "body", m.ODFares); err != nil {
		return err
	}

	for i := 0; i < len(m.ODFares); i++ {
		if swag.IsZero(m.ODFares[i]) { // not required
			continue
		}

		if m.ODFares[i] != nil {
			if err := m.ODFares[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ODFares" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ODFares" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PTXServiceDTOShipSpecificationV3RouteFare) validateOperatorID(formats strfmt.Registry) error {

	if err := validate.Required("OperatorID", "body", m.OperatorID); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTOShipSpecificationV3RouteFare) validateRouteID(formats strfmt.Registry) error {

	if err := validate.Required("RouteID", "body", m.RouteID); err != nil {
		return err
	}

	return nil
}

func (m *PTXServiceDTOShipSpecificationV3RouteFare) validateRouteName(formats strfmt.Registry) error {

	return nil
}

// ContextValidate validate this p t x service d t o ship specification v3 route fare based on the context it is used
func (m *PTXServiceDTOShipSpecificationV3RouteFare) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateODFares(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRouteName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTOShipSpecificationV3RouteFare) contextValidateODFares(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ODFares); i++ {

		if m.ODFares[i] != nil {
			if err := m.ODFares[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ODFares" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ODFares" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PTXServiceDTOShipSpecificationV3RouteFare) contextValidateRouteName(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *PTXServiceDTOShipSpecificationV3RouteFare) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PTXServiceDTOShipSpecificationV3RouteFare) UnmarshalBinary(b []byte) error {
	var res PTXServiceDTOShipSpecificationV3RouteFare
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
