// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PTXServiceDTOShipSpecificationV3GeneralTimetable GeneralTimetable
//
// swagger:model PTX.Service.DTO.Ship.Specification.V3.GeneralTimetable
type PTXServiceDTOShipSpecificationV3GeneralTimetable struct {

	// ServiceDay
	//
	// 服務日型態
	ServiceDay struct {
		PTXServiceDTOShipSpecificationV3ServiceDay
	} `json:"ServiceDay,omitempty" xml:"ServiceDay,omitempty"`

	// Array
	//
	// 航線停靠資料
	// Required: true
	Stoptimes []*PTXServiceDTOShipSpecificationV3Stoptime "json:\"Stoptimes\" xml:\"List`1\""

	// String
	//
	// 班次代碼
	// Required: true
	TripID *string `json:"TripID" xml:"TripID"`
}

// Validate validates this p t x service d t o ship specification v3 general timetable
func (m *PTXServiceDTOShipSpecificationV3GeneralTimetable) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateServiceDay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStoptimes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTripID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTOShipSpecificationV3GeneralTimetable) validateServiceDay(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceDay) { // not required
		return nil
	}

	return nil
}

func (m *PTXServiceDTOShipSpecificationV3GeneralTimetable) validateStoptimes(formats strfmt.Registry) error {

	if err := validate.Required("Stoptimes", "body", m.Stoptimes); err != nil {
		return err
	}

	for i := 0; i < len(m.Stoptimes); i++ {
		if swag.IsZero(m.Stoptimes[i]) { // not required
			continue
		}

		if m.Stoptimes[i] != nil {
			if err := m.Stoptimes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Stoptimes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Stoptimes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PTXServiceDTOShipSpecificationV3GeneralTimetable) validateTripID(formats strfmt.Registry) error {

	if err := validate.Required("TripID", "body", m.TripID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this p t x service d t o ship specification v3 general timetable based on the context it is used
func (m *PTXServiceDTOShipSpecificationV3GeneralTimetable) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateServiceDay(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStoptimes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTXServiceDTOShipSpecificationV3GeneralTimetable) contextValidateServiceDay(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *PTXServiceDTOShipSpecificationV3GeneralTimetable) contextValidateStoptimes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Stoptimes); i++ {

		if m.Stoptimes[i] != nil {
			if err := m.Stoptimes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Stoptimes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Stoptimes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PTXServiceDTOShipSpecificationV3GeneralTimetable) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PTXServiceDTOShipSpecificationV3GeneralTimetable) UnmarshalBinary(b []byte) error {
	var res PTXServiceDTOShipSpecificationV3GeneralTimetable
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
