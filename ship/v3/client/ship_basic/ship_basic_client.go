// Code generated by go-swagger; DO NOT EDIT.

package ship_basic

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new ship basic API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for ship basic API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ShipBasicAuthority3236(params *ShipBasicAuthority3236Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShipBasicAuthority3236OK, *ShipBasicAuthority3236Status299, error)

	ShipBasicPort3231(params *ShipBasicPort3231Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShipBasicPort3231OK, *ShipBasicPort3231Status299, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ShipBasicAuthority3236 取得業管機關資料s
*/
func (a *Client) ShipBasicAuthority3236(params *ShipBasicAuthority3236Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShipBasicAuthority3236OK, *ShipBasicAuthority3236Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShipBasicAuthority3236Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "Ship_Basic_Authority_3236",
		Method:             "GET",
		PathPattern:        "/v3/Ship/Basic/Authority",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShipBasicAuthority3236Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ShipBasicAuthority3236OK:
		return value, nil, nil
	case *ShipBasicAuthority3236Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ship_basic: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShipBasicPort3231 取得港口資料s
*/
func (a *Client) ShipBasicPort3231(params *ShipBasicPort3231Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShipBasicPort3231OK, *ShipBasicPort3231Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShipBasicPort3231Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "Ship_Basic_Port_3231",
		Method:             "GET",
		PathPattern:        "/v3/Ship/Basic/Port",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShipBasicPort3231Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ShipBasicPort3231OK:
		return value, nil, nil
	case *ShipBasicPort3231Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ship_basic: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
