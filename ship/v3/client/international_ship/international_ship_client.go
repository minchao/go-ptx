// Code generated by go-swagger; DO NOT EDIT.

package international_ship

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new international ship API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for international ship API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ShipInternationalAlert(params *ShipInternationalAlertParams, opts ...ClientOption) (*ShipInternationalAlertOK, *ShipInternationalAlertStatus299, error)

	ShipInternationalDailySchedule(params *ShipInternationalDailyScheduleParams, opts ...ClientOption) (*ShipInternationalDailyScheduleOK, *ShipInternationalDailyScheduleStatus299, error)

	ShipInternationalDailySchedule1(params *ShipInternationalDailySchedule1Params, opts ...ClientOption) (*ShipInternationalDailySchedule1OK, *ShipInternationalDailySchedule1Status299, error)

	ShipInternationalLivePosition(params *ShipInternationalLivePositionParams, opts ...ClientOption) (*ShipInternationalLivePositionOK, *ShipInternationalLivePositionStatus299, error)

	ShipInternationalNews(params *ShipInternationalNewsParams, opts ...ClientOption) (*ShipInternationalNewsOK, *ShipInternationalNewsStatus299, error)

	ShipInternationalOperator(params *ShipInternationalOperatorParams, opts ...ClientOption) (*ShipInternationalOperatorOK, *ShipInternationalOperatorStatus299, error)

	ShipInternationalRoute(params *ShipInternationalRouteParams, opts ...ClientOption) (*ShipInternationalRouteOK, *ShipInternationalRouteStatus299, error)

	ShipInternationalSpecificSchedule(params *ShipInternationalSpecificScheduleParams, opts ...ClientOption) (*ShipInternationalSpecificScheduleOK, *ShipInternationalSpecificScheduleStatus299, error)

	ShipInternationalSpecificSchedule1(params *ShipInternationalSpecificSchedule1Params, opts ...ClientOption) (*ShipInternationalSpecificSchedule1OK, *ShipInternationalSpecificSchedule1Status299, error)

	ShipInternationalStopOfRoute(params *ShipInternationalStopOfRouteParams, opts ...ClientOption) (*ShipInternationalStopOfRouteOK, *ShipInternationalStopOfRouteStatus299, error)

	ShipInternationalVessel(params *ShipInternationalVesselParams, opts ...ClientOption) (*ShipInternationalVesselOK, *ShipInternationalVesselStatus299, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ShipInternationalAlert 取得國際航運之營運通阻資料s
*/
func (a *Client) ShipInternationalAlert(params *ShipInternationalAlertParams, opts ...ClientOption) (*ShipInternationalAlertOK, *ShipInternationalAlertStatus299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShipInternationalAlertParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Ship_International_Alert",
		Method:             "GET",
		PathPattern:        "/v3/Ship/Alert/International",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShipInternationalAlertReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ShipInternationalAlertOK:
		return value, nil, nil
	case *ShipInternationalAlertStatus299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for international_ship: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShipInternationalDailySchedule 取得國際航運之每日班表資料s
*/
func (a *Client) ShipInternationalDailySchedule(params *ShipInternationalDailyScheduleParams, opts ...ClientOption) (*ShipInternationalDailyScheduleOK, *ShipInternationalDailyScheduleStatus299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShipInternationalDailyScheduleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Ship_International_DailySchedule",
		Method:             "GET",
		PathPattern:        "/v3/Ship/DailySchedule/International",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShipInternationalDailyScheduleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ShipInternationalDailyScheduleOK:
		return value, nil, nil
	case *ShipInternationalDailyScheduleStatus299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for international_ship: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShipInternationalDailySchedule1 取得國際航運指定s 航線 航運之每日班表資料
*/
func (a *Client) ShipInternationalDailySchedule1(params *ShipInternationalDailySchedule1Params, opts ...ClientOption) (*ShipInternationalDailySchedule1OK, *ShipInternationalDailySchedule1Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShipInternationalDailySchedule1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "Ship_International_DailySchedule_1",
		Method:             "GET",
		PathPattern:        "/v3/Ship/DailySchedule/International/{RouteID}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShipInternationalDailySchedule1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ShipInternationalDailySchedule1OK:
		return value, nil, nil
	case *ShipInternationalDailySchedule1Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for international_ship: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShipInternationalLivePosition 取得國際航運之船舶即時位置資料s
*/
func (a *Client) ShipInternationalLivePosition(params *ShipInternationalLivePositionParams, opts ...ClientOption) (*ShipInternationalLivePositionOK, *ShipInternationalLivePositionStatus299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShipInternationalLivePositionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Ship_International_LivePosition",
		Method:             "GET",
		PathPattern:        "/v3/Ship/LivePosition/International",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShipInternationalLivePositionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ShipInternationalLivePositionOK:
		return value, nil, nil
	case *ShipInternationalLivePositionStatus299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for international_ship: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShipInternationalNews 取得國際航運之最新消息資料s
*/
func (a *Client) ShipInternationalNews(params *ShipInternationalNewsParams, opts ...ClientOption) (*ShipInternationalNewsOK, *ShipInternationalNewsStatus299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShipInternationalNewsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Ship_International_News",
		Method:             "GET",
		PathPattern:        "/v3/Ship/News/International",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShipInternationalNewsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ShipInternationalNewsOK:
		return value, nil, nil
	case *ShipInternationalNewsStatus299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for international_ship: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShipInternationalOperator 取得國際航運之營運業者資料s
*/
func (a *Client) ShipInternationalOperator(params *ShipInternationalOperatorParams, opts ...ClientOption) (*ShipInternationalOperatorOK, *ShipInternationalOperatorStatus299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShipInternationalOperatorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Ship_International_Operator",
		Method:             "GET",
		PathPattern:        "/v3/Ship/Operator/International",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShipInternationalOperatorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ShipInternationalOperatorOK:
		return value, nil, nil
	case *ShipInternationalOperatorStatus299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for international_ship: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShipInternationalRoute 取得國際航運之航線資料s
*/
func (a *Client) ShipInternationalRoute(params *ShipInternationalRouteParams, opts ...ClientOption) (*ShipInternationalRouteOK, *ShipInternationalRouteStatus299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShipInternationalRouteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Ship_International_Route",
		Method:             "GET",
		PathPattern:        "/v3/Ship/Route/International",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShipInternationalRouteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ShipInternationalRouteOK:
		return value, nil, nil
	case *ShipInternationalRouteStatus299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for international_ship: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShipInternationalSpecificSchedule 取得國際航運之特殊班表資料s
*/
func (a *Client) ShipInternationalSpecificSchedule(params *ShipInternationalSpecificScheduleParams, opts ...ClientOption) (*ShipInternationalSpecificScheduleOK, *ShipInternationalSpecificScheduleStatus299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShipInternationalSpecificScheduleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Ship_International_SpecificSchedule",
		Method:             "GET",
		PathPattern:        "/v3/Ship/SpecificSchedule/International",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShipInternationalSpecificScheduleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ShipInternationalSpecificScheduleOK:
		return value, nil, nil
	case *ShipInternationalSpecificScheduleStatus299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for international_ship: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShipInternationalSpecificSchedule1 取得國際航運指定s 航線 航運之特殊班表資料
*/
func (a *Client) ShipInternationalSpecificSchedule1(params *ShipInternationalSpecificSchedule1Params, opts ...ClientOption) (*ShipInternationalSpecificSchedule1OK, *ShipInternationalSpecificSchedule1Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShipInternationalSpecificSchedule1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "Ship_International_SpecificSchedule_1",
		Method:             "GET",
		PathPattern:        "/v3/Ship/SpecificSchedule/International/{RouteID}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShipInternationalSpecificSchedule1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ShipInternationalSpecificSchedule1OK:
		return value, nil, nil
	case *ShipInternationalSpecificSchedule1Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for international_ship: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShipInternationalStopOfRoute 取得國際航運之航線靠港順序資料s
*/
func (a *Client) ShipInternationalStopOfRoute(params *ShipInternationalStopOfRouteParams, opts ...ClientOption) (*ShipInternationalStopOfRouteOK, *ShipInternationalStopOfRouteStatus299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShipInternationalStopOfRouteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Ship_International_StopOfRoute",
		Method:             "GET",
		PathPattern:        "/v3/Ship/StopOfRoute/International",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShipInternationalStopOfRouteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ShipInternationalStopOfRouteOK:
		return value, nil, nil
	case *ShipInternationalStopOfRouteStatus299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for international_ship: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShipInternationalVessel 取得國際航運之船舶資料s
*/
func (a *Client) ShipInternationalVessel(params *ShipInternationalVesselParams, opts ...ClientOption) (*ShipInternationalVesselOK, *ShipInternationalVesselStatus299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShipInternationalVesselParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Ship_International_Vessel",
		Method:             "GET",
		PathPattern:        "/v3/Ship/Vessel/International",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShipInternationalVesselReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ShipInternationalVesselOK:
		return value, nil, nil
	case *ShipInternationalVesselStatus299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for international_ship: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
