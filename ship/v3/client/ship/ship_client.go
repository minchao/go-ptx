// Code generated by go-swagger; DO NOT EDIT.

package ship

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new ship API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for ship API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	ShipAPIAuthority(params *ShipAPIAuthorityParams) (*ShipAPIAuthorityOK, error)

	ShipAPIGeneralSchedule(params *ShipAPIGeneralScheduleParams) (*ShipAPIGeneralScheduleOK, error)

	ShipAPIGeneralSchedule1(params *ShipAPIGeneralSchedule1Params) (*ShipAPIGeneralSchedule1OK, error)

	ShipAPILivePosition(params *ShipAPILivePositionParams) (*ShipAPILivePositionOK, error)

	ShipAPIOperator(params *ShipAPIOperatorParams) (*ShipAPIOperatorOK, error)

	ShipAPIPort(params *ShipAPIPortParams) (*ShipAPIPortOK, error)

	ShipAPIRoute(params *ShipAPIRouteParams) (*ShipAPIRouteOK, error)

	ShipAPIRouteFare(params *ShipAPIRouteFareParams) (*ShipAPIRouteFareOK, error)

	ShipAPIRouteFare1(params *ShipAPIRouteFare1Params) (*ShipAPIRouteFare1OK, error)

	ShipAPIRoute1(params *ShipAPIRoute1Params) (*ShipAPIRoute1OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ShipAPIAuthority 取得業管機關資料s
*/
func (a *Client) ShipAPIAuthority(params *ShipAPIAuthorityParams) (*ShipAPIAuthorityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShipAPIAuthorityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ShipApi Authority",
		Method:             "GET",
		PathPattern:        "/v3/Ship/Authority",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShipAPIAuthorityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShipAPIAuthorityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ShipApi Authority: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShipAPIGeneralSchedule 取得定期班表資料s
*/
func (a *Client) ShipAPIGeneralSchedule(params *ShipAPIGeneralScheduleParams) (*ShipAPIGeneralScheduleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShipAPIGeneralScheduleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ShipApi_GeneralSchedule",
		Method:             "GET",
		PathPattern:        "/v3/Ship/GeneralSchedule",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShipAPIGeneralScheduleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShipAPIGeneralScheduleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ShipApi_GeneralSchedule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShipAPIGeneralSchedule1 取得s 指定航線 定期班表資料
*/
func (a *Client) ShipAPIGeneralSchedule1(params *ShipAPIGeneralSchedule1Params) (*ShipAPIGeneralSchedule1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShipAPIGeneralSchedule1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ShipApi_GeneralSchedule_1",
		Method:             "GET",
		PathPattern:        "/v3/Ship/GeneralSchedule/{RouteID}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShipAPIGeneralSchedule1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShipAPIGeneralSchedule1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ShipApi_GeneralSchedule_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShipAPILivePosition 取得航運船舶即時位置資料s
*/
func (a *Client) ShipAPILivePosition(params *ShipAPILivePositionParams) (*ShipAPILivePositionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShipAPILivePositionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ShipApi_LivePosition",
		Method:             "GET",
		PathPattern:        "/v3/Ship/LivePosition",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShipAPILivePositionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShipAPILivePositionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ShipApi_LivePosition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShipAPIOperator 取得營運業者資料s
*/
func (a *Client) ShipAPIOperator(params *ShipAPIOperatorParams) (*ShipAPIOperatorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShipAPIOperatorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ShipApi_Operator",
		Method:             "GET",
		PathPattern:        "/v3/Ship/Operator",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShipAPIOperatorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShipAPIOperatorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ShipApi_Operator: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShipAPIPort 取得港口資料s
*/
func (a *Client) ShipAPIPort(params *ShipAPIPortParams) (*ShipAPIPortOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShipAPIPortParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ShipApi_Port",
		Method:             "GET",
		PathPattern:        "/v3/Ship/Port",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShipAPIPortReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShipAPIPortOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ShipApi_Port: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShipAPIRoute 取得航運路線資料s
*/
func (a *Client) ShipAPIRoute(params *ShipAPIRouteParams) (*ShipAPIRouteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShipAPIRouteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ShipApi_Route",
		Method:             "GET",
		PathPattern:        "/v3/Ship/Route",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShipAPIRouteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShipAPIRouteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ShipApi_Route: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShipAPIRouteFare 取得航線票價資料s
*/
func (a *Client) ShipAPIRouteFare(params *ShipAPIRouteFareParams) (*ShipAPIRouteFareOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShipAPIRouteFareParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ShipApi_RouteFare",
		Method:             "GET",
		PathPattern:        "/v3/Ship/RouteFare",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShipAPIRouteFareReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShipAPIRouteFareOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ShipApi_RouteFare: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShipAPIRouteFare1 取得s 指定航線 票價資料
*/
func (a *Client) ShipAPIRouteFare1(params *ShipAPIRouteFare1Params) (*ShipAPIRouteFare1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShipAPIRouteFare1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ShipApi_RouteFare_1",
		Method:             "GET",
		PathPattern:        "/v3/Ship/RouteFare/{RouteID}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShipAPIRouteFare1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShipAPIRouteFare1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ShipApi_RouteFare_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShipAPIRoute1 取得s 指定航線 資料
*/
func (a *Client) ShipAPIRoute1(params *ShipAPIRoute1Params) (*ShipAPIRoute1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShipAPIRoute1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ShipApi_Route_1",
		Method:             "GET",
		PathPattern:        "/v3/Ship/Route/{RouteID}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShipAPIRoute1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShipAPIRoute1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ShipApi_Route_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
