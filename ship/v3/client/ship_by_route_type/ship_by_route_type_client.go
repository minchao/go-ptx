// Code generated by go-swagger; DO NOT EDIT.

package ship_by_route_type

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new ship by route type API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for ship by route type API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ShipRouteTypeDailySchedule(params *ShipRouteTypeDailyScheduleParams, opts ...ClientOption) (*ShipRouteTypeDailyScheduleOK, *ShipRouteTypeDailyScheduleStatus299, error)

	ShipRouteTypeDailySchedule2(params *ShipRouteTypeDailySchedule2Params, opts ...ClientOption) (*ShipRouteTypeDailySchedule2OK, *ShipRouteTypeDailySchedule2Status299, error)

	ShipRouteTypeRoute(params *ShipRouteTypeRouteParams, opts ...ClientOption) (*ShipRouteTypeRouteOK, *ShipRouteTypeRouteStatus299, error)

	ShipRouteTypeSpecificSchedule(params *ShipRouteTypeSpecificScheduleParams, opts ...ClientOption) (*ShipRouteTypeSpecificScheduleOK, *ShipRouteTypeSpecificScheduleStatus299, error)

	ShipRouteTypeSpecificSchedule2(params *ShipRouteTypeSpecificSchedule2Params, opts ...ClientOption) (*ShipRouteTypeSpecificSchedule2OK, *ShipRouteTypeSpecificSchedule2Status299, error)

	ShipRouteTypeStopOfRoute(params *ShipRouteTypeStopOfRouteParams, opts ...ClientOption) (*ShipRouteTypeStopOfRouteOK, *ShipRouteTypeStopOfRouteStatus299, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ShipRouteTypeDailySchedule 取得指定s 航線類別 的全臺航運之每日班表資料
*/
func (a *Client) ShipRouteTypeDailySchedule(params *ShipRouteTypeDailyScheduleParams, opts ...ClientOption) (*ShipRouteTypeDailyScheduleOK, *ShipRouteTypeDailyScheduleStatus299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShipRouteTypeDailyScheduleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Ship_RouteType_DailySchedule",
		Method:             "GET",
		PathPattern:        "/v3/Ship/DailySchedule/RouteType/{RouteType}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShipRouteTypeDailyScheduleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ShipRouteTypeDailyScheduleOK:
		return value, nil, nil
	case *ShipRouteTypeDailyScheduleStatus299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ship_by_route_type: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShipRouteTypeDailySchedule2 取得指定s 航線 的全臺航運之每日班表資料
*/
func (a *Client) ShipRouteTypeDailySchedule2(params *ShipRouteTypeDailySchedule2Params, opts ...ClientOption) (*ShipRouteTypeDailySchedule2OK, *ShipRouteTypeDailySchedule2Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShipRouteTypeDailySchedule2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "Ship_RouteType_DailySchedule2",
		Method:             "GET",
		PathPattern:        "/v3/Ship/DailySchedule/RouteID/{RouteID}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShipRouteTypeDailySchedule2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ShipRouteTypeDailySchedule2OK:
		return value, nil, nil
	case *ShipRouteTypeDailySchedule2Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ship_by_route_type: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShipRouteTypeRoute 取得指定s 航線類別 的全臺航運之航線資料
*/
func (a *Client) ShipRouteTypeRoute(params *ShipRouteTypeRouteParams, opts ...ClientOption) (*ShipRouteTypeRouteOK, *ShipRouteTypeRouteStatus299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShipRouteTypeRouteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Ship_RouteType_Route",
		Method:             "GET",
		PathPattern:        "/v3/Ship/Route/RouteType/{RouteType}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShipRouteTypeRouteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ShipRouteTypeRouteOK:
		return value, nil, nil
	case *ShipRouteTypeRouteStatus299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ship_by_route_type: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShipRouteTypeSpecificSchedule 取得指定s 航線類別 的全臺航運之特殊班表資料
*/
func (a *Client) ShipRouteTypeSpecificSchedule(params *ShipRouteTypeSpecificScheduleParams, opts ...ClientOption) (*ShipRouteTypeSpecificScheduleOK, *ShipRouteTypeSpecificScheduleStatus299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShipRouteTypeSpecificScheduleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Ship_RouteType_SpecificSchedule",
		Method:             "GET",
		PathPattern:        "/v3/Ship/SpecificSchedule/RouteType/{RouteType}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShipRouteTypeSpecificScheduleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ShipRouteTypeSpecificScheduleOK:
		return value, nil, nil
	case *ShipRouteTypeSpecificScheduleStatus299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ship_by_route_type: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShipRouteTypeSpecificSchedule2 取得指定s 航線 的全臺航運之特殊班表資料
*/
func (a *Client) ShipRouteTypeSpecificSchedule2(params *ShipRouteTypeSpecificSchedule2Params, opts ...ClientOption) (*ShipRouteTypeSpecificSchedule2OK, *ShipRouteTypeSpecificSchedule2Status299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShipRouteTypeSpecificSchedule2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "Ship_RouteType_SpecificSchedule2",
		Method:             "GET",
		PathPattern:        "/v3/Ship/SpecificSchedule/RouteID/{RouteID}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShipRouteTypeSpecificSchedule2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ShipRouteTypeSpecificSchedule2OK:
		return value, nil, nil
	case *ShipRouteTypeSpecificSchedule2Status299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ship_by_route_type: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShipRouteTypeStopOfRoute 取得指定s 航線類別 之航線靠港順序資料
*/
func (a *Client) ShipRouteTypeStopOfRoute(params *ShipRouteTypeStopOfRouteParams, opts ...ClientOption) (*ShipRouteTypeStopOfRouteOK, *ShipRouteTypeStopOfRouteStatus299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShipRouteTypeStopOfRouteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Ship_RouteType_StopOfRoute",
		Method:             "GET",
		PathPattern:        "/v3/Ship/StopOfRoute/RouteType/{RouteType}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShipRouteTypeStopOfRouteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ShipRouteTypeStopOfRouteOK:
		return value, nil, nil
	case *ShipRouteTypeStopOfRouteStatus299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ship_by_route_type: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
