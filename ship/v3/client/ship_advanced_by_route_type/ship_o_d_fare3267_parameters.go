// Code generated by go-swagger; DO NOT EDIT.

package ship_advanced_by_route_type

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewShipODFare3267Params creates a new ShipODFare3267Params object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewShipODFare3267Params() *ShipODFare3267Params {
	return &ShipODFare3267Params{
		timeout: cr.DefaultTimeout,
	}
}

// NewShipODFare3267ParamsWithTimeout creates a new ShipODFare3267Params object
// with the ability to set a timeout on a request.
func NewShipODFare3267ParamsWithTimeout(timeout time.Duration) *ShipODFare3267Params {
	return &ShipODFare3267Params{
		timeout: timeout,
	}
}

// NewShipODFare3267ParamsWithContext creates a new ShipODFare3267Params object
// with the ability to set a context for a request.
func NewShipODFare3267ParamsWithContext(ctx context.Context) *ShipODFare3267Params {
	return &ShipODFare3267Params{
		Context: ctx,
	}
}

// NewShipODFare3267ParamsWithHTTPClient creates a new ShipODFare3267Params object
// with the ability to set a custom HTTPClient for a request.
func NewShipODFare3267ParamsWithHTTPClient(client *http.Client) *ShipODFare3267Params {
	return &ShipODFare3267Params{
		HTTPClient: client,
	}
}

/* ShipODFare3267Params contains all the parameters to send to the API endpoint
   for the ship o d fare 3267 operation.

   Typically these are written to a http.Request.
*/
type ShipODFare3267Params struct {

	/* DollarFilter.

	   過濾
	*/
	DollarFilter *string

	/* DollarFormat.

	   指定來源格式
	*/
	DollarFormat string

	/* DollarOrderby.

	   排序
	*/
	DollarOrderby *string

	/* DollarSelect.

	   挑選
	*/
	DollarSelect *string

	/* DollarSkip.

	   跳過前幾筆
	*/
	DollarSkip *string

	/* DollarTop.

	   取前幾筆

	   Default: 30
	*/
	DollarTop *int64

	/* DestinationPortID.

	   指定[迄]之票價資料
	*/
	DestinationPortID string

	/* OriginPortID.

	   指定[起]之票價資料
	*/
	OriginPortID string

	/* Health.

	   加入參數'?health=true'即可查詢此API服務的健康狀態
	*/
	Health *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the ship o d fare 3267 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ShipODFare3267Params) WithDefaults() *ShipODFare3267Params {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the ship o d fare 3267 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ShipODFare3267Params) SetDefaults() {
	var (
		dollarTopDefault = int64(30)
	)

	val := ShipODFare3267Params{
		DollarTop: &dollarTopDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the ship o d fare 3267 params
func (o *ShipODFare3267Params) WithTimeout(timeout time.Duration) *ShipODFare3267Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the ship o d fare 3267 params
func (o *ShipODFare3267Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the ship o d fare 3267 params
func (o *ShipODFare3267Params) WithContext(ctx context.Context) *ShipODFare3267Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the ship o d fare 3267 params
func (o *ShipODFare3267Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the ship o d fare 3267 params
func (o *ShipODFare3267Params) WithHTTPClient(client *http.Client) *ShipODFare3267Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the ship o d fare 3267 params
func (o *ShipODFare3267Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDollarFilter adds the dollarFilter to the ship o d fare 3267 params
func (o *ShipODFare3267Params) WithDollarFilter(dollarFilter *string) *ShipODFare3267Params {
	o.SetDollarFilter(dollarFilter)
	return o
}

// SetDollarFilter adds the dollarFilter to the ship o d fare 3267 params
func (o *ShipODFare3267Params) SetDollarFilter(dollarFilter *string) {
	o.DollarFilter = dollarFilter
}

// WithDollarFormat adds the dollarFormat to the ship o d fare 3267 params
func (o *ShipODFare3267Params) WithDollarFormat(dollarFormat string) *ShipODFare3267Params {
	o.SetDollarFormat(dollarFormat)
	return o
}

// SetDollarFormat adds the dollarFormat to the ship o d fare 3267 params
func (o *ShipODFare3267Params) SetDollarFormat(dollarFormat string) {
	o.DollarFormat = dollarFormat
}

// WithDollarOrderby adds the dollarOrderby to the ship o d fare 3267 params
func (o *ShipODFare3267Params) WithDollarOrderby(dollarOrderby *string) *ShipODFare3267Params {
	o.SetDollarOrderby(dollarOrderby)
	return o
}

// SetDollarOrderby adds the dollarOrderby to the ship o d fare 3267 params
func (o *ShipODFare3267Params) SetDollarOrderby(dollarOrderby *string) {
	o.DollarOrderby = dollarOrderby
}

// WithDollarSelect adds the dollarSelect to the ship o d fare 3267 params
func (o *ShipODFare3267Params) WithDollarSelect(dollarSelect *string) *ShipODFare3267Params {
	o.SetDollarSelect(dollarSelect)
	return o
}

// SetDollarSelect adds the dollarSelect to the ship o d fare 3267 params
func (o *ShipODFare3267Params) SetDollarSelect(dollarSelect *string) {
	o.DollarSelect = dollarSelect
}

// WithDollarSkip adds the dollarSkip to the ship o d fare 3267 params
func (o *ShipODFare3267Params) WithDollarSkip(dollarSkip *string) *ShipODFare3267Params {
	o.SetDollarSkip(dollarSkip)
	return o
}

// SetDollarSkip adds the dollarSkip to the ship o d fare 3267 params
func (o *ShipODFare3267Params) SetDollarSkip(dollarSkip *string) {
	o.DollarSkip = dollarSkip
}

// WithDollarTop adds the dollarTop to the ship o d fare 3267 params
func (o *ShipODFare3267Params) WithDollarTop(dollarTop *int64) *ShipODFare3267Params {
	o.SetDollarTop(dollarTop)
	return o
}

// SetDollarTop adds the dollarTop to the ship o d fare 3267 params
func (o *ShipODFare3267Params) SetDollarTop(dollarTop *int64) {
	o.DollarTop = dollarTop
}

// WithDestinationPortID adds the destinationPortID to the ship o d fare 3267 params
func (o *ShipODFare3267Params) WithDestinationPortID(destinationPortID string) *ShipODFare3267Params {
	o.SetDestinationPortID(destinationPortID)
	return o
}

// SetDestinationPortID adds the destinationPortId to the ship o d fare 3267 params
func (o *ShipODFare3267Params) SetDestinationPortID(destinationPortID string) {
	o.DestinationPortID = destinationPortID
}

// WithOriginPortID adds the originPortID to the ship o d fare 3267 params
func (o *ShipODFare3267Params) WithOriginPortID(originPortID string) *ShipODFare3267Params {
	o.SetOriginPortID(originPortID)
	return o
}

// SetOriginPortID adds the originPortId to the ship o d fare 3267 params
func (o *ShipODFare3267Params) SetOriginPortID(originPortID string) {
	o.OriginPortID = originPortID
}

// WithHealth adds the health to the ship o d fare 3267 params
func (o *ShipODFare3267Params) WithHealth(health *string) *ShipODFare3267Params {
	o.SetHealth(health)
	return o
}

// SetHealth adds the health to the ship o d fare 3267 params
func (o *ShipODFare3267Params) SetHealth(health *string) {
	o.Health = health
}

// WriteToRequest writes these params to a swagger request
func (o *ShipODFare3267Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DollarFilter != nil {

		// query param $filter
		var qrDollarFilter string

		if o.DollarFilter != nil {
			qrDollarFilter = *o.DollarFilter
		}
		qDollarFilter := qrDollarFilter
		if qDollarFilter != "" {

			if err := r.SetQueryParam("$filter", qDollarFilter); err != nil {
				return err
			}
		}
	}

	// query param $format
	qrDollarFormat := o.DollarFormat
	qDollarFormat := qrDollarFormat
	if qDollarFormat != "" {

		if err := r.SetQueryParam("$format", qDollarFormat); err != nil {
			return err
		}
	}

	if o.DollarOrderby != nil {

		// query param $orderby
		var qrDollarOrderby string

		if o.DollarOrderby != nil {
			qrDollarOrderby = *o.DollarOrderby
		}
		qDollarOrderby := qrDollarOrderby
		if qDollarOrderby != "" {

			if err := r.SetQueryParam("$orderby", qDollarOrderby); err != nil {
				return err
			}
		}
	}

	if o.DollarSelect != nil {

		// query param $select
		var qrDollarSelect string

		if o.DollarSelect != nil {
			qrDollarSelect = *o.DollarSelect
		}
		qDollarSelect := qrDollarSelect
		if qDollarSelect != "" {

			if err := r.SetQueryParam("$select", qDollarSelect); err != nil {
				return err
			}
		}
	}

	if o.DollarSkip != nil {

		// query param $skip
		var qrDollarSkip string

		if o.DollarSkip != nil {
			qrDollarSkip = *o.DollarSkip
		}
		qDollarSkip := qrDollarSkip
		if qDollarSkip != "" {

			if err := r.SetQueryParam("$skip", qDollarSkip); err != nil {
				return err
			}
		}
	}

	if o.DollarTop != nil {

		// query param $top
		var qrDollarTop int64

		if o.DollarTop != nil {
			qrDollarTop = *o.DollarTop
		}
		qDollarTop := swag.FormatInt64(qrDollarTop)
		if qDollarTop != "" {

			if err := r.SetQueryParam("$top", qDollarTop); err != nil {
				return err
			}
		}
	}

	// path param DestinationPortID
	if err := r.SetPathParam("DestinationPortID", o.DestinationPortID); err != nil {
		return err
	}

	// path param OriginPortID
	if err := r.SetPathParam("OriginPortID", o.OriginPortID); err != nil {
		return err
	}

	if o.Health != nil {

		// query param health
		var qrHealth string

		if o.Health != nil {
			qrHealth = *o.Health
		}
		qHealth := qrHealth
		if qHealth != "" {

			if err := r.SetQueryParam("health", qHealth); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
