// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceDTOVersion2BusBusSubRoute BusSubRoute
//
// 附屬路線資料型別
// swagger:model Service.DTO.Version2.Bus.BusSubRoute
type ServiceDTOVersion2BusBusSubRoute struct {

	// integer
	//
	// 去返程 : [0:'去程',1:'返程',2:'迴圈',255:'未知']
	// Required: true
	Direction *int32 `json:"Direction"`

	// 平日第一班發車時間
	FirstBusTime string `json:"FirstBusTime,omitempty"`

	// 車頭描述
	Headsign string `json:"Headsign,omitempty"`

	// 車頭英文描述
	HeadsignEn string `json:"HeadsignEn,omitempty"`

	// 假日去程第一班發車時間
	HolidayFirstBusTime string `json:"HolidayFirstBusTime,omitempty"`

	// 假日返程第一班發車時間
	HolidayLastBusTime string `json:"HolidayLastBusTime,omitempty"`

	// 平日返程第一班發車時間
	LastBusTime string `json:"LastBusTime,omitempty"`

	// 營運業者代碼
	// Required: true
	OperatorIDs []string `json:"OperatorIDs"`

	// 地區既用中之附屬路線代碼(為原資料內碼)
	// Required: true
	SubRouteID *string `json:"SubRouteID"`

	// NameType
	//
	// 附屬路線名稱
	// Required: true
	SubRouteName *ServiceDTOVersion2BaseNameType `json:"SubRouteName"`

	// 附屬路線唯一識別代碼，規則為 {業管機關簡碼} + {SubRouteID}，其中 {業管機關簡碼} 可於Authority API中的AuthorityCode欄位查詢
	// Required: true
	SubRouteUID *string `json:"SubRouteUID"`
}

// Validate validates this service d t o version2 bus bus sub route
func (m *ServiceDTOVersion2BusBusSubRoute) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperatorIDs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubRouteID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubRouteName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubRouteUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceDTOVersion2BusBusSubRoute) validateDirection(formats strfmt.Registry) error {

	if err := validate.Required("Direction", "body", m.Direction); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2BusBusSubRoute) validateOperatorIDs(formats strfmt.Registry) error {

	if err := validate.Required("OperatorIDs", "body", m.OperatorIDs); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2BusBusSubRoute) validateSubRouteID(formats strfmt.Registry) error {

	if err := validate.Required("SubRouteID", "body", m.SubRouteID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2BusBusSubRoute) validateSubRouteName(formats strfmt.Registry) error {

	if err := validate.Required("SubRouteName", "body", m.SubRouteName); err != nil {
		return err
	}

	if m.SubRouteName != nil {
		if err := m.SubRouteName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SubRouteName")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion2BusBusSubRoute) validateSubRouteUID(formats strfmt.Registry) error {

	if err := validate.Required("SubRouteUID", "body", m.SubRouteUID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceDTOVersion2BusBusSubRoute) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceDTOVersion2BusBusSubRoute) UnmarshalBinary(b []byte) error {
	var res ServiceDTOVersion2BusBusSubRoute
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
