// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceDTOVersion2TaiwanTripBusBusA1Data BusA1Data
//
// 定時車機資料型別
// swagger:model Service.DTO.Version2.TaiwanTripBus.BusA1Data
type ServiceDTOVersion2TaiwanTripBusBusA1Data struct {

	// 方位角
	// Required: true
	Azimuth *float64 `json:"Azimuth"`

	// PointType
	//
	// 車輛位置經度
	BusPosition *ServiceDTOVersion2BasePointType `json:"BusPosition,omitempty"`

	// 行車狀況
	// Required: true
	// Enum: [0 1 2 3 4 5 90 91 98 99 100 101 255]
	BusStatus *int64 `json:"BusStatus"`

	// 去返程
	// Enum: [0 1 2 255]
	Direction int64 `json:"Direction,omitempty"`

	// 勤務狀態
	// Required: true
	// Enum: [0 1 2]
	DutyStatus *int64 `json:"DutyStatus"`

	// DateTime
	//
	// 車機時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)
	// Required: true
	GPSTime *string `json:"GPSTime"`

	// 資料型態種類
	// Enum: [0 1 2]
	MessageType int64 `json:"MessageType,omitempty"`

	// 營運業者代碼
	OperatorID string `json:"OperatorID,omitempty"`

	// 車牌號碼
	// Required: true
	PlateNumb *string `json:"PlateNumb"`

	// 地區既用中之路線代碼(為原資料內碼)
	RouteID string `json:"RouteID,omitempty"`

	// 路線唯一識別代碼，規則為 {業管機關代碼} + {RouteID}，其中 {業管機關代碼} 可於Authority API中的AuthorityCode欄位查詢
	RouteUID string `json:"RouteUID,omitempty"`

	// 行駛速度(kph)
	// Required: true
	Speed *float64 `json:"Speed"`

	// DateTime
	//
	// 來源端平台接收時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)
	SrcRecTime string `json:"SrcRecTime,omitempty"`

	// DateTime
	//
	// 來源端平台資料更新時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)
	SrcUpdateTime string `json:"SrcUpdateTime,omitempty"`

	// 地區既用中之子路線代碼(為原資料內碼)
	SubRouteID string `json:"SubRouteID,omitempty"`

	// NameType
	//
	// 子路線名稱
	SubRouteName *ServiceDTOVersion2BaseNameType `json:"SubRouteName,omitempty"`

	// 子路線唯一識別代碼，規則為 {業管機關代碼} + {SubRouteID}，其中 {業管機關代碼} 可於Authority API中的AuthorityCode欄位查詢
	SubRouteUID string `json:"SubRouteUID,omitempty"`

	// NameType
	//
	// 台灣好行路線名稱
	TaiwanTripName *ServiceDTOVersion2BaseNameType `json:"TaiwanTripName,omitempty"`

	// DateTime
	//
	// 車機資料傳輸時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)
	TransTime string `json:"TransTime,omitempty"`

	// DateTime
	//
	// 本平台資料更新時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)
	// Required: true
	UpdateTime *string `json:"UpdateTime"`
}

// Validate validates this service d t o version2 taiwan trip bus bus a1 data
func (m *ServiceDTOVersion2TaiwanTripBusBusA1Data) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAzimuth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBusPosition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBusStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDutyStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGPSTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessageType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlateNumb(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpeed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubRouteName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaiwanTripName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceDTOVersion2TaiwanTripBusBusA1Data) validateAzimuth(formats strfmt.Registry) error {

	if err := validate.Required("Azimuth", "body", m.Azimuth); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2TaiwanTripBusBusA1Data) validateBusPosition(formats strfmt.Registry) error {

	if swag.IsZero(m.BusPosition) { // not required
		return nil
	}

	if m.BusPosition != nil {
		if err := m.BusPosition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("BusPosition")
			}
			return err
		}
	}

	return nil
}

var serviceDTOVersion2TaiwanTripBusBusA1DataTypeBusStatusPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[0,1,2,3,4,5,90,91,98,99,100,101,255]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceDTOVersion2TaiwanTripBusBusA1DataTypeBusStatusPropEnum = append(serviceDTOVersion2TaiwanTripBusBusA1DataTypeBusStatusPropEnum, v)
	}
}

// prop value enum
func (m *ServiceDTOVersion2TaiwanTripBusBusA1Data) validateBusStatusEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, serviceDTOVersion2TaiwanTripBusBusA1DataTypeBusStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceDTOVersion2TaiwanTripBusBusA1Data) validateBusStatus(formats strfmt.Registry) error {

	if err := validate.Required("BusStatus", "body", m.BusStatus); err != nil {
		return err
	}

	// value enum
	if err := m.validateBusStatusEnum("BusStatus", "body", *m.BusStatus); err != nil {
		return err
	}

	return nil
}

var serviceDTOVersion2TaiwanTripBusBusA1DataTypeDirectionPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[0,1,2,255]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceDTOVersion2TaiwanTripBusBusA1DataTypeDirectionPropEnum = append(serviceDTOVersion2TaiwanTripBusBusA1DataTypeDirectionPropEnum, v)
	}
}

// prop value enum
func (m *ServiceDTOVersion2TaiwanTripBusBusA1Data) validateDirectionEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, serviceDTOVersion2TaiwanTripBusBusA1DataTypeDirectionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceDTOVersion2TaiwanTripBusBusA1Data) validateDirection(formats strfmt.Registry) error {

	if swag.IsZero(m.Direction) { // not required
		return nil
	}

	// value enum
	if err := m.validateDirectionEnum("Direction", "body", m.Direction); err != nil {
		return err
	}

	return nil
}

var serviceDTOVersion2TaiwanTripBusBusA1DataTypeDutyStatusPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[0,1,2]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceDTOVersion2TaiwanTripBusBusA1DataTypeDutyStatusPropEnum = append(serviceDTOVersion2TaiwanTripBusBusA1DataTypeDutyStatusPropEnum, v)
	}
}

// prop value enum
func (m *ServiceDTOVersion2TaiwanTripBusBusA1Data) validateDutyStatusEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, serviceDTOVersion2TaiwanTripBusBusA1DataTypeDutyStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceDTOVersion2TaiwanTripBusBusA1Data) validateDutyStatus(formats strfmt.Registry) error {

	if err := validate.Required("DutyStatus", "body", m.DutyStatus); err != nil {
		return err
	}

	// value enum
	if err := m.validateDutyStatusEnum("DutyStatus", "body", *m.DutyStatus); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2TaiwanTripBusBusA1Data) validateGPSTime(formats strfmt.Registry) error {

	if err := validate.Required("GPSTime", "body", m.GPSTime); err != nil {
		return err
	}

	return nil
}

var serviceDTOVersion2TaiwanTripBusBusA1DataTypeMessageTypePropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[0,1,2]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceDTOVersion2TaiwanTripBusBusA1DataTypeMessageTypePropEnum = append(serviceDTOVersion2TaiwanTripBusBusA1DataTypeMessageTypePropEnum, v)
	}
}

// prop value enum
func (m *ServiceDTOVersion2TaiwanTripBusBusA1Data) validateMessageTypeEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, serviceDTOVersion2TaiwanTripBusBusA1DataTypeMessageTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceDTOVersion2TaiwanTripBusBusA1Data) validateMessageType(formats strfmt.Registry) error {

	if swag.IsZero(m.MessageType) { // not required
		return nil
	}

	// value enum
	if err := m.validateMessageTypeEnum("MessageType", "body", m.MessageType); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2TaiwanTripBusBusA1Data) validatePlateNumb(formats strfmt.Registry) error {

	if err := validate.Required("PlateNumb", "body", m.PlateNumb); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2TaiwanTripBusBusA1Data) validateSpeed(formats strfmt.Registry) error {

	if err := validate.Required("Speed", "body", m.Speed); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2TaiwanTripBusBusA1Data) validateSubRouteName(formats strfmt.Registry) error {

	if swag.IsZero(m.SubRouteName) { // not required
		return nil
	}

	if m.SubRouteName != nil {
		if err := m.SubRouteName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SubRouteName")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion2TaiwanTripBusBusA1Data) validateTaiwanTripName(formats strfmt.Registry) error {

	if swag.IsZero(m.TaiwanTripName) { // not required
		return nil
	}

	if m.TaiwanTripName != nil {
		if err := m.TaiwanTripName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TaiwanTripName")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion2TaiwanTripBusBusA1Data) validateUpdateTime(formats strfmt.Registry) error {

	if err := validate.Required("UpdateTime", "body", m.UpdateTime); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceDTOVersion2TaiwanTripBusBusA1Data) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceDTOVersion2TaiwanTripBusBusA1Data) UnmarshalBinary(b []byte) error {
	var res ServiceDTOVersion2TaiwanTripBusBusA1Data
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
