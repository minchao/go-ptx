// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceDTOVersion2TaiwanTripBusBusSchedule BusSchedule
// swagger:model Service.DTO.Version2.TaiwanTripBus.BusSchedule
type ServiceDTOVersion2TaiwanTripBusBusSchedule struct {

	// 去返程
	// Required: true
	// Enum: [0: 去程 1: 返程 2: 迴圈 255: 未知]
	Direction *string `json:"Direction"`

	// 發車班距
	Frequencys []*ServiceDTOVersion2BusBusFrequency `json:"Frequencys"`

	// 地區既用中之路線代碼(為原資料內碼)
	// Required: true
	RouteID *string `json:"RouteID"`

	// 路線唯一識別代碼，規則為 {業管機關代碼} + {RouteID}，其中 {業管機關代碼} 可於Authority API中的AuthorityCode欄位查詢
	// Required: true
	RouteUID *string `json:"RouteUID"`

	// 地區既用中之子路線代碼(為原資料內碼)
	// Required: true
	SubRouteID *string `json:"SubRouteID"`

	// NameType
	//
	// 子路線名稱
	// Required: true
	SubRouteName *ServiceDTOVersion2BaseNameType `json:"SubRouteName"`

	// 子路線唯一識別代碼，規則為 {業管機關代碼} + {SubRouteID}，其中 {業管機關代碼} 可於Authority API中的AuthorityCode欄位查詢
	// Required: true
	SubRouteUID *string `json:"SubRouteUID"`

	// NameType
	//
	// 台灣好行路線名稱
	// Required: true
	TaiwanTripName *ServiceDTOVersion2BaseNameType `json:"TaiwanTripName"`

	// 預定班表
	Timetables []*ServiceDTOVersion2BusBusTimetable `json:"Timetables"`
}

// Validate validates this service d t o version2 taiwan trip bus bus schedule
func (m *ServiceDTOVersion2TaiwanTripBusBusSchedule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrequencys(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouteID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouteUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubRouteID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubRouteName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubRouteUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaiwanTripName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimetables(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var serviceDTOVersion2TaiwanTripBusBusScheduleTypeDirectionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["0: 去程","1: 返程","2: 迴圈","255: 未知"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceDTOVersion2TaiwanTripBusBusScheduleTypeDirectionPropEnum = append(serviceDTOVersion2TaiwanTripBusBusScheduleTypeDirectionPropEnum, v)
	}
}

const (

	// ServiceDTOVersion2TaiwanTripBusBusScheduleDirectionNr0去程 captures enum value "0: 去程"
	ServiceDTOVersion2TaiwanTripBusBusScheduleDirectionNr0去程 string = "0: 去程"

	// ServiceDTOVersion2TaiwanTripBusBusScheduleDirectionNr1返程 captures enum value "1: 返程"
	ServiceDTOVersion2TaiwanTripBusBusScheduleDirectionNr1返程 string = "1: 返程"

	// ServiceDTOVersion2TaiwanTripBusBusScheduleDirectionNr2迴圈 captures enum value "2: 迴圈"
	ServiceDTOVersion2TaiwanTripBusBusScheduleDirectionNr2迴圈 string = "2: 迴圈"

	// ServiceDTOVersion2TaiwanTripBusBusScheduleDirectionNr255未知 captures enum value "255: 未知"
	ServiceDTOVersion2TaiwanTripBusBusScheduleDirectionNr255未知 string = "255: 未知"
)

// prop value enum
func (m *ServiceDTOVersion2TaiwanTripBusBusSchedule) validateDirectionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, serviceDTOVersion2TaiwanTripBusBusScheduleTypeDirectionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceDTOVersion2TaiwanTripBusBusSchedule) validateDirection(formats strfmt.Registry) error {

	if err := validate.Required("Direction", "body", m.Direction); err != nil {
		return err
	}

	// value enum
	if err := m.validateDirectionEnum("Direction", "body", *m.Direction); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2TaiwanTripBusBusSchedule) validateFrequencys(formats strfmt.Registry) error {

	if swag.IsZero(m.Frequencys) { // not required
		return nil
	}

	for i := 0; i < len(m.Frequencys); i++ {
		if swag.IsZero(m.Frequencys[i]) { // not required
			continue
		}

		if m.Frequencys[i] != nil {
			if err := m.Frequencys[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Frequencys" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceDTOVersion2TaiwanTripBusBusSchedule) validateRouteID(formats strfmt.Registry) error {

	if err := validate.Required("RouteID", "body", m.RouteID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2TaiwanTripBusBusSchedule) validateRouteUID(formats strfmt.Registry) error {

	if err := validate.Required("RouteUID", "body", m.RouteUID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2TaiwanTripBusBusSchedule) validateSubRouteID(formats strfmt.Registry) error {

	if err := validate.Required("SubRouteID", "body", m.SubRouteID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2TaiwanTripBusBusSchedule) validateSubRouteName(formats strfmt.Registry) error {

	if err := validate.Required("SubRouteName", "body", m.SubRouteName); err != nil {
		return err
	}

	if m.SubRouteName != nil {
		if err := m.SubRouteName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SubRouteName")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion2TaiwanTripBusBusSchedule) validateSubRouteUID(formats strfmt.Registry) error {

	if err := validate.Required("SubRouteUID", "body", m.SubRouteUID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2TaiwanTripBusBusSchedule) validateTaiwanTripName(formats strfmt.Registry) error {

	if err := validate.Required("TaiwanTripName", "body", m.TaiwanTripName); err != nil {
		return err
	}

	if m.TaiwanTripName != nil {
		if err := m.TaiwanTripName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TaiwanTripName")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion2TaiwanTripBusBusSchedule) validateTimetables(formats strfmt.Registry) error {

	if swag.IsZero(m.Timetables) { // not required
		return nil
	}

	for i := 0; i < len(m.Timetables); i++ {
		if swag.IsZero(m.Timetables[i]) { // not required
			continue
		}

		if m.Timetables[i] != nil {
			if err := m.Timetables[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Timetables" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceDTOVersion2TaiwanTripBusBusSchedule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceDTOVersion2TaiwanTripBusBusSchedule) UnmarshalBinary(b []byte) error {
	var res ServiceDTOVersion2TaiwanTripBusBusSchedule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
