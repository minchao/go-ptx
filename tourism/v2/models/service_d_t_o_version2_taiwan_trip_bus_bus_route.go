// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceDTOVersion2TaiwanTripBusBusRoute BusRoute
//
// 路線資料型別
// swagger:model Service.DTO.Version2.TaiwanTripBus.BusRoute
type ServiceDTOVersion2TaiwanTripBusBusRoute struct {

	// 業管單位代碼
	// Required: true
	AuthorityID *string `json:"AuthorityID"`

	// 公車路線類別
	// Required: true
	// Enum: [11: 市區公車 12: 公路客運 13: 國道客運 14: 接駁車]
	BusRouteType *string `json:"BusRouteType"`

	// 路線權管所屬縣市(相當於市區公車API的City參數)[若為公路/國道客運路線則為空值]
	City string `json:"City,omitempty"`

	// 路線權管所屬縣市之代碼(國際ISO 3166-2 三碼城市代碼)[若為公路/國道客運路線則為空值]
	CityCode string `json:"CityCode,omitempty"`

	// 起站英文名稱
	DepartureStopNameEn string `json:"DepartureStopNameEn,omitempty"`

	// 起站中文名稱
	DepartureStopNameZh string `json:"DepartureStopNameZh,omitempty"`

	// 終點站英文名稱
	DestinationStopNameEn string `json:"DestinationStopNameEn,omitempty"`

	// 終點站中文名稱
	DestinationStopNameZh string `json:"DestinationStopNameZh,omitempty"`

	// 收費緩衝區英文敘述
	FareBufferZoneDescriptionEn string `json:"FareBufferZoneDescriptionEn,omitempty"`

	// 收費緩衝區中文敘述
	FareBufferZoneDescriptionZh string `json:"FareBufferZoneDescriptionZh,omitempty"`

	// 實際上是否有多條附屬路線。(此欄位值與SubRoutes結構並無強烈的絕對關聯。詳細說明請參閱swagger上方的【資料服務使用注意事項】)
	// Required: true
	HasSubRoutes *bool `json:"HasSubRoutes"`

	// 路線公車動態資訊網址
	LiveBusURL string `json:"LiveBusUrl,omitempty"`

	// 營運業者代碼
	// Required: true
	OperatorIDs []string `json:"OperatorIDs"`

	// 營運業者
	// Required: true
	Operators []*ServiceDTOVersion2BusRouteOperator `json:"Operators"`

	// 資料提供平台代碼
	// Required: true
	ProviderID *string `json:"ProviderID"`

	// 地區既用中之路線代碼(為原資料內碼)
	// Required: true
	RouteID *string `json:"RouteID"`

	// 路線簡圖網址
	RouteMapImageURL string `json:"RouteMapImageUrl,omitempty"`

	// 路線唯一識別代碼，規則為 {業管機關代碼} + {RouteID}，其中 {業管機關代碼} 可於Authority API中的AuthorityCode欄位查詢
	// Required: true
	RouteUID *string `json:"RouteUID"`

	// 路線資訊說明網址
	RouteURL string `json:"RouteUrl,omitempty"`

	// 附屬路線資料(如果原始資料並無提供附屬路線ID，而本平台基於跨來源資料之一致性，會以SubRouteID=RouteID產製一份相對應的附屬路線資料(若有去返程，則會有兩筆))
	SubRoutes []*ServiceDTOVersion2BusBusSubRoute `json:"SubRoutes"`

	// NameType
	//
	// 台灣好行路線名稱
	// Required: true
	TaiwanTripName *ServiceDTOVersion2BaseNameType `json:"TaiwanTripName"`

	// 票價英文敘述
	TicketPriceDescriptionEn string `json:"TicketPriceDescriptionEn,omitempty"`

	// 票價中文敘述
	TicketPriceDescriptionZh string `json:"TicketPriceDescriptionZh,omitempty"`

	// DateTime
	//
	// 資料更新日期時間(ISO8601格式:yyyy-MM-ddTHH:mm:sszzz)
	// Required: true
	UpdateTime *string `json:"UpdateTime"`
}

// Validate validates this service d t o version2 taiwan trip bus bus route
func (m *ServiceDTOVersion2TaiwanTripBusBusRoute) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthorityID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBusRouteType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHasSubRoutes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperatorIDs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperators(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProviderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouteID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouteUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubRoutes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaiwanTripName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceDTOVersion2TaiwanTripBusBusRoute) validateAuthorityID(formats strfmt.Registry) error {

	if err := validate.Required("AuthorityID", "body", m.AuthorityID); err != nil {
		return err
	}

	return nil
}

var serviceDTOVersion2TaiwanTripBusBusRouteTypeBusRouteTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["11: 市區公車","12: 公路客運","13: 國道客運","14: 接駁車"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceDTOVersion2TaiwanTripBusBusRouteTypeBusRouteTypePropEnum = append(serviceDTOVersion2TaiwanTripBusBusRouteTypeBusRouteTypePropEnum, v)
	}
}

const (

	// ServiceDTOVersion2TaiwanTripBusBusRouteBusRouteTypeNr11市區公車 captures enum value "11: 市區公車"
	ServiceDTOVersion2TaiwanTripBusBusRouteBusRouteTypeNr11市區公車 string = "11: 市區公車"

	// ServiceDTOVersion2TaiwanTripBusBusRouteBusRouteTypeNr12公路客運 captures enum value "12: 公路客運"
	ServiceDTOVersion2TaiwanTripBusBusRouteBusRouteTypeNr12公路客運 string = "12: 公路客運"

	// ServiceDTOVersion2TaiwanTripBusBusRouteBusRouteTypeNr13國道客運 captures enum value "13: 國道客運"
	ServiceDTOVersion2TaiwanTripBusBusRouteBusRouteTypeNr13國道客運 string = "13: 國道客運"

	// ServiceDTOVersion2TaiwanTripBusBusRouteBusRouteTypeNr14接駁車 captures enum value "14: 接駁車"
	ServiceDTOVersion2TaiwanTripBusBusRouteBusRouteTypeNr14接駁車 string = "14: 接駁車"
)

// prop value enum
func (m *ServiceDTOVersion2TaiwanTripBusBusRoute) validateBusRouteTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, serviceDTOVersion2TaiwanTripBusBusRouteTypeBusRouteTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceDTOVersion2TaiwanTripBusBusRoute) validateBusRouteType(formats strfmt.Registry) error {

	if err := validate.Required("BusRouteType", "body", m.BusRouteType); err != nil {
		return err
	}

	// value enum
	if err := m.validateBusRouteTypeEnum("BusRouteType", "body", *m.BusRouteType); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2TaiwanTripBusBusRoute) validateHasSubRoutes(formats strfmt.Registry) error {

	if err := validate.Required("HasSubRoutes", "body", m.HasSubRoutes); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2TaiwanTripBusBusRoute) validateOperatorIDs(formats strfmt.Registry) error {

	if err := validate.Required("OperatorIDs", "body", m.OperatorIDs); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2TaiwanTripBusBusRoute) validateOperators(formats strfmt.Registry) error {

	if err := validate.Required("Operators", "body", m.Operators); err != nil {
		return err
	}

	for i := 0; i < len(m.Operators); i++ {
		if swag.IsZero(m.Operators[i]) { // not required
			continue
		}

		if m.Operators[i] != nil {
			if err := m.Operators[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Operators" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceDTOVersion2TaiwanTripBusBusRoute) validateProviderID(formats strfmt.Registry) error {

	if err := validate.Required("ProviderID", "body", m.ProviderID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2TaiwanTripBusBusRoute) validateRouteID(formats strfmt.Registry) error {

	if err := validate.Required("RouteID", "body", m.RouteID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2TaiwanTripBusBusRoute) validateRouteUID(formats strfmt.Registry) error {

	if err := validate.Required("RouteUID", "body", m.RouteUID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceDTOVersion2TaiwanTripBusBusRoute) validateSubRoutes(formats strfmt.Registry) error {

	if swag.IsZero(m.SubRoutes) { // not required
		return nil
	}

	for i := 0; i < len(m.SubRoutes); i++ {
		if swag.IsZero(m.SubRoutes[i]) { // not required
			continue
		}

		if m.SubRoutes[i] != nil {
			if err := m.SubRoutes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SubRoutes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceDTOVersion2TaiwanTripBusBusRoute) validateTaiwanTripName(formats strfmt.Registry) error {

	if err := validate.Required("TaiwanTripName", "body", m.TaiwanTripName); err != nil {
		return err
	}

	if m.TaiwanTripName != nil {
		if err := m.TaiwanTripName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TaiwanTripName")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceDTOVersion2TaiwanTripBusBusRoute) validateUpdateTime(formats strfmt.Registry) error {

	if err := validate.Required("UpdateTime", "body", m.UpdateTime); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceDTOVersion2TaiwanTripBusBusRoute) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceDTOVersion2TaiwanTripBusBusRoute) UnmarshalBinary(b []byte) error {
	var res ServiceDTOVersion2TaiwanTripBusBusRoute
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
